<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZERO开发</title>
  
  <subtitle>一个探索副业的独立开发人博客</subtitle>
  <link href="https://www.zerofc.cn/atom.xml" rel="self"/>
  
  <link href="https://www.zerofc.cn/"/>
  <updated>2024-10-07T03:15:11.224Z</updated>
  <id>https://www.zerofc.cn/</id>
  
  <author>
    <name>北桥苏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>鸿蒙Next实战：烟花模拟器</title>
    <link href="https://www.zerofc.cn/2024/10/07/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%83%9F%E8%8A%B1%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    <id>https://www.zerofc.cn/2024/10/07/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%83%9F%E8%8A%B1%E6%A8%A1%E6%8B%9F%E5%99%A8/</id>
    <published>2024-10-07T00:00:00.000Z</published>
    <updated>2024-10-07T03:15:11.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过上一篇文章可以看出，要在鸿蒙应用中实现特别炫的特效还是比较复杂。动画固然重要，但如果在赶工期的情况下，大家都会优先业务，那有没有简单快速的方法呢？</p><p>有的，也用像 Android 和 iOS 里 WebView 的方式，h5 的特效现在是应有尽有，把他嵌入鸿蒙 Next 应用里就可以，那如何在鸿蒙 Next 中使用 WebView 来实现电子烟花？</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://oscimg.oschina.net/oscnet/up-7f48a708455d7b840f80a9a119c3af20bdc.gif" alt="img"></h1><h1 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h1><ol><li>组件拆解</li><li>资源引入</li><li>页面路由</li><li>WebView</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-9a8f011c01189f9a5b84b967c08c325bc8f.gif" alt="img"></p><h1 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h1><p>因为前面的木鱼和现在的烟花都是同一个小工具应用，公用组件的拆分、页面跳转和资源的引入全有涉及，所以就连同 WebView 一起总结一下。</p><h2 id="组件拆解"><a href="#组件拆解" class="headerlink" title="组件拆解"></a>组件拆解</h2><p>在 ArkUI 中，UI 显示的内容均为组件，由框架直接提供的称为系统组件，由开发者定义的称为自定义组件。这里我们将所有页面的导航拆分成一个公用组件，并定义为 HdNav.ets。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import &#123; router &#125; from &#x27;@kit.ArkUI&#x27;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export struct HdNav &#123;</span><br><span class="line">  @StorageProp(&#x27;topHeight&#x27;)</span><br><span class="line">  topHeight: number = 0</span><br><span class="line">  @Prop</span><br><span class="line">  title: string = &#x27;hello world&#x27;</span><br><span class="line">  @Prop</span><br><span class="line">  hasBorder: boolean = false</span><br><span class="line">  @Prop</span><br><span class="line">  leftIcon: ResourceStr = $r(&#x27;app.media.ic_common_back&#x27;)</span><br><span class="line">  @Prop</span><br><span class="line">  rightIcon: ResourceStr = $r(&#x27;sys.media.ohos_ic_public_more&#x27;)</span><br><span class="line">  @Prop</span><br><span class="line">  showRightIcon: boolean = true</span><br><span class="line">  @Prop</span><br><span class="line">  iconColor: ResourceStr = $r(&#x27;app.color.black&#x27;)</span><br><span class="line">  @Prop</span><br><span class="line">  titleColor: string = &#x27;#131313&#x27;</span><br><span class="line">  @BuilderParam</span><br><span class="line">  menuBuilder: () =&gt; void = this.defaultMenu</span><br><span class="line"></span><br><span class="line">  @Builder</span><br><span class="line">  defaultMenu() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row(&#123; space: 16 &#125;) &#123;</span><br><span class="line">      Image(this.leftIcon)</span><br><span class="line">        .size(&#123; width: 24, height: 24 &#125;)</span><br><span class="line">        .onClick(() =&gt; router.back())</span><br><span class="line">        .fillColor(this.iconColor)</span><br><span class="line">      Row() &#123;</span><br><span class="line">        if (this.title) &#123;</span><br><span class="line">          Text(this.title)</span><br><span class="line">            .fontWeight(600)</span><br><span class="line">            .fontColor(this.titleColor)</span><br><span class="line">            .layoutWeight(1)</span><br><span class="line">            .textAlign(TextAlign.Center)</span><br><span class="line">            .fontSize(18)</span><br><span class="line">            .maxLines(1)</span><br><span class="line">            .textOverflow(&#123; overflow: TextOverflow.Ellipsis &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .height(56)</span><br><span class="line">      .layoutWeight(1)</span><br><span class="line"></span><br><span class="line">      if (this.showRightIcon) &#123;</span><br><span class="line">        Image(this.rightIcon)</span><br><span class="line">          .size(&#123; width: 24, height: 24 &#125;)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .bindMenu(this.menuBuilder)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        Blank()</span><br><span class="line">          .width(24)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .padding(&#123; left: 16, right: 16, top: this.topHeight &#125;)</span><br><span class="line">    .height(56 + this.topHeight)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .border(&#123;</span><br><span class="line">      width: &#123; bottom: this.hasBorder ? $r(&#x27;app.float.common_border_width&#x27;) : 0 &#125;,</span><br><span class="line">      color: $r(&#x27;app.color.common_gray_bg&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源引入"><a href="#资源引入" class="headerlink" title="资源引入"></a>资源引入</h2><p>应用开发过程中，经常需要用到颜色、字体、间距、图片等资源，在不同的设备或配置中，这些资源的值可能不同。</p><ul><li>应用资源：借助资源文件能力，开发者在应用中自定义资源，自行管理这些资源在不同的设备或配置中的表现。</li><li>系统资源：开发者直接使用系统预置的资源定义。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 引入resouces/base/media下的home_selected的图片</span><br><span class="line">$r(&#x27;app.media.home_selected&#x27;)</span><br><span class="line"></span><br><span class="line"># 导入resources/rawfile下的index.html文件</span><br><span class="line">$rawfile(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line"># 获取resources/rawfile下的audio.mp3音频</span><br><span class="line">await getContext(this).resourceManager.getRawFd(&quot;audio.mp3&quot;)</span><br></pre></td></tr></table></figure><h2 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h2><p>页面路由 router 根据页面的 uri 找到目标页面，从而实现跳转。以最基础的两个页面之间的跳转为例，具体实现步骤如下：</p><ol><li>在 “Project“窗口，打开 src&gt; main &gt;ets，右键点击 pages 文件夹，创建一个页面。</li><li>在 resources&#x2F;base&#x2F;profile 下的 main_pages.json，新建一个 pages 中创建页面的文件名（注意大小写）。</li><li>调用 router.push () 路由到指定页面。</li><li>调用 router.back () 回到首页。</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-e8f95781e003d6125ef4ee2d38291b0a946.png" alt="img"></p><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><p>页面加载是 Web 组件的基本功能。根据页面加载数据来源可以分为三种常用场景，包括加载网络页面、加载本地页面、加载 HTML 格式的富文本数据。</p><p>页面加载过程中，若涉及网络资源获取，需要配置 ohos.permission.INTERNET 网络访问权限，下面以本地静态文件的方法举例。</p><ul><li>将资源文件放置在应用的 resources&#x2F;rawfile 目录下。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-9b71868068b6318c99729b9bd79b9c72445.png" alt="img"></p><ul><li>鸿蒙 Next 应用代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import web_webview from &#x27;@ohos.web.webview&#x27;;</span><br><span class="line">import &#123; HdNav &#125; from &#x27;@mygames/basic&#x27;;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct WebComponent &#123;</span><br><span class="line">  controller: web_webview.WebviewController = new web_webview.WebviewController();</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      HdNav(&#123; title: &#x27;看烟花秀&#x27;, showRightIcon: false, iconColor: $r(&#x27;app.color.black&#x27;) &#125;)</span><br><span class="line"></span><br><span class="line">      Button(&#x27;loadData&#x27;)</span><br><span class="line">        .onClick(() =&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            this.controller.loadUrl($rawfile(&quot;index.html&quot;));</span><br><span class="line"></span><br><span class="line">          &#125; catch (error) &#123;</span><br><span class="line">            console.error(`ErrorCode: $&#123;error.code&#125;,  Message: $&#123;error.message&#125;`);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      // 组件创建时，加载www.example.com</span><br><span class="line">      Web(&#123; src: $rawfile(&quot;index.html&quot;), controller: this.controller &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>烟花代码</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-6744c6018ee686ff885e2d3fce4bde7c081.png" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>到这里鸿蒙 Next 应用实战暂告一段落了。但是鸿蒙系统提供了开箱即用的原生 AI 能力，更方便了我们开发者实现应用的快速智能化，所以，鸿蒙 Next 智能应用实战，待续～</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通过上一篇文章可以看出，要在鸿蒙应用中实现特别炫的特效还是比较复杂。动画固然重要，但如果在赶工期的情况下，大家都会优先业务，那有没有简单快速</summary>
      
    
    
    
    <category term="前端开发" scheme="https://www.zerofc.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙Next" scheme="https://www.zerofc.cn/tags/%E9%B8%BF%E8%92%99Next/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙Next实战：电子木鱼</title>
    <link href="https://www.zerofc.cn/2024/10/06/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%B5%E5%AD%90%E6%9C%A8%E9%B1%BC/"/>
    <id>https://www.zerofc.cn/2024/10/06/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%B5%E5%AD%90%E6%9C%A8%E9%B1%BC/</id>
    <published>2024-10-06T00:00:00.000Z</published>
    <updated>2024-10-07T03:14:58.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正所谓：Hello Word 是程序员学任何一门语言的第一个程序实践。这其实也是一个不错的正反馈，那如何让学习鸿蒙 Next 更有成就感呢？下面就演示一下从零开发一个鸿蒙 Next 版的电子木鱼，主打就是一个抽象！</p><p><img src="https://oscimg.oschina.net/oscnet/up-0e821fc204618a9429123f0a852e11df614.png" alt="img"></p><h1 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h1><ol><li>页面布局</li><li>木鱼点击</li><li>木鱼音效</li><li>动画特效</li><li>自定义弹窗</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-2bbe0ef0a0f3df2842362470e5921f57641.jpg" alt="img"></p><h1 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h1><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>ArkTS 定义了声明式 UI 描述、自定义组件和动态扩展 UI 元素的能力，配合 ArkUI 开发框架中的系统组件及其相关的事件方法、属性方法等共同构成 UI 开发的主体。我们下面要完成的主要是一个木鱼和设置按钮、自动按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">build() &#123;</span><br><span class="line"></span><br><span class="line">Column() &#123;</span><br><span class="line">  HdNav(&#123; title: &#x27;电子木鱼&#x27;, showRightIcon: false, iconColor: $r(&#x27;app.color.white&#x27;), titleColor: &#x27;#ffffff&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Text(this.woodenType[this.type] + &#x27;：&#x27;+ this.score).fontSize(22).fontColor(&quot;#ffffff&quot;).width(&#x27;100%&#x27;).textAlign(TextAlign.Center)</span><br><span class="line">  &#125;.width(&quot;100%&quot;).height(&quot;8%&quot;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Image($r(&#x27;app.media.setting&#x27;)).width(25).height(25).margin(16).onClick(() =&gt; &#123;</span><br><span class="line">  if (this.dialogController != null) &#123;</span><br><span class="line">this.dialogController.open()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  &#125;.width(&#x27;100%&#x27;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Image($r(&#x27;app.media.foreground&#x27;)).width(40).height(40).margin(&#123;left:8,top:5&#125;)</span><br><span class="line">  &#125;.width(&#x27;100%&#x27;)</span><br><span class="line">  .onClick(() =&gt; &#123;</span><br><span class="line">this.handlePopup = !this.handlePopup</span><br><span class="line">  &#125;)</span><br><span class="line">  .bindPopup(this.handlePopup, &#123;</span><br><span class="line">message: &#x27;数据统计功能，正在完善中~&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">if (this.isPresent) &#123;</span><br><span class="line">  Text(this.woodenType[this.type] + &#x27;: &#x27; + this.woodenFishNum).fontSize(16).fontColor(&quot;#ffffff&quot;).width(&#x27;100%&#x27;).textAlign(TextAlign.Center)</span><br><span class="line">.transition(this.effect)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;.width(&#x27;100%&#x27;).height(&#x27;25%&#x27;)</span><br><span class="line">  .alignItems(VerticalAlign.Top)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Image($r(&#x27;app.media.muyu&#x27;))</span><br><span class="line">  .width(this.isZoomed == true ? this.targetWidth * 1.2 : this.targetWidth * 1)</span><br><span class="line">  .height(this.isZoomed == true ? this.targetHeight * 1.2 : this.targetHeight * 1)</span><br><span class="line">  &#125;</span><br><span class="line">  .width(&#x27;100%&#x27;)</span><br><span class="line">  .height(&#x27;25%&#x27;)</span><br><span class="line">  .alignItems(VerticalAlign.Center)</span><br><span class="line">  .justifyContent(FlexAlign.Center)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Toggle(&#123; type: ToggleType.Switch &#125;)</span><br><span class="line">  .onChange((isOn: boolean) =&gt; &#123;</span><br><span class="line">if(isOn) &#123;</span><br><span class="line">  promptAction.showToast(&#123; message: &#x27;auto is on.&#x27; &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  promptAction.showToast(&#123; message: &#x27;auto is off.&#x27; &#125;)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">Text(&#x27;自动&#x27; + this.woodenType[this.type]).fontSize(18).fontColor(&#x27;#ffffff&#x27;).height(40).margin(&#123;left: 10&#125;)</span><br><span class="line"></span><br><span class="line">  &#125;.width(&#x27;100%&#x27;).height(&#x27;10%&#x27;).justifyContent(FlexAlign.Center)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.height(&quot;100%&quot;)</span><br><span class="line">.backgroundColor(&#x27;rgba(0, 0, 0, 1.00)&#x27;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="木鱼点击"><a href="#木鱼点击" class="headerlink" title="木鱼点击"></a>木鱼点击</h2><p>木鱼是一张图片，也就是给该图绑定一个点击事件，点击一次有三个动作需要执行：</p><ul><li>木鱼有放大的效果</li><li>有类似功德文字的飘动</li><li>功德数值的累加</li></ul><p>而点击的时候要看到实时的效果，所以可以声明三个状态，通过 State 的修改，从而驱动 UI 更新，以下的 animateTo 是给域名的放大添加的一个平滑效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 积分</span><br><span class="line">@State score: number = 0</span><br><span class="line">// 积分文字</span><br><span class="line">@State isPresent: boolean = false</span><br><span class="line">// 木鱼是否放大</span><br><span class="line">@State isZoomed: boolean = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 木鱼UI</span><br><span class="line">Image($r(&#x27;app.media.muyu&#x27;))</span><br><span class="line">.width(this.isZoomed == true ? this.targetWidth * 1.2 : this.targetWidth * 1)</span><br><span class="line">.height(this.isZoomed == true ? this.targetHeight * 1.2 : this.targetHeight * 1)</span><br><span class="line">.onClick((event) =&gt; &#123;</span><br><span class="line">animateTo(&#123; curve: curves.springMotion() &#125;, () =&gt; &#123;</span><br><span class="line">  this.isZoomed = !this.isZoomed;</span><br><span class="line"></span><br><span class="line">  if (this.isZoomed == true) &#123;</span><br><span class="line">this.isPresent = true;</span><br><span class="line">this.score += this.woodenFishNum;</span><br><span class="line">this.onClickPlay();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 定时缩小/定时文字消失</span><br><span class="line">setTimeout(() =&gt; &#123;this.isZoomed = false;&#125;, 50);</span><br><span class="line">setTimeout(() =&gt; &#123;this.isPresent = false&#125;, 600);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="木鱼音效"><a href="#木鱼音效" class="headerlink" title="木鱼音效"></a>木鱼音效</h2><p>木鱼音效是点击时的咚咚的声音，这里就要使用到 HarmonyOS Next 的音频服务。这里需要注意一点，项目运行预览无法播放，一定要模拟器或真机才可以调试音频的播放效果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-957f2f2082d91c8fd3f7bdcd25ac19a7577.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 销毁音效工具</span><br><span class="line">  onClickDestroy= ()=&gt;&#123;</span><br><span class="line">    AudioMgr.Ins().destroy();</span><br><span class="line">    console.log(&#x27;audio&#x27;, &#x27;destroy&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 初始化音效工具</span><br><span class="line">  onClickInit = ()=&gt;&#123;</span><br><span class="line">    AudioMgr.Ins().init();</span><br><span class="line">    console.log(&#x27;audio&#x27;, &#x27;init&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 播放指定音效</span><br><span class="line">  onClickPlay = ()=&gt;&#123;</span><br><span class="line">    AudioMgr.Ins().play();</span><br><span class="line">    console.log(&#x27;audio&#x27;, &#x27;playing&#x27;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://oscimg.oschina.net/oscnet/up-bb7dc3e97e316f453c7f6a72aec07052dae.png" alt="img"></p><h2 id="动画特效"><a href="#动画特效" class="headerlink" title="动画特效"></a>动画特效</h2><p>这里的动画效果主要是点击木鱼，从下网上飘出一个文字然后消失的特效。在鸿蒙中可以通过 TransitionEffect 方法添加效果，首先创建特效，然后再文字上挂载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 上移入场特效</span><br><span class="line">  private effect: object =</span><br><span class="line">    TransitionEffect.OPACITY</span><br><span class="line">      // 初始正常大小// 假设动画持续时间为500ms</span><br><span class="line">      .combine(TransitionEffect.scale(&#123; x: 1, y: 1 &#125;).animation(&#123; curve: curves.springMotion(0.6, 1.2), duration: 0 &#125;))</span><br><span class="line">       // 向上平移150单位// 与上一步同时开始</span><br><span class="line">      .combine(TransitionEffect.translate(&#123; x: 0, y: 400 &#125;).animation(&#123; curve: curves.springMotion(0.6, 1.2), duration: 10000, delay: 50 &#125;))</span><br><span class="line">       // 淡出至完全透明// 在平移结束后开始淡出</span><br><span class="line">      .combine(TransitionEffect.opacity(0).animation(&#123; curve: curves.springMotion(0.6, 1.2), duration: 1000, delay: 0 &#125;));</span><br></pre></td></tr></table></figure><p><img src="https://oscimg.oschina.net/oscnet/up-dbe42f5c89bf43d36dcc62ab8459986682a.png" alt="img"></p><h2 id="自定义弹窗"><a href="#自定义弹窗" class="headerlink" title="自定义弹窗"></a>自定义弹窗</h2><p>经过前面布局，事件绑定，音效播放，一个简单的电子木鱼其实已经完成了。但是为了增添趣味和后期扩展，这里再加一个设置功能，通过按钮打开配置项弹窗，设置包括：</p><ul><li>类型选项 (功德、财运、桃花运等)</li><li>音效选项 (各种解压的音效素材)</li><li>皮肤管理 (木鱼的 UI 界面设置)</li><li>数值修改 (对展示的累加数值做任意修改)</li><li>其他 (是否关闭音效，是否自动点击等)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// 弹窗层(UI开发-组件-自定义弹窗)</span><br><span class="line">@CustomDialog</span><br><span class="line">struct SettingDialog &#123;</span><br><span class="line">  controller?: CustomDialogController</span><br><span class="line"></span><br><span class="line">  // 父子组件双向同步，文档见 https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-link-V5</span><br><span class="line">  @Link woodenFishType: number</span><br><span class="line"></span><br><span class="line">  // 木鱼敲击的数值</span><br><span class="line">  @Link woodenFishNum: number</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;愿望：&#x27;).fontSize(17).fontWeight(600)</span><br><span class="line">        Radio(&#123; value: &#x27;功德&#x27;, group: &#x27;word&#x27; &#125;).checked(true).onChange((isChecked: boolean) =&gt; &#123;</span><br><span class="line">          if(isChecked) &#123;</span><br><span class="line">            this.woodenFishType = 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Text(&#x27;功德&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;财富&#x27;, group: &#x27;word&#x27; &#125;).onChange((isChecked: boolean) =&gt; &#123;</span><br><span class="line">          if(isChecked) &#123;</span><br><span class="line">            this.woodenFishType = 1</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Text(&#x27;财富&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;桃花运&#x27;, group: &#x27;word&#x27; &#125;).onChange((isChecked: boolean) =&gt; &#123;</span><br><span class="line">          if(isChecked) &#123;</span><br><span class="line">            this.woodenFishType = 2</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Text(&#x27;桃花运&#x27;).fontSize(15)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;数值：&#x27;).fontSize(16).fontWeight(600)</span><br><span class="line">        TextInput(&#123;text:&#x27;1&#x27;&#125;).type(InputType.Number).width(180).onChange((value: string) =&gt; &#123;</span><br><span class="line">          this.woodenFishNum = parseInt(value)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;音效：&#x27;).fontSize(16).fontWeight(600)</span><br><span class="line">        Toggle(&#123; type: ToggleType.Switch &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;皮肤：&#x27;).fontSize(16).fontWeight(600)</span><br><span class="line">        Radio(&#123; value: &#x27;默认&#x27;, group: &#x27;skin&#x27; &#125;).checked(true)</span><br><span class="line">        Text(&#x27;木鱼&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;悟空&#x27;, group: &#x27;skin&#x27; &#125;)</span><br><span class="line">        Text(&#x27;黑悟空&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;典韦&#x27;, group: &#x27;skin&#x27; &#125;)</span><br><span class="line">        Text(&#x27;典韦&#x27;).fontSize(15)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">    &#125;.padding(&#123;top: 28, left: 15&#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是：父子组件的数据传递。因为自定义弹窗和木鱼是两个不同的组件，而点击弹窗中的比如类型切换或修改的数值，全部要更新到木鱼组件的展示当中。</p><p>当然鸿蒙也提供了 @Link 装饰器，用于与其父组件中的数据源共享相同的值，可以结合上面代码和下方截图参考其用法。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c59691bbee82b725b86786632bf238bb60e.png" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>到这里，一个通用型的鸿蒙 Next 版电子木鱼就完成了。不管是组件交互还是布局都还好，唯一让我觉得不适应的是动画特效。</p><p>如果用这种方式实现电子烟花肯定不行，所以下次将换一种方法快速实现烟花秀，以及页面间的跳转，待更新～</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;正所谓：Hello Word 是程序员学任何一门语言的第一个程序实践。这其实也是一个不错的正反馈，那如何让学习鸿蒙 Next 更有成就感呢？</summary>
      
    
    
    
    <category term="前端开发" scheme="https://www.zerofc.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙Next" scheme="https://www.zerofc.cn/tags/%E9%B8%BF%E8%92%99Next/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙Next实战：环境搭建</title>
    <link href="https://www.zerofc.cn/2024/10/05/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.zerofc.cn/2024/10/05/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-10-05T00:00:00.000Z</published>
    <updated>2024-10-07T03:14:18.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为独立开发者，如果我们错过了传统移动 App，和后起小程序的红利，那万物互联 + AI 的应用开发就得抓住了。</p><p>虽然个人上架应用平台难易都差不多，但是鸿蒙生态当前正需要广大开发者参与，一旦上架，相比其他平台，流量扶持力度更大，变现能力也更容易。</p><p>所以，我们可以先开发一些应用占个位置，后面再逐渐迭代完善；那么，第一步就先从搭建开发环境开始吧。</p><p><img src="https://oscimg.oschina.net/oscnet/up-19a09b604db11b5784d86b1c0571bd2b604.png" alt="img"></p><h1 id="鸿蒙-Next-简介"><a href="#鸿蒙-Next-简介" class="headerlink" title="鸿蒙 Next 简介"></a>鸿蒙 Next 简介</h1><p>鸿蒙 Next，英文 HarmoneyOS Next，又叫纯血版鸿蒙，2023 年 8 月 4 日开发者预览版，2024 年 6 月正式对外公布。鸿蒙 NEXT 采用了全鸿蒙内核，完成了对 Linux 内核的全面替换，并去掉了安卓开放源代码项目（AOSP）等代码，实现了真正的自主可控，他能支持华为及合作厂商的多种智能终端设备，包括手机、平板、智慧屏等等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-78d21199f2fe533f5f019684daaf9d1db40.png" alt="img"></p><h3 id="运行环境要求"><a href="#运行环境要求" class="headerlink" title="运行环境要求"></a>运行环境要求</h3><p>针对开发 HarmonyOS 应用及元服务，华为基于 IntelliJ IDEA Community 开源版本打造了一个集成开发环境（IDE）——DevEco Studio，能将开发的应用和服务同时运行在 HarmonyOS 和 OpenHarmony 系统上，为保证 DevEco Studio 正常运行，建议您的电脑配置满足如下要求：</p><ul><li>操作系统：Windows10 64 位，内部版号大于 18363</li><li>内存：8GB 及以上</li><li>硬盘：100GB 及以上</li><li>分辨率：1280*800 像素及以上</li><li>其他： 开启了 Hyper-V 虚拟化</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-a64efb47dbb23be6d6288635a5ad0b3b720.png" alt="img"></p><h1 id="DevEco-Studio"><a href="#DevEco-Studio" class="headerlink" title="DevEco Studio"></a>DevEco Studio</h1><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>进入 huawei 开发者平台下载，最好找 5.0 以上又不是最新版本就行。还有 DevEco Studio 支持 Windows 和 macOS 系统，但我本人用的是 Windows，所以就以 win 系统演示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-640ec8644a5ffa7d95c657c0baf951ff562.png" alt="img"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载完成后，双击下载的 “deveco-studio-xxxx.exe”，进入 DevEco Studio 安装向导。因为 DevEco Studio 提供开箱即用的开发体验，将 HarmonyOS SDK、Node.js、Hvigor、OHPM、模拟器平台等进行合一打包，几乎无需额外下载配置就能马上跑项目，但是要运行模拟器需要一点配置，比如 Windows 版本要大于 18363。</p><p><img src="https://oscimg.oschina.net/oscnet/up-562424fbf414726c7ed0fb2a540cf7ef85b.png" alt="img"></p><h3 id="模拟器设置"><a href="#模拟器设置" class="headerlink" title="模拟器设置"></a>模拟器设置</h3><p>DevEco Studio 提供预览、模拟器、真机三种方式查看项目的运行效果，但是给予的测试权限不一。最高的真机，目前需要搭载了鸿蒙 Next 的手机才行，且鸿蒙无法自己升级到 Next，所以折中的方法就是用模拟器。官方现在要求使用模拟器需申请，而且本地电脑开始了虚拟化技术 Hyper-V。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1e899ba3be3ad6b4e0aa2b1b5454f49696b.png" alt="img"></p><p><img src="https://oscimg.oschina.net/oscnet/up-a8d2f9776ad0205b548d910964b430e3215.png" alt="img"></p><p><img src="https://oscimg.oschina.net/oscnet/up-93bf120dfbcefb6e964a3630dfab1696832.png" alt="img"></p><h1 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h1><p>DevEco Studio 安装完成后，可以通过运行 Hello World 工程来验证环境设置是否正确。接下来以创建一个支持 Phone 设备的工程为例进行介绍。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f3e75d7bb2920abb7e2ef703ba24b951f5d.png" alt="img"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>可能当时为了适应主流开发语言，加上自己新出的 ArkTS 有三种工程类型可供选择，而我就是为 ArkTS 而来，所以以下和后面要做的应用也都是 ArkTS。</p><ul><li>ArkTS 工程目录结构（Stage 模型）</li><li>C++ 工程目录结构（Stage 模型）</li><li>JS 工程目录结构（FA 模型）</li></ul><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20240906100814.92231853292351654852445551253861:50001231000000:2800:904E393FABF42FAA3D562164AA985180F3E28D1F702F091DFE6E6344C4D242F2.png?needInitFileName=true?needInitFileName=true" alt="img"></p><p>项目创建后，结构就是上图，而关于每个目录或文件的用法，就要去官方文档查看 “工程目录结构”，这里就略过进入到简单例子的演示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-86d4841b26214e15c602ff662049433595c.png" alt="img"></p><h3 id="第一个-Hello-World"><a href="#第一个-Hello-World" class="headerlink" title="第一个 Hello World"></a>第一个 Hello World</h3><h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>在 “Project” 窗口，点击 “entry &gt; src &gt; main &gt; ets &gt; pages”，打开 “Index.ets” 文件，进行页面的编写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// Index.ets</span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string = &#x27;Hello World&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        Text(this.message)</span><br><span class="line">          .fontSize(50)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h4><p>在编辑窗口右上角的侧边工具栏，点击 Previewer，打开预览器。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1f37d0632491b467105d631a6253cb5101f.png" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>如果你有应用端相关的开发经验，上手鸿蒙应用还是比较容易的。而如果你像我一样是做后端的，或很少接触前端，那也可以跟着我一起代码实战，简单实现一个鸿蒙 Next 的电子木鱼和电子烟花秀，文章待更新～</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为独立开发者，如果我们错过了传统移动 App，和后起小程序的红利，那万物互联 + AI 的应用开发就得抓住了。&lt;/p&gt;
&lt;p&gt;虽然个人上架</summary>
      
    
    
    
    <category term="前端开发" scheme="https://www.zerofc.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙Next" scheme="https://www.zerofc.cn/tags/%E9%B8%BF%E8%92%99Next/"/>
    
  </entry>
  
  <entry>
    <title>零成本搭建个人 APP 和小程序后台</title>
    <link href="https://www.zerofc.cn/2024/08/22/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%20APP%20%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0/"/>
    <id>https://www.zerofc.cn/2024/08/22/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%20APP%20%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0/</id>
    <published>2024-08-22T08:13:50.000Z</published>
    <updated>2024-08-22T06:52:41.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面也说了，通过 GitHub Pages+GitHub Actions 只是解决了动态数据展示，但是要零成本得完成将用户信息存储下来，并实现数据交互呢？</p><p>我开始是想用云文档，种种原因，我还是希望有个自己能二次修改的后台，于是就选择了 Vercel+Railway 方式。</p><p>虽然网上也有很多人介绍这俩平台的玩法，但都是 2024 年以前的文章，有些平台最新的修改，和自己踩到的坑而别人没提到的细节，我还是想记录一下。</p><p><img src="https://image-static.segmentfault.com/112/329/1123298108-66c6afc00f6c9_fix732" alt="图片"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ol><li>域名已经解析成功了，但是一直无法访问 Vercel 上的页面。</li><li>vercel-php 版本和 Vercel 上的 NodeJs 版本冲突，和一些配置问题。</li><li>代码提交推送后，Vercel 没有完成自动部署等等。</li></ol><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Vercel：  略过详细介绍，暂且把他理解成云服务器，入门配置免费，需要注册登陆。 </li><li>Railway： 同样略过详细介绍，暂且把他理解成云数据库，几乎免费，需要注册登陆。 </li><li>GitHub：  先创建存放程序的仓库，也几乎完全免费，需要注册登陆。</li><li>Typecho： 博客程序 ，其他语言的像 Flask 也行，开源免费，下载或自行编写。</li></ul><h2 id="Vercel-配置"><a href="#Vercel-配置" class="headerlink" title="Vercel 配置"></a>Vercel 配置</h2><p>进入 vercel 官网，推荐使用 GitHub 账号登陆，配置主要完成仓库的代码导入，域名解析绑定，项目部署和相关参数设置。</p><h4 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h4><p>登陆后点击 “Import Git Repository”，然后选择仓库安装并设置权限，接着是 Configure Project，Congratulations 都可以直接下一步进入到 Production Deployment，可参考下图。</p><p><img src="https://image-static.segmentfault.com/194/830/1948305833-f663bd9b95027499_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/357/937/3579370051-7d45672da6aa94da_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/157/854/1578542957-e08ae56701f30be5_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/407/877/4078779053-76e16095000b8a99_fix732" alt="图片"></p><h4 id="域名解析绑定"><a href="#域名解析绑定" class="headerlink" title="域名解析绑定"></a>域名解析绑定</h4><p>进入到 “Production Deployment” 时，我们可以看到项目已经创建成功。不但可以看到 source 源仓库分支和提交信息，还能看到 Domains 分配的域名，但是该域名被墙无法访问。</p><p><img src="https://image-static.segmentfault.com/271/284/2712842239-538527472e9ddca8_fix732" alt="图片"></p><p>点击上面的 “Domains” 按钮（在 Visit 左边），输入即将要解析过来的域名，系统会展示需要用 CNAM 类型被解析的域名，复制该 value 去到自己的域名服务商控制台，添加一条 CNAME 解析记录。</p><p><img src="https://image-static.segmentfault.com/220/638/2206387084-da8c96d53f4d11dc_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/419/830/4198302430-ef6e02fa24ce75ac_fix732" alt="图片"></p><p>如果说服务商那边解析成功了，并且 Vercel 平台也显示域名验证成功，也就是前面提到的坑点一。这种一般是 DNS 缓存原因，可以换一台电脑或用手机访问测试，如果能就等待一下，直到能 ping 通。</p><p>还有 Vercel 会自动办法 SSL 证书，所以后面只需要留意日期就可以，下图我暂时放了一个 index.html 页面，动态程序演示要放到 Railway 后。</p><p><img src="https://image-static.segmentfault.com/820/082/820082961-58e7e3a59a0edad5_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/116/786/1167866018-c97fd426a83c6390_fix732" alt="图片"></p><h2 id="Railway-配置"><a href="#Railway-配置" class="headerlink" title="Railway 配置"></a>Railway 配置</h2><p>进入 Railway 官网，同样推荐 GitHub 账号登陆，进来后选择 “MySQL” 类型，直接按默认后进入到 production，最主要的是我们需要分配给他的 Host，账号和密码，数据库名等等。</p><p>需要注意的是 Railway 每个月只有 5 刀的限额，需要提前备份数据库。超过限额后没有备份的数据就没了，需要删掉账户重新注册才可以。</p><p><img src="https://image-static.segmentfault.com/382/257/3822573661-9e6397f87912f69e_fix732" alt="图片"></p><p>打开 Data，选择 “Connect” -&gt; “Public Network”，Connection URL 就是该产品对外的连接 Host，用户密码，端口等信息。只需要复制下来，用于在程序中连接配置，Navicat for MySQL 图形化工具连接失败，我试过了。</p><p><img src="https://image-static.segmentfault.com/133/030/1330302240-b0d33cbdce6b46af_fix732" alt="图片"></p><h2 id="后端程序部署"><a href="#后端程序部署" class="headerlink" title="后端程序部署"></a>后端程序部署</h2><p>以下简单介绍 php 和 python 两种语言的 hello world，和有数据库连接的博客程序，第一步是后端入口文件都不能放在项目的根目录下，放在新建文件夹的 api 中，并添加 vercel.json（用于配置路由和分配内存等信息）。</p><p><img src="https://image-static.segmentfault.com/369/904/3699043011-ceced661fb52cea9_fix732" alt="图片"></p><h4 id="Python-的-Hello-World"><a href="#Python-的-Hello-World" class="headerlink" title="Python 的 Hello World"></a>Python 的 Hello World</h4><p>新建 vercel.json 文件，和用于打印的 py 文件，最后访问自定义的域名。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;rewrites&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>, <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;/api/index&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PHP-的-Hello-World"><a href="#PHP-的-Hello-World" class="headerlink" title="PHP 的 Hello World"></a>PHP 的 Hello World</h4><p>需要注意的是部署 php 项目要用到 vercel-php，而 vercel-php 又与 NodeJs 版本有一定对应关系。目前 2024 年 8 月 vercel 平台默认 Node 版本是 20.x，我下面演示的是 <a href="mailto:&#x76;&#x65;&#114;&#99;&#101;&#108;&#x2d;&#x70;&#104;&#x70;&#64;&#48;&#x2e;&#x36;&#x2e;&#x30;">&#x76;&#x65;&#114;&#99;&#101;&#108;&#x2d;&#x70;&#104;&#x70;&#64;&#48;&#x2e;&#x36;&#x2e;&#x30;</a>，所以再部署前需要先将 Node 版本切换为 18.x，如下图。（以下有两种情况的报错都要 node 和 vercel-php 版本相关）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">部署后报错合集</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> PHP Built-<span class="keyword">In</span> <span class="keyword">Server</span> HTTP error: Error: <span class="keyword">connect</span> ECONNREFUSED <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> The <span class="keyword">following</span> Serverless <span class="keyword">Functions</span> contain an invalid &quot;runtime&quot;: - api/<span class="keyword">index</span> (nodejs18.x)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/291/536/2915361539-aa0a869601076103_fix732" alt="图片"></p><h4 id="Typecho-安装"><a href="#Typecho-安装" class="headerlink" title="Typecho 安装"></a>Typecho 安装</h4><p>从官网下载源码后，找到 config.inc.php 文件，将数据库的参数修改为 Railway 复制过来的配置。</p><p><img src="https://image-static.segmentfault.com/382/510/3825100263-91c17da3cc3ae9d3_fix732" alt="图片"></p><p>然后通过 Git 提交代码到仓库，如果发现没有部署成功，可以进入 vercel 平台的 Deployments 查看部署记录，有报错的根据信息修改。</p><p><img src="https://image-static.segmentfault.com/364/430/3644305189-7a209e7616e296e3_fix732" alt="图片"></p><p>提交并成功部署后，输入自定义域名，并带上 install.php 进行安装，然后用 pdo 方式安装数据库，上面的 railway 参数就再输入一遍。</p><p><img src="https://image-static.segmentfault.com/577/234/577234854-fd52bff4addf224c_fix732" alt="图片"></p><p>安装成功后，可以到 Railway 查看到新增的表格，这就表示全部都能正常使用了。</p><p><img src="https://image-static.segmentfault.com/186/192/1861922813-66197cbc0f83bc55_fix732" alt="图片"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>当然 Vercel 也不只是可以用来部署动静态网站或 API，也能搭一些国外工具的镜像，像 npm 之类的。</p><p>还有一种是，比如国外有一些很好用还免费的 API，你想用在小程序进行调用，但是在小程序后台填写这些 API 访问域名时无法添加，没有国内的备案信息。</p><p>这时候就可以用自己备案过的域名再 Vercel 中搭建一个中转，小程序请求自己的域名，而部署的程序请求别人的地址，更多玩法待后续更新了……</p><p><img src="https://image-static.segmentfault.com/236/602/236602261-66ac8276ea541_fix732" alt="Snipaste_2024-07-31_14-08-07"></p>]]></content>
    
    
    <summary type="html">通过Vercel和Railway，零成本搭建个人的APP和小程序后台程序</summary>
    
    
    
    <category term="运维相关" scheme="https://www.zerofc.cn/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Vercel" scheme="https://www.zerofc.cn/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>零成本 API 服务搭建，用 GitHub Actions 自动爬取文章</title>
    <link href="https://www.zerofc.cn/2024/08/16/%E9%9B%B6%E6%88%90%E6%9C%AC%20API%20%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%EF%BC%8C%E7%94%A8%20GitHub%20Actions%20%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96%E6%96%87%E7%AB%A0/"/>
    <id>https://www.zerofc.cn/2024/08/16/%E9%9B%B6%E6%88%90%E6%9C%AC%20API%20%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%EF%BC%8C%E7%94%A8%20GitHub%20Actions%20%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96%E6%96%87%E7%AB%A0/</id>
    <published>2024-08-16T08:13:50.000Z</published>
    <updated>2024-08-17T05:15:12.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本着将成本降到最低，我目前做的应用或小程序都是单机的，也就是不用请求接口，只要一上架就没有任何支出。但是<strong>写死的数据毕竟有限，应用的内容单一无法紧跟时事热点，每次打开一个样，自然就没有留存</strong>。遇到有错字啥还要更新版本，那有没有方法既能丰富应用内容，又不用增加成本呢？</p><p>既要又要，当然也有，找网上提供的免费 API 接上去。但是这种有请求数限制，而且还和自己应用的业务不相关，那就只能自己弄接口了。</p><p>既然可以在 GitHub 上搭静态博客，那整一个静态 API (json 文件)，时不时地更新或提交新的 json 文件上去，在 C 端应用上不也看起来像是动态的了。所以下面就实践一下如何在 GitHub 上搭建 API 服务，以及<strong>如何自动化更新数据（部署爬虫）？</strong></p><p><img src="https://image-static.segmentfault.com/482/078/482078067-591238b9bf37dca1_fix732" alt="图片"></p><h2 id="API-服务搭建"><a href="#API-服务搭建" class="headerlink" title="API 服务搭建"></a>API 服务搭建</h2><p>方法和之前在 GitHub 上搭建 Hexo 类似，就是给仓库开启 GitHub Pages，可以自行绑定域名，也可以用之前主仓设置的域名后面带当前仓库名访问。当前域名要备案过了，然后用访问资源的方式能访问到 json 文件 (xml、csv 等) 就可以了。<br><img src="https://image-static.segmentfault.com/358/371/3583717244-3b39cca3d762137d_fix732" alt="图片"></p><h2 id="定时爬虫部署"><a href="#定时爬虫部署" class="headerlink" title="定时爬虫部署"></a>定时爬虫部署</h2><p>要实现自动化更新数据，那就要定时手动上传和直接爬虫爬取，可以通过 GitHub Actions 工作流的方式实现，下面第一次使用的方式演示如何创建并运行 workflow。</p><h3 id="创建推送-TOKEN"><a href="#创建推送-TOKEN" class="headerlink" title="创建推送 TOKEN"></a>创建推送 TOKEN</h3><p>因为生成了 json 文件需要自动推送到仓库，为了不用输入账号密码并使用 PAT，这个和之前 Hexo 搭建时获取的一样。settings-&gt;developer settings-&gt;github apps-&gt;personal access tokens-&gt;tokens (classic)，然后选择 “Generate new token (classic)”。</p><h3 id="TOKEN-权限设置"><a href="#TOKEN-权限设置" class="headerlink" title="TOKEN 权限设置"></a>TOKEN 权限设置</h3><p>设置名称，有效时间，勾选权限，主要的把 repo、workflow、user、write:discussion 以及 admin 开头的全勾上，如果不想选都选上也可以。最后创建后就会显示 token 值，记得把那个 ghp 开头的字符串复制下来，不然后面就看不到了。这里再说一下 PAT 下的 Fine-grained tokens 和 Tokens (classic) 的区别，上面比 Tokens (classic) 权限控制更精细，安全性更高，而且无法设置不能失效的 Token。<br><img src="https://image-static.segmentfault.com/221/964/2219644713-4289f5ec535a94cd_fix732" alt="图片"></p><h3 id="测试-TOKEN"><a href="#测试-TOKEN" class="headerlink" title="测试 TOKEN"></a>测试 TOKEN</h3><p>是否可用用 git 命令运行，换成自己的 token 和仓库报错了则说明该 TOKEN 无效</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push https:<span class="regexp">//</span>x-access-token:换成你的TOKEN@github.com<span class="regexp">/z11r00/</span>你的仓库.git HEAD</span><br></pre></td></tr></table></figure><h3 id="创建工作流"><a href="#创建工作流" class="headerlink" title="创建工作流"></a>创建工作流</h3><p>打开仓库后，点击 Actions，然后点击 New workflow，set up a workflow yourself 后提交。git 拉取后会在项目中生成一个.github 文件夹，依次点进去是刚才创建的工作流 yml 文件。<br><img src="https://image-static.segmentfault.com/383/733/3837336944-12e422efa1eb2b35_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/183/528/1835286103-701e10b4d848d679_fix732" alt="图片"></p><h3 id="Yml-配置说明"><a href="#Yml-配置说明" class="headerlink" title="Yml 配置说明"></a>Yml 配置说明</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span>：工作流名称，展示在用于表示工作流。</span><br><span class="line"><span class="literal">on</span>：触发事件，schedule 定时 | <span class="keyword">push</span> 推送 | pull_request pr 请求，定时任务下有一个 cron 的五个 * 分别是分 时 日 月 星期（, 分割字段多值 - 定义范围 / 指定间隔频率）。</span><br><span class="line">workflow_dispatch： 是否允许在 github actions 操作选项卡中手动操作，默认是可以。</span><br><span class="line">jobs：任务执行的定义。</span><br><span class="line">runs-<span class="literal">on</span>： 用于任务执行的运行器，可以说是操作系统，其他的还有 windows 等，具体参考文档，下面会贴出。</span><br><span class="line">steps： 步骤，工作流依次执行的步骤，每个都有一个名字和具体的运行指令，可以使用 actions 包 (github 提供的集成程序，比如用于检出仓库代码的，python 环境的等等)。</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/101/238/1012385766-e75fd97b886b950b_fix732" alt="图片"></p><h3 id="爬虫工作流"><a href="#爬虫工作流" class="headerlink" title="爬虫工作流"></a>爬虫工作流</h3><p>以下定义一个每天八点十分（不一定准时），先是用 TOKEN 检出仓库中的所有代码，然后设置 python 环境后安装指定依赖，运行 script 目录下的 ArticleSpider.py 脚本，最后将脚本里生成的 json 文件提交并推送到仓库。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作流名称</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">article_spider</span></span><br><span class="line"><span class="comment"># 事件：schedule 定时 | push 推送 | pull_request pr请求</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># 分 时 日 月 星期 (*每次都 ,分割字段多值 -定义范围 /指定间隔频率)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;10 0 * * *&#x27;</span> <span class="comment"># 每日8:10，时间点执行任务，注意时区(UTC, 0+8)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 是否可在github操作选项卡手动运行</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># 任务运行器（切换可参考文档）</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 使用到的actions包(用于克隆当前仓库的所有代码)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUSH_TOKEN</span> <span class="string">&#125;&#125;</span>  <span class="comment"># 自定义的个人推送TOKEN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">          pip install requests</span></span><br><span class="line"><span class="string">          pip install lxml</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">execute</span> <span class="string">py</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">FM_USERNAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python script/ArticleSpider.py</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">列出所有文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          ls -l</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --local user.email &quot;2652364582@qq.com&quot;</span></span><br><span class="line"><span class="string">          git config --local user.name &quot;bqs&quot;</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Add changes&quot; || echo &quot;No changes to commit&quot;</span></span><br><span class="line"><span class="string">          git push origin main</span></span><br></pre></td></tr></table></figure><h3 id="ArticleSpider-py"><a href="#ArticleSpider-py" class="headerlink" title="ArticleSpider.py"></a>ArticleSpider.py</h3><p>脚本因为对方站点是一个前后端分离的项目，页面的列表和详情都是用异步请求的方式。所以这种抓取就比较好办，写一个 while 循环，页码不断累加的请求接口，判断有超过某时间点的文章则跳出循环。在循环中将数据保存到指定的目录下的 json 文件中，当然也可以自己调整数据，如果要分页就按固定条数分文件。<br><img src="https://image-static.segmentfault.com/106/933/1069333098-c1ec78234f429dfa_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/336/648/3366485286-f2994b4068981ace_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/369/226/3692265409-3e901a36d109a6ca_fix732" alt="图片"></p><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>虽然是定时的，但也可以去 GitHub 控制台手动运行。打开 Actions，选择工作流名字进去，最后 Run workflow 就等待执行了。详细也可以看到脚本里打印出的日志，执行完毕再回到仓库查看是否有 json 文件生成。<br><img src="https://image-static.segmentfault.com/103/646/1036463815-5c07338533579be8_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/408/784/4087841949-c0779a32953a2527_fix732" alt="图片"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以上只是演示，如果真要弄自己的 API 还是得对爬取的数据做一下处理，拓展一下是不是还可以用这种方式，实现一个带后台管理的资源 “动态网站”。但是应用也不光只有展示，还有提交部分，所以要想零成本实现将用户数据存储下来就要用到另一些方法了，最后 GitHub Actions 用法也远不止于此……</p><h2 id="安利"><a href="#安利" class="headerlink" title="安利"></a>安利</h2><p>QQ小程序：**<a href="https://m.q.qq.com/a/s/b97b48f72dacd484942124801d7442c5?via=2016_1">实用工具箱</a>**</p><p><img src="https://image-static.segmentfault.com/236/602/236602261-66ac8276ea541_fix732" alt="img"></p>]]></content>
    
    
    <summary type="html">如何用GitHub Actions部署自动化文章资讯爬虫</summary>
    
    
    
    <category term="运维相关" scheme="https://www.zerofc.cn/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="GitHub Actions" scheme="https://www.zerofc.cn/tags/GitHub-Actions/"/>
    
  </entry>
  
  <entry>
    <title>如何用CocosCreator对接抖音小游戏的侧边栏复访</title>
    <link href="https://www.zerofc.cn/2024/08/04/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/"/>
    <id>https://www.zerofc.cn/2024/08/04/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/</id>
    <published>2024-08-04T08:13:50.000Z</published>
    <updated>2024-08-05T12:11:49.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近小游戏的软著下来了，用 CocosCreator 做的游戏也完成了 1.0 版本。而当我打包成抖音小游戏进行提交时，还没到初审就给拒了，<strong>因为还有一个机审，机器检测到代码中没有接入 “侧边栏复访功能”</strong>。这个我还真不知道，那只能去官方看文档了，位置是<strong>小游戏开发文档 -&gt; 指南 -&gt; 开放能力 -&gt; 侧边栏能力</strong>。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/Snipaste_2024-08-05_20-01-47.jpg" alt="Snipaste_2024-08-05_20-01-47"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>侧边栏复访能力是在<strong>「2023 年 11 月 24 日」</strong>起就开启了「<strong>必接审核」，</strong>为什么要这样做呢？原来是随着抖音首页侧边栏的日活不断增高，平台也积极引导用户养成从首页侧边栏进入游戏的习惯而做的要求。这样<strong>可以大幅提升次留、7 留</strong>，反正就是你好我好大家好的局面，接就对了。</p><p>文档我也大概看了，大概的流程就是打开游戏后，<strong>判断是不是侧边栏进来，是的话就相当老用户给他一些奖励，不是的话给一些引导弹窗，让用户触发打开侧边栏</strong>。而文档里的方案示例大部分也都有奖励领取环节，但是我这个目前是单机，奖励肯定是没有的，那怎么办，于是我就做了一些简化。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/flow_path.jpg" alt="flow_path"></p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>创建去侧边栏按钮和引导层</li><li>对接抖音提供的方法检测和跳转</li><li>打包后去抖音开发工具调测</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h3 id="创建去侧边栏按钮"><a href="#创建去侧边栏按钮" class="headerlink" title="创建去侧边栏按钮"></a>创建去侧边栏按钮</h3><p>打开游戏场景画布，找到主界面面板，分别添加 “去侧边栏按钮节点” ，添加图文素材。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/Snipaste_2024-08-05_20-05-36.jpg" alt="Snipaste_2024-08-05_20-05-36"></p><h3 id="创建引导层节点"><a href="#创建引导层节点" class="headerlink" title="创建引导层节点"></a>创建引导层节点</h3><p>继续在主界面下添加引导层空白节点，就是展示一个遮罩，一个引导图片和跳转侧边栏和关闭按钮。遮罩层的添加方式是给节点新增 sprint 组件，组件的 sprite Frame 选择 ”internal”-&gt;”image”-&gt;”default_btn_disabled”，其他的按钮就是自己的 UI 图标了。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/image-20240805200657891.png" alt="image-20240805200657891"></p><h3 id="在主界面脚本中挂载节点"><a href="#在主界面脚本中挂载节点" class="headerlink" title="在主界面脚本中挂载节点"></a>在主界面脚本中挂载节点</h3><p>就是将去侧边栏和引导图层，跳转复访等绑定触发事件。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/image-20240805200735109.png" alt="image-20240805200735109"></p><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gameManager <span class="keyword">from</span> <span class="string">&quot;./gameManager&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">startPanel</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抖音侧边栏复访</span></span><br><span class="line">    <span class="keyword">private</span> isFromSidebar = <span class="literal">false</span> <span class="comment">//状态，表示是否从侧边栏进入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">btnSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 入口有礼按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">ndSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 侧边栏引导对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">btnGotoSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">//去侧边栏按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">btnCloseSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 关闭侧边栏引导对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">game</span>:gameManager = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>(<span class="params">game:gameManager</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span> = game</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>.<span class="title function_">startAudio</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹出侧边栏引导框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">showDialogBox</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 显示引导层，隐藏开始按钮</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ndSidebar</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startBtn</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭侧边栏对话框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">closeSidebar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ndSidebar</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startBtn</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动跳转侧边栏</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">gotoSidebar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ndSidebar</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startBtn</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 抖音小游戏侧边栏跳转逻辑</span></span><br><span class="line">        tt.<span class="title function_">navigateToScene</span>(&#123;</span><br><span class="line">            <span class="attr">scene</span>: <span class="string">&quot;sidebar&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;navigate to scene success&quot;</span>);</span><br><span class="line">                <span class="comment">// 跳转成功回调逻辑</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;navigate to scene fail: &quot;</span>, res);</span><br><span class="line">                <span class="comment">// 跳转失败回调逻辑</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// --侧边栏按钮判断--//</span></span><br><span class="line">        tt.<span class="title function_">onShow</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//判断用户是否是从侧边栏进来的</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isFromSidebar</span> = (res.<span class="property">launch_from</span> == <span class="string">&#x27;homepage&#x27;</span> &amp;&amp; res.<span class="property">location</span> == <span class="string">&#x27;sidebar_card&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isFromSidebar</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是从侧边栏进来的，隐藏“去侧边栏”</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">btnSidebar</span>.<span class="property">active</span> = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则 显示“去侧边栏”按钮</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">btnSidebar</span>.<span class="property">active</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户是否支持侧边栏进入功能，有些旧版的抖音没有侧边栏，这种情况就把入口有礼那个按钮给隐藏掉</span></span><br><span class="line"><span class="comment">// 因为我引导层默认就是隐藏，所以这部分可以不用判断</span></span><br><span class="line">        <span class="comment">/*tt.checkScene(&#123;</span></span><br><span class="line"><span class="comment">            scene: &quot;sidebar&quot;,</span></span><br><span class="line"><span class="comment">            success: (res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">                this.btnSidebar.node.active = true</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            fail: (res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">                this.btnSidebar.node.active = false</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        <span class="comment">// --侧边栏按钮判断--//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示侧边栏引导框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btnSidebar</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="variable language_">this</span>.<span class="property">showDialogBox</span>, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭侧边栏引导对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btnCloseSidebar</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="variable language_">this</span>.<span class="property">closeSidebar</span>, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击进入抖音侧边栏</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btnGotoSidebar</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="variable language_">this</span>.<span class="property">gotoSidebar</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>这样操作下来，你会发现接入这个侧边栏功能并不复杂，其实就相当于做了一个弹窗效果。麻烦的是在 CocosCreator 中添加抖音里内部方法不能马上调试，而是要打完包再放到抖音开发者工具中测试，遇到报错又改打包测试再改。还有一个是官方的文档的举例是用了一个最复杂的方式，其实对于我们单机的小游戏就只是引导一下，没有复访奖励什么的！</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/image-20240805201033707.png" alt="image-20240805201033707"></p>]]></content>
    
    
    <summary type="html">如何在CocosCreator中对接抖音小游戏的侧边栏复访功能</summary>
    
    
    
    <category term="游戏开发" scheme="https://www.zerofc.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="https://www.zerofc.cn/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>零成本加速 “个人图床服务”</title>
    <link href="https://www.zerofc.cn/2024/08/01/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/"/>
    <id>https://www.zerofc.cn/2024/08/01/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/</id>
    <published>2024-08-01T08:13:50.000Z</published>
    <updated>2024-08-03T07:53:56.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上次简单分享了一下通过 Github Pages 方式搭建图床，但是国内对 <strong>github 资源的加载普遍不太稳定</strong>，多数情况下很慢甚至打不开。而这次我要推荐两个解决方法，<strong>一种是助力方案，使用 CDN 加速</strong>；另一种是<strong>代替方案，换成真正的图床或其他托管服务</strong>（先卖个关子）。</p><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/cover.jpg" alt="img"></p><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><p>方案一提供助力，<strong>github 上的仓库和资源保持不变</strong>，只需要对其进行 CDN 加速就可以了。那么，好用的 jsDelivr 就上场了，这是一个<strong>免费、开源的加速 CDN 公共服务</strong>，托管了许多大大小小的项目，可加速访问托管的项目目录或图片资源。</p><p>并且他<strong>同时对 github、npm、wordpress 提供支持</strong>，无需安装或搭建什么就能使用，下面就简单介绍一下使用方法。前提是比如你已经创建了 github 仓库，这次<strong>无需开启 github pages，只要是一个 public 的仓库就可以</strong>。</p><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/00.jpg" alt="img"></p><h2 id="访问-github"><a href="#访问-github" class="headerlink" title="访问 github"></a>访问 github</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名称/仓库名称@版本号/目录</span><br></pre></td></tr></table></figure><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/11.jpg" alt="img"></p><h2 id="访问-npm"><a href="#访问-npm" class="headerlink" title="访问 npm"></a>访问 npm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/npm/包名@版本号/目录</span><br></pre></td></tr></table></figure><h2 id="访问-wordpress"><a href="#访问-wordpress" class="headerlink" title="访问 wordpress"></a>访问 wordpress</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 加载任何插件从WordPress.org插件SVN repo</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/plugins/project/tags/version/file</span><br><span class="line"></span><br><span class="line">// 加载精确版本</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/plugins/wp-slimstat/tags/4.6.5/wp-slimstat.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 加载最新版本</span><br><span class="line"></span><br><span class="line">// 你不应该在生产中使用这个</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/plugins/wp-slimstat/trunk/wp-slimstat.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 从WordPress.org的主题SVN repo加载任何主题</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/themes/project/version/file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 加载精确版本</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/themes/twenty-eightteen/1.7/assets/js/html5.js</span><br></pre></td></tr></table></figure><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p>方案二是替代方法，就是找<strong>其他免费的做图床服务的网站或平台</strong>。但是以我自己体验过的几个做图床的平台，个人感觉还是很不好。比如他们可能是出于监管或业务原因，对图片内容做了识别，<strong>稍微有点敏感的或者是有二维码的都无法上传</strong>，而且有的对<strong>单位时间内上传个数做了限制</strong>等等。</p><p>毕竟是人家免费提供的图床服务，每天的流量消耗也很大，都要生存，所以限制之类的也很正常。那用付费的图床服务不就行了吗，这当然也是很不错的，但是我这里写的是<strong>零成本</strong>，所以就把目光转移到了<strong>其他提供托管服务的平台</strong>。</p><p>没错就用国内的 Gitee，图片和视频放上去绝对比在 Github 上访问要稳定，而且使用方法也是一样。创建一个 public 仓库，<strong>通过 git 工具提交后，参考我下面的访问链接就能使用了</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/gaoxingqufuhchao/bqs-toolsbox-uniapp/raw/master/static/images/componentBg.png</span><br></pre></td></tr></table></figure><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/22.jpg" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>关于零成本可能要做成一个系列了，因为<strong>作为独立开发者，在自己的产品还没有经过市场检验，降低成本绝对是首选</strong>。尽管开发方面不用支出，但是面向 C 端至少要有个云服务器和数据库吧，需要数据炼丹总得要部署个爬虫吧，现在都进入 AI 时代了，给产品加上 AI 功能也得要吧。</p><p>这些其实都可以通过 Github 和零零散散的小众平台来实现零成本，<strong>比如用某云文档做数据库，Github 来定时跑爬虫，某平台的 GPTs 也提供了带有限制的 API 服务</strong>。别看人家平台的 api 每天就 1000 次的调用限制，要知道很多情况下，自己刚做的小程序和什么应用每天有几百的访问就很不错了，所以能用一些免费 api 来给自己应用增加有用性就先用着，量起来了可以选择付费或自研。</p><p><strong>那么，后面我再慢慢分享怎么零成本玩上面我提到的几个东西吧。</strong></p><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/33.jpg" alt="img"></p>]]></content>
    
    
    <summary type="html">零成本加速 “个人图床服务”</summary>
    
    
    
    <category term="运维相关" scheme="https://www.zerofc.cn/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="图床服务器" scheme="https://www.zerofc.cn/tags/%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>个人最新微信小程序——有用工具盒，上架了！</title>
    <link href="https://www.zerofc.cn/2024/07/11/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/"/>
    <id>https://www.zerofc.cn/2024/07/11/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/</id>
    <published>2024-07-11T06:13:50.000Z</published>
    <updated>2024-07-11T07:59:29.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>“有用工具盒”是一款强大且实用的工具类小程序，提供包括图片处理、信息查询、测算，娱乐等常用工具。如：文本加密解密、二维码生成与识别、九宫格切图、图片拼接、国旗头像生成、房贷和BMI计算器等，如同瑞士军刀一样方便好用。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/mmexport1720348679200.jpg" alt="mmexport1720348679200"></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h4 id="国旗头像"><a href="#国旗头像" class="headerlink" title="国旗头像"></a>国旗头像</h4><p>只需要上传一张图片，就会免费生成一张带国旗的头像</p><h4 id="九宫格切图"><a href="#九宫格切图" class="headerlink" title="九宫格切图"></a>九宫格切图</h4><p>只需上传一张图片，工具会自动将他分成九宫格的切图，保存后就可以发朋友圈了。</p><h4 id="房贷计算器"><a href="#房贷计算器" class="headerlink" title="房贷计算器"></a>房贷计算器</h4><p>目前贷款利率还没调整，其他的基本功能都没有问题。</p><h4 id="色盲测试"><a href="#色盲测试" class="headerlink" title="色盲测试"></a>色盲测试</h4><p>通过不停的切换颜色矩阵，你可以点击其中不同的色块，类似于颜色找茬，来测试你的色盲程度。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/image-20240711154242511.png" alt="image-20240711154242511"></p><h4 id="手持弹幕"><a href="#手持弹幕" class="headerlink" title="手持弹幕"></a>手持弹幕</h4><p>手持弹幕，是一个可以自定义文字样式的滚动大字报，可以用于像粉丝给爱豆接机用的欢迎词。</p><h4 id="节日倒计时"><a href="#节日倒计时" class="headerlink" title="节日倒计时"></a>节日倒计时</h4><p>节日倒计时，是一个在本地存储日期进行倒计时的工具，样式温馨多样。由于没有远程存储，如果对微信进行了清理缓存，节日倒计时也会消失需要重新创建。</p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><p>随机数，是一个可以用于朋友间抽签的小工具，给定两个区间，工具自动产生一个数值。</p><h4 id="大转盘"><a href="#大转盘" class="headerlink" title="大转盘"></a>大转盘</h4><p>大转盘是一个随机定义的事件扇叶，抽中哪个就中哪个。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/image-20240711154305686.png" alt="image-20240711154305686"></p><h4 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h4><p>二维码生成工具，你只需要提供链接或文本，工具会将其生成一个可识别的二维码。</p><h4 id="二维码识别"><a href="#二维码识别" class="headerlink" title="二维码识别"></a>二维码识别</h4><p>二维码识别，一个通用型二维码识别器，不管是这里生成的还是其他地方的都可以识别。</p><h4 id="全息时钟"><a href="#全息时钟" class="headerlink" title="全息时钟"></a>全息时钟</h4><p>全息时钟，一个可以用来拍摄自习课视频的时钟展示，省掉了专门安装全息时钟的APP。</p><h4 id="常用号码"><a href="#常用号码" class="headerlink" title="常用号码"></a>常用号码</h4><p>常用号码罗列了日常生活中紧急需要的号码，点击后就可以拨打，比如报警，住院等等号码。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/image-20240711154336615.png" alt="image-20240711154336615"></p><h4 id="恶搞理发器"><a href="#恶搞理发器" class="headerlink" title="恶搞理发器"></a>恶搞理发器</h4><p>纯娱乐性的小工具，就好比周星驰的，你看这个是部手机，其实是个理发器。</p><h4 id="数钱"><a href="#数钱" class="headerlink" title="数钱"></a>数钱</h4><p>数钱也是一个娱乐性工具，看你自己的手速，滑动地越快数的钱越多。</p><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>目前这个小程序集成了31个小工具，其他诸如尺子、量角器、计算器、亲戚计算器、粤语翻译等等，更多的你可以自己体验了。后续还会迭代一些AI之类的小工具，如果有体验有问题的，也可以在下方公众号给我留言哈~</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/gzh_qrcode.jpg" alt="gzh_qrcode"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;“有用工具盒”是一款强大且实用的工具类小程序，提供包括图片处理、信息查询、测算，娱乐等常用工具。如：文本加密解密、二维码生成与识别、九宫格切</summary>
      
    
    
    
    <category term="前端开发" scheme="https://www.zerofc.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="小程序" scheme="https://www.zerofc.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>2024年，个人申请小游戏软著速通指南</title>
    <link href="https://www.zerofc.cn/2024/06/27/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/"/>
    <id>https://www.zerofc.cn/2024/06/27/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/</id>
    <published>2024-06-27T08:13:50.000Z</published>
    <updated>2024-06-27T08:42:35.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2024年6月26号，我申请的小游戏软著通过了。由于等待时间太长，所以就总结了一下整个申请过程踩过的坑。帮助未了解或即将申请个人软著的同学绕过下面三点，可以节省至少三分之一的时间（小游戏类目）。</p><p>当然，这里也会围绕大家关心的几个问题展开，比如：软著申请的费用、软著申请到底要多久以及整个申请的流程。最后再给大家两份我自己的申请模板，软件源程序文档和软件说明书文档。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/1.png" alt="img"></p><h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><p>2024年申请软著不用钱，如果说一分钱不用也说不过去，因为在申请时的签章页要打印签字，所以整个过程的花费就是一张纸的打印钱。要是你找的第三方代办收取高费用，并且说要打印这打印那的就自己弄吧。因为现在关于软著的登记都是采用电子版形式了。之前既要打印源码文档和软件说明书，还要寄过去，然后才能收到纸张版软著。</p><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><p>我从申请到通过一共是三个月时间，但是在过程中有三次补正，也就是提交的信息和资料不符和要求。而每次补正再审核大概在8-15天（个人观察），错三次也就要多一个月时间，按正常填写一遍过的话应该两个月以内就能获取。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="注册与开始申请"><a href="#注册与开始申请" class="headerlink" title="注册与开始申请"></a>注册与开始申请</h2><p>进入“国家版权保护中心官网”，选择个人身份，填写手机邮箱等信息后注册成功后登陆。然后回到官网首页导航栏选择 “版权登记” -&gt; “软件登记” -&gt; ”计算机软件著作权登记申请（R11）“, 然后进入到办理身份，是自己就选 ”我是申请人“。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/2.jpg" alt="img"></p><h2 id="软件申请信息"><a href="#软件申请信息" class="headerlink" title="软件申请信息"></a>软件申请信息</h2><p>这是第一步要填写的表单，其中权利取得方式、软件全称、版本号、权利范围为必填，权利取得方式按默认原始取得，权利范围按默认全部权利，其他的可以参考我下面截图。而 ”软件全称“ 一定要注意，因为我其中一项补正就是软件全称和后面的软件说明、源码文档里的页眉软件名称不一致。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/3.jpg" alt="img"></p><h2 id="软件开发信息"><a href="#软件开发信息" class="headerlink" title="软件开发信息"></a>软件开发信息</h2><p>软件开发信息都为必填，软件分类选择 ”应用软件“，软件说明 ”原创“，开发方式 ”单独开发“，开发完成日期自己选择，发表状态 ”未发表“。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/4.jpg" alt="img"></p><h2 id="软件功能与特点"><a href="#软件功能与特点" class="headerlink" title="软件功能与特点"></a>软件功能与特点</h2><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/5.jpg" alt="img"></p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/6.jpg" alt="img"></p><h2 id="鉴别材料"><a href="#鉴别材料" class="headerlink" title="鉴别材料"></a><strong>鉴别材料</strong></h2><p>鉴别材料有两份，分别是程序鉴别材料和文档鉴别材料，两个都选择一般交存。其中程序鉴别材料是代码清除空行注释整理后转PDF提交，前后各连续30页可以按开发时间排序，也可以按功能主次等自定义排序，每页不少于50行，若源程序整体不到60页，应提交全部源程序。</p><p>而文档鉴别材料是用来描述程序的内容、组成、设计、功能、开发情况、测试结果及使用方法的文字资料和图表，如程序设计说明书、流程图、用户手册等，同样文档要求是连续的前30页和后30页，每页不少于30行，如果整个文档不到60页，就提交整个说明文档，这个我会在下面列出我的那两个模板。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/7.jpg" alt="img"></p><h2 id="确认信息"><a href="#确认信息" class="headerlink" title="确认信息"></a>确认信息</h2><p>填完上面的信息后，提交身份证正反面，最后就会列出提交材料的清单确认信息。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/8.jpg" alt="img"></p><h2 id="签章页提交"><a href="#签章页提交" class="headerlink" title="签章页提交"></a>签章页提交</h2><p>签章页其实也是材料清单确认书，下载打印后签字拍照完再上传。软著的状态就会由 “待提交” 转 “待受理” 了，接着就等待审核发放了。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/9.jpg" alt="img"></p><h1 id="模板参考"><a href="#模板参考" class="headerlink" title="模板参考"></a>模板参考</h1><p>以下两份就是我的程序鉴别材料和文档鉴别材料模板，这里要注意一点的是，游戏类的文档说明一定要加上 “游戏健康忠告” 页面的介绍。（可以扫描下面公众号二维码找到文章或留言）</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/10.jpg" alt="img"></p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/11.jpg" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>软著下来后就准备上架到小游戏或快游戏平台了，可能是近年来的净网相关政策，有些平台对于小游戏或快游戏对个人身份的提交通道已经关闭了。不光如此，我最近做了一个工具类的小程序也卡在提交，因为我是要改名称和类目，现在还需要备案和认证，就不知道到时候我上架的时候，以前积累的UV会不会被清掉。</p><p><img src="https://www.zerofc.cn/img/qrcode/wx_gzh.png" alt="img"></p>]]></content>
    
    
    <summary type="html">介绍小游戏的软著申请流程，帮助别人节省更多时间获取证书</summary>
    
    
    
    <category term="游戏开发" scheme="https://www.zerofc.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="软著申请" scheme="https://www.zerofc.cn/tags/%E8%BD%AF%E8%91%97%E7%94%B3%E8%AF%B7/"/>
    
  </entry>
  
  <entry>
    <title>工具类uniapp源码免费开源啦！</title>
    <link href="https://www.zerofc.cn/2024/06/11/%E5%B7%A5%E5%85%B7%E7%B1%BBuniapp%E6%BA%90%E7%A0%81%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90/"/>
    <id>https://www.zerofc.cn/2024/06/11/%E5%B7%A5%E5%85%B7%E7%B1%BBuniapp%E6%BA%90%E7%A0%81%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90/</id>
    <published>2024-06-11T06:13:50.000Z</published>
    <updated>2024-08-02T12:20:14.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一个基于uniapp开发的强大且实用的工具类APP，提供了包括图片处理、测算，信息查询和娱乐等常用的工具。如：文本加密解密、二维码生成与识别、九宫格切图、图片拼接、国旗头像、房贷和BMI计算器等，如同瑞士军刀一样方便好用~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🕙 项目基本保持每日更新，右上随手点个 🌟 Star 关注，这样才有持续下去的动力，谢谢～</span><br></pre></td></tr></table></figure><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><p><strong>码云：</strong> <a href="https://gitee.com/gaoxingqufuhchao/bqs-toolsbox-uniapp">https://gitee.com/gaoxingqufuhchao/bqs-toolsbox-uniapp</a></p><p><strong>落地：</strong> <a href="https://www.zerofc.cn/market/">https://www.zerofc.cn/market/</a></p><p><strong>下载：</strong><a href="https://www.zerofc.cn/market/land_pages/bqs_toolsbox/index.html">https://www.zerofc.cn/market/land_pages/bqs_toolsbox/index.html</a></p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="https://picx.zhimg.com/v2-273398a5b3a8c1df7f52db94bb2b454e_r.jpg" alt="img"></p><p><img src="https://picx.zhimg.com/v2-0b21a9804cc2f5844eeafe4116a51fc7_r.jpg" alt="img"></p><p><img src="https://picx.zhimg.com/v2-1a434a99ad838d6188f50b4ef8807aad_r.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-db67476a7872d6cb5d6e47f6bdb969a9_r.jpg" alt="img"></p><p><img src="https://picx.zhimg.com/v2-bfb9d3b9bdd04a0759d4e959faf08779_r.jpg" alt="img"></p><p><img src="https://pica.zhimg.com/v2-832a9f56ade29405a57cad002508bf90_r.jpg" alt="img"></p><p><img src="https://pica.zhimg.com/v2-f7e16d34af9472befec3031bbd5557fc_r.jpg" alt="img"></p><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>项目灵感来源于 前端铺子 ，前台基于Vue-uniApp，使用colorUi与uview框架，部分Demo参考uniApp插件市场等,感谢各位作者～</p><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>本软件属于技术开源软件, 任何使用本源码从事商业活动，对别人和自己造成损失的，本人概不负责！</p><h2 id="功能规划"><a href="#功能规划" class="headerlink" title="功能规划"></a>功能规划</h2><h5 id="2024-08-增加2048小游戏、小霸王游戏机等经典小游戏"><a href="#2024-08-增加2048小游戏、小霸王游戏机等经典小游戏" class="headerlink" title="2024-08 : 增加2048小游戏、小霸王游戏机等经典小游戏"></a>2024-08 : 增加2048小游戏、小霸王游戏机等经典小游戏</h5><h5 id="2024-09-增加木鱼、摸鱼等娱乐性小工具"><a href="#2024-09-增加木鱼、摸鱼等娱乐性小工具" class="headerlink" title="2024-09 : 增加木鱼、摸鱼等娱乐性小工具"></a>2024-09 : 增加木鱼、摸鱼等娱乐性小工具</h5><h5 id="2024-10-增加编程博文和视频，代码资源等等"><a href="#2024-10-增加编程博文和视频，代码资源等等" class="headerlink" title="2024-10: 增加编程博文和视频，代码资源等等"></a>2024-10: 增加编程博文和视频，代码资源等等</h5><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol><li>下载安装：「HBuildX」、「微信开发者工具」</li><li>扫码登录微信开发者工具</li><li>将项目拖进【HBuildX】- 运行 - 微信小程序 - 完成</li></ol><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><blockquote><p>由于很多年没碰uniapp了，这次我想试一下uniapp统计，因为数据绝对了我更新的频率，而再次玩得时候却差点翻车！</p></blockquote><p>其实主要是Hbuild版本和官方策略原因，以前的时候app打包默认会勾选uni统计。而现在不但出了两个版本(1.0和2.0)，而且默认是不勾选的，需要自己挑选。重点是选择哪一个就会在对应版本的统计系统生效，也就是如果选了2.0再打开1.0的后台是看不到数据的，最后我看了文档才了解清楚。</p><p><img src="https://image-static.segmentfault.com/358/675/3586758235-66acc97a138d7_fix732" alt="img"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>做这个工具箱app主要有两个原因，一个是我做的一个微信小游戏还在备案中，目前是空档没啥事情；第二个是借机重新捡一下uniapp的内容，很多都已经忘了，所以工具箱app的更新迭代会慢一点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;一个基于uniapp开发的强大且实用的工具类APP，提供了包括图片处理、测算，信息查询和娱乐等常用的工具。如：文本加密解密、二维码生成与识别</summary>
      
    
    
    
    <category term="前端开发" scheme="https://www.zerofc.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="uniapp" scheme="https://www.zerofc.cn/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>零成本搭建个人图床服务器</title>
    <link href="https://www.zerofc.cn/2024/06/02/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.zerofc.cn/2024/06/02/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2024-06-02T08:13:50.000Z</published>
    <updated>2024-06-21T01:42:37.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图床服务器是一种用于存储和管理图片的服务器，可以给我们提供将图片上传后能外部访问浏览的服务。这样我们在写文章时插入的说明图片，就可以集中放到图床里，既方便多平台文章发布，又能统一管理和备份。</p><p>当然下面通过在GitHub上搭建的图床，不光不用成本，而且还能上传视频或音乐。操作方法和以前在GitHub上搭建静态博客类似，但是中间会多一些一些工具介绍和技巧。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><h5 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h5></li><li><h5 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h5></li><li><h5 id="连接仓库"><a href="#连接仓库" class="headerlink" title="连接仓库"></a>连接仓库</h5></li><li><h5 id="应用Typora"><a href="#应用Typora" class="headerlink" title="应用Typora"></a>应用Typora</h5></li></ul><h2 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>创建仓库和平时的代码托管一样，添加一个public权限仓库，用默认的main分支。当然也可以提前创建一个目录，但是根目录最好有一个index.html。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608131742136.png" alt="image-20240608131742136"></p><h2 id="设置仓库-1"><a href="#设置仓库-1" class="headerlink" title="设置仓库"></a>设置仓库</h2><p>设置仓库主要是添加提交Token，和配置GitHub Pages参数。而这两小步的设置，在前面文章 “Hexo博客搭建” 有比较详细介绍，所以这里就稍微文字带过了。</p><h4 id="Token生成"><a href="#Token生成" class="headerlink" title="Token生成"></a>Token生成</h4><p>登陆GitHub -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens(classic)，然后点击 “Generate new token”，填写备注和过期时间，权限主要勾选 “repo”、“workflow”、“user”。最后生成 “ghp_” 前缀的字符串就是Token了，复制并保存下来。</p><h4 id="GitHub-Pages配置"><a href="#GitHub-Pages配置" class="headerlink" title="GitHub Pages配置"></a>GitHub Pages配置</h4><p>进入仓库页 -&gt; Settings -&gt; Pages，设置Branch，指定仓库的分支和分支根目录，Source选择 “Deploy from a branch”，最后刷新或者重新进入，把访问链接地址复制保存下来。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608134712059.png" alt="image-20240608134712059"></p><h2 id="连接仓库-1"><a href="#连接仓库-1" class="headerlink" title="连接仓库"></a>连接仓库</h2><p>连接可以除了API方式，也可以用第三方的工具，比如 “PicGo”。工具位置自行搜索哈，下面以他为例，演示工具的连接配置、文件上传和访问测试。</p><h4 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h4><p>找到 “图床设置” -&gt; “GitHub”，下面主要填写仓库名（需带上账户名），分支名（默认main即可），Token（上面生成保存下来的），存储路径（后带斜杠）可以填写已存在，如果不存在则在仓库根目录下新建。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608140418396.png" alt="image-20240608140418396"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>文件格式除了下面指定的如Markdown、HTML、URL外，还能上传图片音乐视频等（亲测有效）。点击 “上传区”，将文件直接拖动到该窗口，提示上传成功后，进入GitHub仓库下查看是否存在。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608141234199.png" alt="image-20240608141234199"></p><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问就是能将仓库里的图片或视频以外链的方式展示，就像将文件放在云平台的存储桶一样。将前面GitHub Pages开启的链接复制下来，然后拼接存储路径和文件名就可以访问了。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608144141950.png" alt="image-20240608144141950"></p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608144227453.png" alt="image-20240608144227453"></p><h2 id="应用Typora-1"><a href="#应用Typora-1" class="headerlink" title="应用Typora"></a>应用Typora</h2><p>Typora通过PicGo软件自动上传图片到GitHub仓库中。打开Typora的文件 -&gt;偏好设置 -&gt; 图像 -&gt; 上传图片 -&gt; 配置PicGo路径，然后指定一下PicGo的安装位置。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608145919367.png" alt="image-20240608145919367"></p><h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>可以点击 “验证图片上传选项”，验证成功就代表已经将Typora的图标上传到仓库，也可以直接将图片复制到当前md文档位置。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608150003173.png" alt="image-20240608150003173"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image-20240608145607117](https://raw.githubusercontent.com/z11r00/zd_image_bed/main/img/image-20240608145607117.png)</span><br></pre></td></tr></table></figure><p>上传成功后会将返回一个如上面的远程链接，并且无法打开和显示，这是就要在PicGo工具的图床设置中。将自己GitHUb上的域名设定为自定义域名，格式 “域名&#x2F;仓库名”,  在Typora上传图片后重启就可展示了。</p><p><img src="https://www.zerofc.cn/zd_image_bed/img/test/image-20240612104856943.png" alt="image-20240612104856943"></p>]]></content>
    
    
    <summary type="html">介绍个人如何零成本搭建独立的图床服务</summary>
    
    
    
    <category term="运维相关" scheme="https://www.zerofc.cn/categories/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="图床服务器" scheme="https://www.zerofc.cn/tags/%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【YOLOv5】实现扑克牌的点数识别</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E3%80%90YOLOv5%E3%80%91%E5%AE%9E%E7%8E%B0%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E7%82%B9%E6%95%B0%E8%AF%86%E5%88%AB/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E3%80%90YOLOv5%E3%80%91%E5%AE%9E%E7%8E%B0%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E7%82%B9%E6%95%B0%E8%AF%86%E5%88%AB/</id>
    <published>2024-05-30T12:13:50.000Z</published>
    <updated>2024-06-01T03:54:55.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实年初的时候，我也跟着别人的源码，用 Tensoflow 实现过扑克牌的目标检测。虽然也通过博文的方式记录了，但是那个项目使用的 TF 版本比较旧，自身对 TF 并不熟。后期如果说要升级或修改估计够呛，知道最近看到 YOLO 对目标检测的实现方法，发现这个更方便快捷。    </p><p>于是决定用 YOLOv5.6 来重新实现一下扑克牌的点数识别，本文章主要是个人记录，也面向刚刚接触 YOLO 的同学阅读。所以以下会从数据标注，归一化处理到模型训练的实战内容，也包括各种踩坑经历和处理方法，最后对 detect.py 的重写，完成目标对象的坐标和识别标记输出。<br><img src="https://image-static.segmentfault.com/267/391/2673915127-c849e664b864d0ec_fix732" alt="图片"></p><h2 id="YOLO-简介"><a href="#YOLO-简介" class="headerlink" title="YOLO 简介"></a>YOLO 简介</h2><p>YOLO（You Only Look Once）是一种基于深度神经网络的对象识别和定位算法，其最大的特点是运行速度很快，可以用于实时系统。现在 YOLO 已经发展到 v8 版本，每个版本都在原有基础上改进演化的。选择 V5 是因为后面几个新版发行并不久，v5 相关资料和文章较多，踩坑起来也好搜索。其中每个版本里又有按场景划分几个特定场景版本，比如：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YOLOv5s：最小版本，速度最快，但检测性能最低。</span><br><span class="line">YOLOv5m：中等版本，速度比 s 慢一些，但检测性能更好。</span><br><span class="line">YOLOv5l：大型版本，速度比 m 慢，但检测性能更好。</span><br><span class="line">YOLOv5x：最大版本，速度最慢，但是检测性能最好。</span><br><span class="line">YOLOv5n6：中等版本，速度比 m 快一些，但检测性能更好。</span><br></pre></td></tr></table></figure><p>总之，根据具体需求和应用场景，可以选择合适的 YOLOv5 版本以满足性能、速度和准确性的要求，我这里以 YOLOv5s 为例。然后在项目开始前呢，我们可以先去 <a href="https://link.segmentfault.com/?enc=x88A+RY/bjxtshNk/k1hAA==.aoHBzhzGSjxn20IEoaQph1bdhG5DFP31kAEshxaYkXciT1PrKvHg6JP4wn2xlhNr">https://github.com/ultralytics/yolov5</a> 下载 demo 代码和权重文件，比如 yolov5s.pt，下载完后就要准备数据集，也就是标记的图片。<br><img src="https://image-static.segmentfault.com/320/973/3209730729-15645b8931c9eb91_fix732" alt="图片"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>图片的话，看你要识别的目标是啥，可以拍摄整理或去网上下载。为了让训练的模型稍微有点准确，最好准备一两百张，我这里就直接从原来 TF 项目那里拿过来。一共有 363 张扑克牌图片并且都已经用 VOC 格式标注好了，不过为了大家了解，这里还是会介绍如何标注，以及标注工具 labelImg 的基本使用。 </p><h3 id="LabelImg-使用"><a href="#LabelImg-使用" class="headerlink" title="LabelImg 使用"></a>LabelImg 使用</h3><h4 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a>操作界面</h4><p><img src="https://image-static.segmentfault.com/311/248/3112481172-3af548ba8af231ee_fix732" alt="图片"></p><h4 id="快捷使用"><a href="#快捷使用" class="headerlink" title="快捷使用"></a>快捷使用</h4><p>1、W 是进行标注<br>2、A 是切换到上一张图片<br>3、D 是切换到下一张图片<br><img src="https://image-static.segmentfault.com/111/849/1118491175-865fe738bda29ec9_fix732" alt="图片"></p><h4 id="LabelImg-保存格式"><a href="#LabelImg-保存格式" class="headerlink" title="LabelImg 保存格式"></a>LabelImg 保存格式</h4><p>1.PascalVOC 默认，xml格式<br>2.YOLO text可以直接拿来训练不用转换<br><img src="https://image-static.segmentfault.com/426/055/4260550021-d4c47e08767ad980_fix732" alt="图片"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>在根目录下新建 datasets 用于放置训练的数据集，由于用同一 yolo 可以创建多个检测目标，所以在 datasets 先创建一个项目名目录。然后再在项目名下可创建 VOC 和 YOLO 两种格式的目录，虽然 labelImg 标注后可以直接保存 YOLO 格式也就是归一化后的 text，但是毕竟三百多张图的标注，我这里依然使用以前 TF 的 VOC 的标注数据。如果需要这些数据集的，可以留言，到时我再放在评论区。<br><img src="https://image-static.segmentfault.com/159/512/1595126405-92f53035642663bd_fix732" alt="图片"></p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>依赖直接安装项目根目录下的 requirements.txt 就可以，但是要严格按照里面的版本。因为我用的是以前 conda 创建的环境，可以包都装过，所以一开始就看到已经有的就没装，导致后面运行的时候很多问题都是包的版本问题。所以最好的方法就是用 conda 创建一个新环境，然后直接 pip install -r requirements.txt 是最好的。<br><img src="https://image-static.segmentfault.com/305/502/3055028917-6b3c929a5cdcb531_fix732" alt="图片"></p><h3 id="归一化和数据集划分"><a href="#归一化和数据集划分" class="headerlink" title="归一化和数据集划分"></a>归一化和数据集划分</h3><p>如果 LabelImg 标注后保存的是 YOLO 格式，归一化过程就可以略过了。前面我也说了是用的以前扑克牌的 VOC 格式，所以需要对 xml 里节点数据抽取坐标和标记然后转换成 yolo 的 txt 格式。以下代码是我从其他博主那薅过来的，主要就是归一化和划分训练数据集和校验数据集。特别主要是 classes 部分要修改成自己的目标分类，其他的可以不用改动，当然只是划分的话可以适当删减。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">from os import listdir, <span class="built_in">getcwd</span></span><br><span class="line">from os.path import <span class="keyword">join</span></span><br><span class="line">import random</span><br><span class="line">from shutil import copyfile</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;queen&quot;</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;ace&quot;</span>]</span><br><span class="line">TRAIN_RATIO = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def clear_hidden_files(path):</span><br><span class="line">    dir_list = os.listdir(path)</span><br><span class="line">    abspath = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i in dir_list:</span><br><span class="line">        abspath = os.path.<span class="keyword">join</span>(os.path.abspath(path), i)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(abspath):</span><br><span class="line">        <span class="keyword">if</span> i.startswith(<span class="string">&quot;._&quot;</span>):</span><br><span class="line">            os.<span class="built_in">remove</span>(abspath)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        clear_hidden_files(abspath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert(size, box):</span><br><span class="line">    dw = <span class="number">1</span>. / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1</span>. / size[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">x</span> = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">y</span> = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">w</span> = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">x</span> = <span class="keyword">x</span> * dw</span><br><span class="line">    <span class="keyword">w</span> = <span class="keyword">w</span> * dw</span><br><span class="line">    <span class="keyword">y</span> = <span class="keyword">y</span> * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">x</span>, <span class="keyword">y</span>, <span class="keyword">w</span>, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert_annotation(image_id):</span><br><span class="line">    in_file = <span class="keyword">open</span>(<span class="string">&#x27;Poker/VOC/Annotations/%s.xml&#x27;</span> % image_id)</span><br><span class="line">    out_file = <span class="keyword">open</span>(<span class="string">&#x27;Poker/VOC/Labels/%s.txt&#x27;</span> % image_id, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.<span class="keyword">find</span>(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    <span class="keyword">w</span> = <span class="keyword">int</span>(size.<span class="keyword">find</span>(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="keyword">int</span>(size.<span class="keyword">find</span>(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj in root.iter(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.<span class="keyword">find</span>(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.<span class="keyword">find</span>(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls not in classes <span class="built_in">or</span> <span class="keyword">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        cls_id = classes.<span class="built_in">index</span>(cls)</span><br><span class="line">        xmlbox = obj.<span class="keyword">find</span>(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        <span class="keyword">b</span> = (float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;xmin&#x27;</span>).text), float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;xmax&#x27;</span>).text), float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((<span class="keyword">w</span>, h), <span class="keyword">b</span>)</span><br><span class="line"></span><br><span class="line">        out_file.<span class="keyword">write</span>(str(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.<span class="keyword">join</span>([str(<span class="keyword">a</span>) <span class="keyword">for</span> <span class="keyword">a</span> in bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    in_file.<span class="keyword">close</span>()</span><br><span class="line">    out_file.<span class="keyword">close</span>()</span><br><span class="line">wd = os.<span class="built_in">getcwd</span>()</span><br><span class="line">data_base_dir = os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;Poker/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(data_base_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(data_base_dir)</span><br><span class="line"></span><br><span class="line">work_sapce_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;VOC/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(work_sapce_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(work_sapce_dir)</span><br><span class="line"></span><br><span class="line">annotation_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Annotations/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(annotation_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(annotation_dir)</span><br><span class="line"></span><br><span class="line">image_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Images/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(image_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(image_dir)</span><br><span class="line"></span><br><span class="line">yolo_labels_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Labels/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolo_labels_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolo_labels_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;images/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;labels/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_train_dir = os.path.<span class="keyword">join</span>(yolov5_images_dir, <span class="string">&quot;train/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_train_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_train_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_test_dir = os.path.<span class="keyword">join</span>(yolov5_images_dir, <span class="string">&quot;val/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_test_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_test_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_train_dir = os.path.<span class="keyword">join</span>(yolov5_labels_dir, <span class="string">&quot;train/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_train_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_train_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_test_dir = os.path.<span class="keyword">join</span>(yolov5_labels_dir, <span class="string">&quot;val/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_test_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_test_dir)</span><br><span class="line"></span><br><span class="line">train_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_train.txt&quot;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">test_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_val.txt&quot;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">train_file.<span class="keyword">close</span>()</span><br><span class="line">test_file.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">train_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_train.txt&quot;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">test_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_val.txt&quot;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">list_imgs = os.listdir(image_dir)  # <span class="keyword">list</span> image <span class="keyword">files</span></span><br><span class="line">prob = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;Probability: %d&quot;</span> % prob)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(list_imgs)):</span><br><span class="line">    path = os.path.<span class="keyword">join</span>(image_dir, list_imgs[i])</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">        image_path = image_dir + list_imgs[i]</span><br><span class="line">        voc_path = list_imgs[i]</span><br><span class="line">        (nameWithoutExtention, extention) = os.path.splitext(os.path.basename(image_path))</span><br><span class="line">        (voc_nameWithoutExtention, voc_extention) = os.path.splitext(os.path.basename(voc_path))</span><br><span class="line">        annotation_name = nameWithoutExtention + <span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">        annotation_path = os.path.<span class="keyword">join</span>(annotation_dir, annotation_name)</span><br><span class="line"></span><br><span class="line">        label_name = nameWithoutExtention + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        label_path = os.path.<span class="keyword">join</span>(yolo_labels_dir, label_name)</span><br><span class="line"></span><br><span class="line">    prob = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Probability: %d&quot;</span> % prob)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prob &lt; TRAIN_RATIO):  # train dataset</span><br><span class="line">        <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(annotation_path):</span><br><span class="line">            train_file.<span class="keyword">write</span>(image_path + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            convert_annotation(nameWithoutExtention)  # convert label</span><br><span class="line">            copyfile(image_path, yolov5_images_train_dir + voc_path)</span><br><span class="line">            copyfile(label_path, yolov5_labels_train_dir + label_name)</span><br><span class="line">    <span class="keyword">else</span>:  # test dataset</span><br><span class="line">        <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(annotation_path):</span><br><span class="line">            test_file.<span class="keyword">write</span>(image_path + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            convert_annotation(nameWithoutExtention)  # convert label</span><br><span class="line">            copyfile(image_path, yolov5_images_test_dir + voc_path)</span><br><span class="line">            copyfile(label_path, yolov5_labels_test_dir + label_name)</span><br><span class="line"></span><br><span class="line">train_file.<span class="keyword">close</span>()</span><br><span class="line">test_file.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><p>上面代码放在哪个位置看你自己，由于有些目录是相对位置，所以如果不想改也跟我一样放在 datasets 中。执行完上面代码后会在 datasets 下生成 images 和 labels 两个目录，而且特别注意的是这两个目录名最好就是也是这样，比如在上面代码改了生成名，在后面训练的时候，会提示找不到 labels 目录。当然也可以修改 YOLO 提供源码的 dataset.py，看个人选择，而且 images 里的 train 和 val 需要配置到 data 的 yaml 中，这个马上就会说。<br><img src="https://image-static.segmentfault.com/290/641/290641633-3b1075790a728fd3_fix732" alt="图片"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="数据集配置"><a href="#数据集配置" class="headerlink" title="数据集配置"></a>数据集配置</h4><p>该默认文件位于项目的 data&#x2F;coco128.yaml，现在我们进行划分了数据集和自己的目标种类，当然要对其进行重新配置。最好的方法就是复制一份 coco128 然后修改名称，如下面 coco128_pocker.yaml 是我的配置示例。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">train: D:\<span class="number">3</span><span class="keyword">code</span>\<span class="number">6</span>pytorch\opencv_demo\<span class="number">05</span>_yolo_v5<span class="number">.6</span>\datasets\Poker\images\train  # train images (relative to <span class="string">&#x27;path&#x27;</span>) <span class="number">128</span> images</span><br><span class="line">val: D:\<span class="number">3</span><span class="keyword">code</span>\<span class="number">6</span>pytorch\opencv_demo\<span class="number">05</span>_yolo_v5<span class="number">.6</span>\datasets\Poker\images\val  # val images (relative to <span class="string">&#x27;path&#x27;</span>) <span class="number">128</span> images</span><br><span class="line"></span><br><span class="line"># Classes</span><br><span class="line">nc: <span class="number">6</span>  # number <span class="keyword">of</span> classes</span><br><span class="line">names: [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;queen&quot;</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;ace&quot;</span>]  # <span class="keyword">class</span> names</span><br><span class="line"></span><br><span class="line"># Download script/URL (optional)</span><br><span class="line">download: https:<span class="comment">//ultralytics.com/assets/coco128.zip</span></span><br></pre></td></tr></table></figure><h4 id="模型配置"><a href="#模型配置" class="headerlink" title="模型配置"></a>模型配置</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">该默认文件位于项目的 model 下，然后选择自己的场景，如我用的是 v5s 同样就复制一份重命名。这个文件主要是定义模型的基本机构和参数，比如分类数目 nc，模型深度倍数 depth_multiple，每层通道数倍数 width_multiple，以及目标框的大小和比例的 anchors。在刚使用 <span class="symbol">YOLO</span> 的话，我们就改个 nc 就可以，后面再研究这些参数的用法，下面是 yolov5s_pocker.yaml 的示例。</span><br><span class="line"># <span class="symbol">Parameters</span></span><br><span class="line">nc: <span class="number">6</span>  # number of classes</span><br><span class="line">depth_multiple: <span class="number">0.33</span>  # model depth multiple</span><br><span class="line">width_multiple: <span class="number">0.50</span>  # layer channel multiple</span><br><span class="line">anchors:</span><br><span class="line">  - [<span class="number">10</span>,<span class="number">13</span>, <span class="number">16</span>,<span class="number">30</span>, <span class="number">33</span>,<span class="number">23</span>]  # <span class="symbol">P3</span>/<span class="number">8</span></span><br><span class="line">  - [<span class="number">30</span>,<span class="number">61</span>, <span class="number">62</span>,<span class="number">45</span>, <span class="number">59</span>,<span class="number">119</span>]  # <span class="symbol">P4</span>/<span class="number">16</span></span><br><span class="line">  - [<span class="number">116</span>,<span class="number">90</span>, <span class="number">156</span>,<span class="number">198</span>, <span class="number">373</span>,<span class="number">326</span>]  # <span class="symbol">P5</span>/<span class="number">32</span></span><br><span class="line"></span><br><span class="line"># <span class="symbol">YOLOv5</span> v6<span class="number">.0</span> backbone</span><br><span class="line">backbone:</span><br><span class="line">  # [from, number, module, args]</span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">64</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>]],  # <span class="number">0</span>-<span class="symbol">P1</span>/<span class="number">2</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">1</span>-<span class="symbol">P2</span>/<span class="number">4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">128</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">3</span>-<span class="symbol">P3</span>/<span class="number">8</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">6</span>, <span class="symbol">C3</span>, [<span class="number">256</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">5</span>-<span class="symbol">P4</span>/<span class="number">16</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">9</span>, <span class="symbol">C3</span>, [<span class="number">512</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">7</span>-<span class="symbol">P5</span>/<span class="number">32</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">1024</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">SPPF</span>, [<span class="number">1024</span>, <span class="number">5</span>]],  # <span class="number">9</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"># <span class="symbol">YOLOv5</span> v6<span class="number">.0</span> head</span><br><span class="line">head:</span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, nn.<span class="symbol">Upsample</span>, [<span class="symbol">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">6</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat backbone <span class="symbol">P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">512</span>, <span class="symbol">False</span>]],  # <span class="number">13</span></span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, nn.<span class="symbol">Upsample</span>, [<span class="symbol">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat backbone <span class="symbol">P3</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">256</span>, <span class="symbol">False</span>]],  # <span class="number">17</span> (<span class="symbol">P3</span>/<span class="number">8</span>-small)</span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">14</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat head <span class="symbol">P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">512</span>, <span class="symbol">False</span>]],  # <span class="number">20</span> (<span class="symbol">P4</span>/<span class="number">16</span>-medium)</span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">10</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat head <span class="symbol">P5</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">1024</span>, <span class="symbol">False</span>]],  # <span class="number">23</span> (<span class="symbol">P5</span>/<span class="number">32</span>-large)</span><br><span class="line"></span><br><span class="line">   [[<span class="number">17</span>, <span class="number">20</span>, <span class="number">23</span>], <span class="number">1</span>, <span class="symbol">Detect</span>, [nc, anchors]],  # <span class="symbol">Detect</span>(<span class="symbol">P3</span>, <span class="symbol">P4</span>, <span class="symbol">P5</span>)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h4 id="权重文件"><a href="#权重文件" class="headerlink" title="权重文件"></a>权重文件</h4><p>这个就是我们从 yolo 开源那里下载的 yolov5s.pt，这里面有 80 个类目的检测，在基础识别时候可以直接用它。而训练自己的目标也需要基于他的权重再进行训练，所以可以在项目中创建一个 weights，然后再将 yolov5s.pt 放到其中。<br><img src="https://image-static.segmentfault.com/307/858/3078581037-6548ba01554ac490_fix732" alt="图片"></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><h4 id="基础预测"><a href="#基础预测" class="headerlink" title="基础预测"></a>基础预测</h4><p>在训练目标模型前，可以先试试以前的基础检测，这里我们可以随便拿一张图放到 data&#x2F;images 下，然后执行下面命令，根目录下会生成 runs，而 runs 下的 detect 会根据每次执行的次数生成不同次的标注结果。python detect.py –weights weights&#x2F;yolov5s.pt –source data&#x2F;images&#x2F;zidane.jpg<br><img src="https://image-static.segmentfault.com/341/590/3415904343-40e9fd1c19ead227_fix732" alt="图片"></p><h4 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">source: 需要进行检测的图片或视频的文件位置</span><br><span class="line">weigths: 指的是训练好的网络模型，用来初始化网络权重</span><br><span class="line">cfg：为configuration的缩写，指的是网络结构，一般对应models文件夹下的xxx.yaml文件</span><br><span class="line"><span class="keyword">data</span>：训练数据路径，一般为<span class="keyword">data</span>文件夹下的xxx.yaml文件</span><br><span class="line">epochs：设置训练的轮数（自己电脑上一般建议先小一点，测试一下，看跑一轮要多久）</span><br><span class="line">batch-<span class="built_in">size</span>：每次输出给神经网络的图片数，（需要根据自己电脑性能进行调整）</span><br><span class="line">img-<span class="built_in">size</span>：用于分别设置训练集和测试集的大小。两个数字前者为训练集大小，后者为测试集大小</span><br><span class="line">image-weights：测试过程中，图像的那些测试地方不太好，对这些不太好的地方加权重</span><br><span class="line">device：训练网络的设备cpu还是gpu</span><br><span class="line">multi-<span class="built_in">scale</span>：训练过程中对图片进行尺度变换</span><br><span class="line">workers: 多线程训练</span><br><span class="line">label-smoothing： 对标签进行平滑处理，防止过拟合</span><br></pre></td></tr></table></figure><h4 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h4><p>以下是我踩过坑后执行的命令，因为当时我用 CPU 训练一轮要 7 分钟就改成了 GPU，加了 –device 0 后速度快了 4 倍。batch-size 为 2，这么小是因为我的显卡 750Ti 显存只有 2G，就暂时用了这个数值。而加了 –workers 0，也是因为有坑，这个后面再说。训练完成后，会在根目录的 runs&#x2F;train 下生成每次运行的权重文件和损失准确示例图等，其中 weights 下的 best.pt 和 last.pt，分别表示本轮训练最好的权重和最新的权重。<br>python train.py –weights weights&#x2F;yolov5s.pt –cfg models&#x2F;yolov5s_pocker.yaml –data data&#x2F;coco128_pocker.yaml –epochs 1 –batch-size 2 –multi-scale –device 0 –workers 0<br><img src="https://image-static.segmentfault.com/354/272/3542721148-cbbce6058bb70092_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/255/417/2554173645-f5d7f1dcd2c61b74_fix732" alt="图片"></p><h3 id="开始检测"><a href="#开始检测" class="headerlink" title="开始检测"></a>开始检测</h3><p>训练完成后，我们可以把本轮的 best.pt 放到根目录的 weights 下，以下是不同检测方式的命令，可以分别都试一下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 图片</span><br><span class="line">python detect<span class="selector-class">.py</span>  <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/cam_image16<span class="selector-class">.jpg</span></span><br><span class="line"><span class="number">2</span>. 视频</span><br><span class="line">python detect<span class="selector-class">.py</span>  <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/test<span class="selector-class">.mov</span></span><br><span class="line"><span class="number">3</span>. 使用cuda测试</span><br><span class="line">python detect<span class="selector-class">.py</span> <span class="attr">--device</span> <span class="number">0</span> <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/IMG_2681.JPG</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/154/622/1546221456-7bf1202145704a9f_fix732" alt="图片"></p><h3 id="detect-py-重写"><a href="#detect-py-重写" class="headerlink" title="detect.py 重写"></a>detect.py 重写</h3><p>因为在实际项目中，我们对图片和视频的目标检测，更多的可能是通过前端传递过来的图片或视频，模型给出的是预测的类目名称和目标的位置，而不是直接生成标注的图片和视频。所以我对 demo 提供的 detect 进行了简单的修改，修改结果就是前面放出的图片，不过还是采用命令方式，当然也可以直接改成接口，最后就是如果需要代码的可以评论区留言哈。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">import warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">import argparse</span><br><span class="line"><span class="keyword">from</span> utils.datasets import *</span><br><span class="line"><span class="keyword">from</span> utils.torch_utils import *</span><br><span class="line"><span class="keyword">from</span> utils.augmentations import *</span><br><span class="line"><span class="keyword">from</span> utils.general import *</span><br><span class="line"><span class="keyword">from</span> models.common import DetectMultiBackend</span><br><span class="line"><span class="keyword">from</span> utils.plots import Annotator, colors, save_one_box</span><br><span class="line">import time</span><br><span class="line">import cv2</span><br><span class="line">import torch</span><br><span class="line">import random</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def detect(<span class="attribute">save_img</span>=<span class="literal">False</span>):</span><br><span class="line">    # 解析配置参数</span><br><span class="line">    source, weights, data, imgsz = opt.source, opt.weights, opt.data, opt.img_size</span><br><span class="line"></span><br><span class="line">    # 初始化 模型推理硬件</span><br><span class="line">    device = select_device(opt.device)</span><br><span class="line">    model = DetectMultiBackend(weights, <span class="attribute">device</span>=device, <span class="attribute">dnn</span>=<span class="literal">False</span>, <span class="attribute">data</span>=data)</span><br><span class="line">    stride, names, pt, jit, onnx, engine = model.stride, model.names, model.pt, model.jit, model.onnx, model.engine</span><br><span class="line">    imgsz = check_img_size(imgsz, <span class="attribute">s</span>=stride)</span><br><span class="line"></span><br><span class="line">    dataset = LoadImages(source, <span class="attribute">img_size</span>=imgsz, <span class="attribute">stride</span>=stride, <span class="attribute">auto</span>=pt)</span><br><span class="line"></span><br><span class="line">    dt, seen = [0.0, 0.0, 0.0], 0</span><br><span class="line">    <span class="keyword">for</span> path, im, im0s, vid_cap, s <span class="keyword">in</span> dataset:</span><br><span class="line">        t1 = time_sync()</span><br><span class="line">        # im = torch.from_numpy(im).<span class="keyword">to</span>(device)</span><br><span class="line">        im = torch.from_numpy(im.astype(np.float32)).<span class="keyword">to</span>(device)</span><br><span class="line">        im /= 255  # 0 - 255 <span class="keyword">to</span> 0.0 - 1.0</span><br><span class="line">        <span class="keyword">if</span> len(im.shape) == 3:</span><br><span class="line">            im = im[None]  # expand <span class="keyword">for</span> batch dim</span><br><span class="line">        t2 = time_sync()</span><br><span class="line">        dt[0] += t2 - t1</span><br><span class="line"></span><br><span class="line">        dt[0] += t2 - t1</span><br><span class="line"></span><br><span class="line">        # Inference</span><br><span class="line">        # visualize = increment_path(save_dir / Path(path).stem, <span class="attribute">mkdir</span>=<span class="literal">True</span>) <span class="keyword">if</span> visualize <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        pred = model(im)</span><br><span class="line">        t3 = time_sync()</span><br><span class="line">        dt[1] += t3 - t2</span><br><span class="line"></span><br><span class="line">        # NMS</span><br><span class="line">        pred = non_max_suppression(pred, 0.25, 0.45, None, <span class="literal">False</span>, <span class="attribute">max_det</span>=1000)</span><br><span class="line">        dt[2] += time_sync() - t3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, det <span class="keyword">in</span> enumerate(pred):</span><br><span class="line">            p, s, im0 = source, <span class="string">&#x27;&#x27;</span>, im0s</span><br><span class="line"></span><br><span class="line">            # <span class="built_in">print</span>(<span class="string">&#x27;im0_shape：&#x27;</span>, im0.shape)</span><br><span class="line"></span><br><span class="line">            s += <span class="string">&#x27;%gx%g &#x27;</span> % im.shape[2:]  # <span class="built_in">print</span> string</span><br><span class="line">            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  #  normalization gain whwh</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> det is <span class="keyword">not</span> None <span class="keyword">and</span> len(det):</span><br><span class="line">                # 推理的图像分辨率转为原图分辨率：Rescale boxes <span class="keyword">from</span> img_size <span class="keyword">to</span> im0 size</span><br><span class="line">                det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()</span><br><span class="line"></span><br><span class="line">                # <span class="built_in">Print</span> results</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> det[:, -1].unique():</span><br><span class="line">                    n = (det[:, -1] == c).sum()  # detections per class</span><br><span class="line">                    s += <span class="string">&#x27;%g %ss, &#x27;</span> % (n, names[int(c)])  # <span class="built_in">add</span> <span class="keyword">to</span> string</span><br><span class="line"></span><br><span class="line">                # Write results</span><br><span class="line">                output_dict_ = []</span><br><span class="line">                <span class="keyword">for</span> *xyxy, conf, cls <span class="keyword">in</span> det:</span><br><span class="line">                    x1, y1, x2, y2 = xyxy</span><br><span class="line">                    output_dict_.append((float(x1), float(y1), float(x2), float(y2)))</span><br><span class="line">                    label = <span class="string">&#x27;%s %.2f&#x27;</span> % (names[int(cls)], conf)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;---------------------------------------------------------------------&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;尺寸：&quot;</span>, im0.shape)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;坐标：&quot;</span>, (float(x1), float(y1), float(x2), float(y2)))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;标识：&quot;</span>, label)</span><br><span class="line">                # <span class="built_in">print</span>(<span class="string">&quot;output_dict_ : &quot;</span>, output_dict_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;weights/yolov5s.pt&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;model.pt path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;data/coco128_pocker.yaml&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;dataset.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--source&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&quot;./video/1.mp4&quot;</span>, <span class="attribute">help</span>=<span class="string">&#x27;source&#x27;</span>)  # file/folder, 0 <span class="keyword">for</span> webcam</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--img-size&#x27;</span>, <span class="attribute">type</span>=int, <span class="attribute">default</span>=640, <span class="attribute">help</span>=<span class="string">&#x27;inference size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf-thres&#x27;</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.31, <span class="attribute">help</span>=<span class="string">&#x27;object confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou-thres&#x27;</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.45, <span class="attribute">help</span>=<span class="string">&#x27;IOU threshold for NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--fourcc&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;mp4v&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;output video codec (verify ffmpeg support)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, <span class="attribute">default</span>=<span class="string">&#x27;&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, <span class="attribute">nargs</span>=<span class="string">&#x27;+&#x27;</span>, <span class="attribute">type</span>=int, <span class="attribute">help</span>=<span class="string">&#x27;filter by class&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--agnostic-nms&#x27;</span>, <span class="attribute">action</span>=<span class="string">&#x27;store_true&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;class-agnostic NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--augment&#x27;</span>, <span class="attribute">default</span>=<span class="literal">False</span>, <span class="attribute">help</span>=<span class="string">&#x27;augmented inference&#x27;</span>)</span><br><span class="line">    opt = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(opt)  # 打印输入配置参数</span><br><span class="line"></span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        detect(<span class="attribute">save_img</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实年初的时候，我也跟着别人的源码，用 Tensoflow 实现过扑克牌的目标检测。虽然也通过博文的方式记录了，但是那个项目使用的 TF 版</summary>
      
    
    
    
    <category term="人工智能" scheme="https://www.zerofc.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="计算机视觉" scheme="https://www.zerofc.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>如何将 Python 项目打包成 exe，另带卸载功能！</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E5%A6%82%E4%BD%95%E5%B0%86%20Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90%20exe%EF%BC%8C%E5%8F%A6%E5%B8%A6%E5%8D%B8%E8%BD%BD%E5%8A%9F%E8%83%BD%EF%BC%81/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E5%A6%82%E4%BD%95%E5%B0%86%20Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90%20exe%EF%BC%8C%E5%8F%A6%E5%B8%A6%E5%8D%B8%E8%BD%BD%E5%8A%9F%E8%83%BD%EF%BC%81/</id>
    <published>2024-05-30T11:13:50.000Z</published>
    <updated>2024-06-01T03:59:01.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我是做 web 的，但是对 Python 的众多开源项目一直都很关注。像之前的 stable diffusion 的 AI 绘画，和 so-vits-svc 音色替换等源码的部署文档都很完善了。尽管如此，对于刚入门的和本地环境搭建各种踩坑的同学，又急于一试就显得不太友好了。针对这一现象，网上早有了各种大佬做了一键部署的解决方案，不用安装 Python 环境，不用下载各种依赖包，点一下 exe 就可以用了。    </p><p>那他们是怎么做的呢，到这里应该已经很多人会说用 pyinstaller。是的这个确实可以解决整体环境打包，但是有时候一些图标和依赖文件要放在一起才能正常使用，类似于绿色桌面工具。那有没有方法对这个进一步封装，就是点击 exe 后需要安装，然后安装后才是项目的文件，还可以卸载，答案就是用 Inno Setup Compiler。那么，接下来我就用一个 GUI 的小 demo 完成 exe 打包和进一步安装打包。<br><img src="https://image-static.segmentfault.com/279/444/2794446223-f02b7a7b73003e25_fix732" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Python 3.8<br>Tkinter (自带)<br>pyinstaller 6.3.0<br>Inno Setup Compiler </p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>用 conda 单独创建一虚拟环境，比如写一个 tkinter 应用，对了为了好看，我们可以设置以下 icon，尺寸 32x32，大图标 64x64 准备一下即可。然后用 pyinstaller 将应用达成文件包 (含 exe)，最后用 Inno Setup Compiler 达成安装包，里面就是各种文件关联，图标和信息的设置了。<br><img src="https://image-static.segmentfault.com/144/031/144031524-21473df23511ccdb_fix732" alt="图片"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建环境</span></span><br><span class="line"><span class="attribute">conda</span> create -n tools_env python=<span class="number">3</span>.<span class="number">8</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 进入环境</span></span><br><span class="line"><span class="attribute">conda</span> activate tools_env</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3. 安装 pyinstaller</span></span><br><span class="line"><span class="attribute">pip</span> install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h4 id="编码示例"><a href="#编码示例" class="headerlink" title="编码示例"></a>编码示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"><span class="keyword">from</span> tkinter import ttk</span><br><span class="line"><span class="keyword">from</span> tkinter import messagebox</span><br><span class="line"><span class="keyword">from</span> ToolTip import ToolTip</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Application(tk.Tk):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.title(<span class="string">&quot;公众号：ZERO开发&quot;</span>)</span><br><span class="line">        self.iconbitmap(<span class="string">&#x27;logo.ico&#x27;</span>)</span><br><span class="line">        self.geometry(<span class="string">&quot;600x370&quot;</span>)  # 设置固定的窗口大小</span><br><span class="line">        self.resizable(<span class="literal">False</span>, <span class="literal">False</span>)  # 禁止调整窗口大小</span><br><span class="line">        self.style = ttk.Style(self)</span><br><span class="line">        self.main_color = self.cget(<span class="string">&quot;bg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TEntry&quot;</span>,</span><br><span class="line">                             <span class="attribute">padding</span>=6,</span><br><span class="line">                             <span class="attribute">relief</span>=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">                             <span class="attribute">background</span>=<span class="string">&quot;#0078d7&quot;</span>,</span><br><span class="line">                             <span class="attribute">foreground</span>=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TLabel&quot;</span>,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TButton&quot;</span>,</span><br><span class="line">                             <span class="attribute">padding</span>=6,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12))</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line"></span><br><span class="line">    def create_widgets(self):</span><br><span class="line">        self.path_label = ttk.Label(self, <span class="attribute">text</span>=<span class="string">&#x27;绝对路径:&#x27;</span>)</span><br><span class="line">        self.path_label.grid(<span class="attribute">row</span>=0, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=30, <span class="attribute">padx</span>=20)</span><br><span class="line"></span><br><span class="line">        self.path = tk.StringVar()</span><br><span class="line">        self.path_entry = ttk.Entry(self, <span class="attribute">width</span>=60, <span class="attribute">textvariable</span>=self.path)</span><br><span class="line">        self.path_entry.grid(<span class="attribute">row</span>=0, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.E, <span class="attribute">pady</span>=5)</span><br><span class="line">        ToolTip(self.path_entry, <span class="string">&quot;电脑里的目录路径，如 D:\\3code\\6pytorch\pytorch_ai_demo&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.rename_label = ttk.Label(self, <span class="attribute">text</span>=<span class="string">&#x27;修改名称:&#x27;</span>)</span><br><span class="line">        self.rename_label.grid(<span class="attribute">row</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=5, <span class="attribute">padx</span>=20)</span><br><span class="line"></span><br><span class="line">        self.rename = tk.StringVar()</span><br><span class="line">        self.rename_entry = ttk.Entry(self, <span class="attribute">width</span>=60, <span class="attribute">textvariable</span>=self.rename)</span><br><span class="line">        self.rename_entry.grid(<span class="attribute">row</span>=1, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.E, <span class="attribute">pady</span>=5)</span><br><span class="line"></span><br><span class="line">        self.msg_text = tk.Text(self, <span class="attribute">height</span>=2, <span class="attribute">width</span>=60, <span class="attribute">wrap</span>=<span class="string">&#x27;none&#x27;</span>)  # 添加一个列表框来显示文件名</span><br><span class="line">        self.msg_text.grid(<span class="attribute">row</span>=2, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=15)</span><br><span class="line">        self.msg_text.configure(<span class="attribute">bd</span>=0, <span class="attribute">relief</span>=<span class="string">&quot;solid&quot;</span>, <span class="attribute">bg</span>=self.main_color)</span><br><span class="line">        # self.msg_text.insert(tk.END, <span class="string">&quot;这是要显示的文本。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ttk.Button(self, <span class="attribute">text</span>=<span class="string">&#x27;确认修改&#x27;</span>, <span class="attribute">command</span>=self.start_program).grid(row=3, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=20, <span class="attribute">padx</span>=120)</span><br><span class="line">        ttk.Button(self, <span class="attribute">text</span>=<span class="string">&#x27;关于作者&#x27;</span>, <span class="attribute">command</span>=self.about).grid(row=4, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">padx</span>=120)</span><br><span class="line"></span><br><span class="line">    def start_program(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;绝对路径：&#123;&#125;, 重命名：&#123;&#125;&quot;</span>. format(self.path.<span class="built_in">get</span>(), self.rename.<span class="built_in">get</span>()))</span><br><span class="line"></span><br><span class="line">        path = self.path.<span class="built_in">get</span>()</span><br><span class="line">        rename = self.rename.<span class="built_in">get</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> path == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> rename == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;输入框不能为空！&quot;</span>)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path) == <span class="literal">False</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;绝对路径不正确！&quot;</span>)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        i = 0</span><br><span class="line">        # <span class="string">&#x27;该文件夹下所有的文件（包括文件夹）&#x27;</span></span><br><span class="line">        FileList = os.listdir(path)</span><br><span class="line"></span><br><span class="line">        # <span class="string">&#x27;遍历所有文件&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> FileList:</span><br><span class="line">            oldDirPath = os.path.join(path, files)</span><br><span class="line"></span><br><span class="line">            self.msg_text.delete(1.0, tk.END)</span><br><span class="line">            self.msg_text.insert(tk.END, oldDirPath)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;如果是文件夹则递归调用&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(oldDirPath):</span><br><span class="line">                self.start_program(oldDirPath)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;文件名&#x27;</span></span><br><span class="line">            fileName = os.path.splitext(files)[0]</span><br><span class="line">            # <span class="string">&#x27;文件扩展名&#x27;</span></span><br><span class="line">            fileType = os.path.splitext(files)[1]</span><br><span class="line">            fileType = fileType.lower()</span><br><span class="line"></span><br><span class="line">            newDirPath = os.path.join(path, rename + <span class="string">&quot;_&quot;</span> + str(i) + fileType)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;重命名&#x27;</span></span><br><span class="line">            os.rename(oldDirPath, newDirPath)</span><br><span class="line">            i += 1</span><br><span class="line"></span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;信息&quot;</span>, <span class="string">&quot;操作完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    def about(self):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;关于&quot;</span>, <span class="string">&quot;微信公众号：ZERO开发\r\n\r\n工具：批量修改文件1.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    def quit_program(self):</span><br><span class="line">        self.destroy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = Application()</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure><h4 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h4><p>pyinstaller -F -w Application.py -–icon&#x3D;logo.ico<br><img src="https://image-static.segmentfault.com/215/637/2156373440-5904f0f705ce1152_fix732" alt="图片"><br>这里我们希望打包是自己的图标就带上 icon，而且打开时不要出现黑色闪框就带上 w，当然后面打开 exe 要把 icon 放到与他同一级的目录中，尺寸上面已经说了，下面是参数说明。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：    </span><br><span class="line"><span class="deletion">-–icon=图标路径</span></span><br><span class="line"><span class="deletion">-F 打包成一个exe文件</span></span><br><span class="line"><span class="deletion">-w 使用窗口，无控制台</span></span><br><span class="line"><span class="deletion">-c 使用控制台，无窗口</span></span><br><span class="line"><span class="deletion">-D 创建一个目录，里面包含exe以及其他一些依赖性文件</span></span><br></pre></td></tr></table></figure><p>还有一个问题是，如果是修改了代码，需要反复多次打包，可以把项目前一次打包生成的生成的 spec 后缀文件删除即可。打包成功后，控制面包会显示 Building EXE from EXE-00.toc completed successfully，然后根目录的 dist 就是打包后的文件包，里面需要的文件图片等都在里面，后面用 Inno Setup Compiler 也就是对这个文件夹打包。<br><img src="https://image-static.segmentfault.com/346/065/3460652742-40f3b853ed65482b_fix732" alt="图片"><br><img src="https://segmentfault.com/img/remote/1460000044486411" alt="图片"></p><h4 id="Inno-Setup-Compiler-操作"><a href="#Inno-Setup-Compiler-操作" class="headerlink" title="Inno Setup Compiler 操作"></a>Inno Setup Compiler 操作</h4><p>新建脚本，填写信息</p><p><img src="https://image-static.segmentfault.com/253/032/2530320731-e84a5e5078cc75bf_fix732" alt="图片"></p><p>选择主程序和需要的文件</p><p><img src="https://image-static.segmentfault.com/191/164/1911642914-f83b2079c5a5559d_fix732" alt="图片"></p><p>设置名称和 icon</p><p><img src="https://image-static.segmentfault.com/146/108/1461087550-556de6402714ff46_fix732" alt="图片"></p><p>选择导出位置 (前面还有协议等设置)</p><p><img src="https://image-static.segmentfault.com/168/158/168158026-7abe4b306413d623_fix732" alt="图片"></p><p>运行脚本开始生成</p><p><img src="https://image-static.segmentfault.com/253/508/253508023-7ed276ac293ec822_fix732" alt="图片"></p><p>安装打开，安装目录里有自带卸载程序</p><p><img src="https://image-static.segmentfault.com/368/896/3688964355-546d3f70e917260d_fix732" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然我是做 web 的，但是对 Python 的众多开源项目一直都很关注。像之前的 stable diffusion 的 AI 绘画，和 s</summary>
      
    
    
    
    <category term="Python开发" scheme="https://www.zerofc.cn/categories/Python%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="桌面应用开发" scheme="https://www.zerofc.cn/tags/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何用 Python 实现一个 “系统声音” 的实时律动挂件</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E5%A6%82%E4%BD%95%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20%E2%80%9C%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E2%80%9D%20%E7%9A%84%E5%AE%9E%E6%97%B6%E5%BE%8B%E5%8A%A8%E6%8C%82%E4%BB%B6/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E5%A6%82%E4%BD%95%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20%E2%80%9C%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E2%80%9D%20%E7%9A%84%E5%AE%9E%E6%97%B6%E5%BE%8B%E5%8A%A8%E6%8C%82%E4%BB%B6/</id>
    <published>2024-05-30T10:13:50.000Z</published>
    <updated>2024-05-31T02:38:43.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应该是三年前，我用 Esp8266 和 ws2812 实现了一个音乐律动灯带。就是电脑播放音乐时，灯带会随着系统内部音乐播放的频率而闪动不同色彩的灯珠。而当时用来监听系统声音的工具是一个博主提供的，除了实时采集声音外还通过 UDP 传递数据到 Esp8266 上。</p><p>而这次，我就自己用 Python 实现一下，不过不传数据，就采集后直接实时地在电脑上绘制波形动画，主要是用来作为 FL Studio 播放时的一个桌面小挂件。<br><img src="https://image-static.segmentfault.com/427/679/4276797434-0949231c1860f960" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>python3.8</p></li><li><p>pyaudio0.2.14</p></li><li><p>matplotlib<br><img src="https://image-static.segmentfault.com/264/586/264586738-951598ea57acb56b_fix732" alt="图片"></p><h2 id="pyaudio-简介"><a href="#pyaudio-简介" class="headerlink" title="pyaudio 简介"></a>pyaudio 简介</h2><p>pyaudio 是一个跨平台地音频 I&#x2F;O 库，使用他可以在 Python 程序中进行播放，录音和生成 wav 文件等。需要注意的是，如果要使用 pyaudio 时，python 的版本最好在 3.7 以上，不然 pip 安装会报错。因为以下例子是获取系统内部声音，而 pyaudio 读取的音频流默认是麦克风，所以接下来介绍一下关于获取的设备列表信息。</p><h4 id="代码获取设备列表"><a href="#代码获取设备列表" class="headerlink" title="代码获取设备列表"></a>代码获取设备列表</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pyaudio实例</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line"><span class="comment"># 获取设备总数</span></span><br><span class="line">device_count = audio.get_device_count()</span><br><span class="line"><span class="comment"># 根据设备索引获取设备详细信息</span></span><br><span class="line">for i in range(p.get_device_count()):</span><br><span class="line">  devInfo = p.get_device_info_by_index(i)</span><br><span class="line">  print(devInfo)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/312/429/3124297982-d02f63aeed4d1257_fix732" alt="图片"></p><h4 id="设备信息参数介绍"><a href="#设备信息参数介绍" class="headerlink" title="设备信息参数介绍"></a>设备信息参数介绍</h4></li><li><p>index: 设备的索引号，通常用于标识系统中的设备顺序。</p></li><li><p>structVersion: 结构版本号，用于表示这个数据结构的版本。</p></li><li><p>name: 设备的名称，这里是 “Microsoft 声音映射器 - Input”。</p></li><li><p>hostApi: 主 API 的标识符，通常用于表示该设备属于哪个 API 或系统。</p></li><li><p>maxInputChannels: 设备支持的最大输入通道数，这里是 2，表示设备支持 2 个输入通道。</p></li><li><p>maxOutputChannels: 设备支持的最大输出通道数，这里为 0，表示该设备没有输出通道。</p></li><li><p>defaultLowInputLatency: 默认的低输入延迟，以秒为单位，这里是 0.09 秒。</p></li><li><p>defaultLowOutputLatency: 默认的低输出延迟，这里是 0.09 秒。</p></li><li><p>defaultHighInputLatency: 默认的高输入延迟，这里是 0.18 秒。</p></li><li><p>defaultHighOutputLatency: 默认的高输出延迟，这里是 0.18 秒。</p></li><li><p>defaultSampleRate: 默认的采样率，这里是 44100.0 赫兹，这是 CD 质量的音频标准采样率。<br><img src="https://image-static.segmentfault.com/630/858/63085841-88f7b48856a39313_fix732" alt="图片"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="开启立体声混音权限"><a href="#开启立体声混音权限" class="headerlink" title="开启立体声混音权限"></a>开启立体声混音权限</h4><p>打开电脑设置 - 系统 - 声音 - 管理声音设备 - 立体声混响，点击启用。<br><img src="https://image-static.segmentfault.com/685/561/685561159-83a23b72ed13e8ba_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/146/378/1463783907-c6df507dcbfa73cf_fix732" alt="图片"></p><h4 id="设置设备索引号"><a href="#设置设备索引号" class="headerlink" title="设置设备索引号"></a>设置设备索引号</h4><p>打开立体声混音后，通过 pyaudio 获取设备列表，找到带有 “立体声混音” 的名称，和 hostApi 为 0 的，hostAPI &#x3D; 0 表明是 MME 设备。然后拿到该设备索引号，打开音频流时指定该内录设备序号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalRecordingDevice</span>(<span class="params">p</span>):</span><br><span class="line">  <span class="comment"># 要找查的设备名称中的关键字</span></span><br><span class="line">  target = <span class="string">&#x27;立体声混音&#x27;</span></span><br><span class="line">  <span class="comment"># 逐一查找声音设备</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p.get_device_count()):</span><br><span class="line">      devInfo = p.get_device_info_by_index(i)</span><br><span class="line">      <span class="built_in">print</span>(devInfo)</span><br><span class="line">      <span class="keyword">if</span> devInfo[<span class="string">&#x27;name&#x27;</span>].find(target) &gt;= <span class="number">0</span> <span class="keyword">and</span> devInfo[<span class="string">&#x27;hostApi&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">          <span class="comment"># print(&#x27;已找到内录设备,序号是 &#x27;,i)</span></span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;无法找到内录设备!&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"></span><br><span class="line">FORMAT = pyaudio.paInt16</span><br><span class="line">CHANNELS = <span class="number">1</span>  </span><br><span class="line">RATE = <span class="number">44100</span>  </span><br><span class="line">CHUNK = <span class="number">4096</span>  </span><br><span class="line"><span class="comment"># CHUNK = 1024  </span></span><br><span class="line">WAVE_OUTPUT_FILENAME = <span class="string">&#x27;audio_output.wav&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内录设备序号,在windows操作系统上测试通过，hostAPI = 0 表明是MME设备</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalRecordingDevice</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="comment"># 要找查的设备名称中的关键字</span></span><br><span class="line">    target = <span class="string">&#x27;立体声混音&#x27;</span></span><br><span class="line">    <span class="comment"># 逐一查找声音设备</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p.get_device_count()):</span><br><span class="line">        devInfo = p.get_device_info_by_index(i)</span><br><span class="line">        <span class="built_in">print</span>(devInfo)</span><br><span class="line">        <span class="keyword">if</span> devInfo[<span class="string">&#x27;name&#x27;</span>].find(target) &gt;= <span class="number">0</span> <span class="keyword">and</span> devInfo[<span class="string">&#x27;hostApi&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># print(&#x27;已找到内录设备,序号是 &#x27;,i)</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无法找到内录设备!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;应该是三年前，我用 Esp8266 和 ws2812 实现了一个音乐律动灯带。就是电脑播放音乐时，灯带会随着系统内部音乐播放的频率而闪动不同</summary>
      
    
    
    
    <category term="Python开发" scheme="https://www.zerofc.cn/categories/Python%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="音频处理" scheme="https://www.zerofc.cn/tags/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>基于 pytorch-openpose 实现 “多目标” 人体姿态估计</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E5%9F%BA%E4%BA%8E%20pytorch-openpose%20%E5%AE%9E%E7%8E%B0%20%E2%80%9C%E5%A4%9A%E7%9B%AE%E6%A0%87%E2%80%9D%20%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E5%9F%BA%E4%BA%8E%20pytorch-openpose%20%E5%AE%9E%E7%8E%B0%20%E2%80%9C%E5%A4%9A%E7%9B%AE%E6%A0%87%E2%80%9D%20%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/</id>
    <published>2024-05-30T10:00:50.000Z</published>
    <updated>2024-05-31T11:28:55.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还记得上次通过 MediaPipe 估计人体姿态关键点驱动 3D 角色模型，虽然节省了动作 K 帧时间，但是网上还有一种似乎更方便的方法。MagicAnimate 就是其一，说是只要提供一张人物图片和一段动作视频 (舞蹈武术等)，就可以完成图片人物转视频。</p><p>于是我就去官网体验了一下，发现动作的视频长度不能超过 5 秒，当然，如果说要整长视频可以切多段处理再合成解决。主要的还是视频需要那种背景相对较纯的，不然提交表单一直报错，还有他也不能处理画面内多人物的姿态估计。<br><img src="https://p9-sign.toutiaoimg.com/tos-cn-i-axegupay5k/e9176ca25f5a49419f5e85a9ec9d5f92~noop.image?_iz=58558&from=article.pc_detail&lk3s=953192f4&x-expires=1717677039&x-signature=yACedCIQRHu20/9cXA3//3gY5Uk=" alt="图片"></p><h2 id="多目标人体姿态估计"><a href="#多目标人体姿态估计" class="headerlink" title="多目标人体姿态估计"></a>多目标人体姿态估计</h2><p>为什么我要弄多目标，其实是我有次拿了一舞团的视频用 MediaPipe 检测，发现一个画面中只能采集到一个人的动作数据。虽然齐舞可能就一套动作，其他的角色模型可以复制粘贴，但是有些编舞为了好看，伴舞也会根据节奏作不同的变化。所以说对于我用来采集舞蹈数据，这个很重要了，当然他也可以用在多人互动的 AR 游戏，或用在同时培训多人的动作规范检测等等场景。</p><p>要从单一人体检测到多人体姿态估计，开始我是打算用 YOLO 对画面中的多 Person 区块读出来，然后再将这些方块遍历交给 MediaPipe 对指定区域作人物动作节点识别。但是最后发现有现成的算法，就是 pytorch-openpose，所以果断先用这个来体验了一下。<br><img src="https://image-static.segmentfault.com/881/124/881124019-7e318e3ee86e9911_fix732" alt="图片"></p><h2 id="pytorch-openpose-简介"><a href="#pytorch-openpose-简介" class="headerlink" title="pytorch-openpose 简介"></a>pytorch-openpose 简介</h2><p>PyTorch-OpenPose 是一个基于 PyTorch 的开源库，它实现了 OpenPose 的功能，可以进行人的面部表情、躯干和四肢甚至手指的跟踪。它不仅适用于单人也适用于多人，同时具有较好的鲁棒性。要运行 PyTorch-OpenPose，需要安装支持 CUDA 的 PyTorch，以下例子有使用作者提供的预训练模型，通过拆分视频帧，绘制多人物动作线条保存图片，最后将图片合成为视频。<br><img src="https://image-static.segmentfault.com/299/647/2996476439-b4936cd61a9d4cf8_fix732" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>scikit-image</p></li><li><p>opencv-python</p></li><li><p>scipy</p></li><li><p>matplotlib</p></li><li><p>numpy<br><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-twdt4qpehh/79c5a0fd3b0e43638067cae91a6e5466~noop.image?_iz=58558&from=article.pc_detail&lk3s=953192f4&x-expires=1717677039&x-signature=SiLgy/YJilaurcPU4wYCkurW2ZY=" alt="图片"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h4 id="帧拆分绘制"><a href="#帧拆分绘制" class="headerlink" title="帧拆分绘制"></a>帧拆分绘制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> model</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">from</span> src.body <span class="keyword">import</span> Body</span><br><span class="line"><span class="keyword">from</span> src.hand <span class="keyword">import</span> Hand</span><br><span class="line"></span><br><span class="line">body_estimation = Body(<span class="string">&#x27;model/body_pose_model.pth&#x27;</span>)</span><br><span class="line">hand_estimation = Hand(<span class="string">&#x27;model/hand_pose_model.pth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Torch device: <span class="subst">&#123;torch.cuda.get_device_name()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&quot;D:/3code/6pytorch/opencv_demo/12_open_pose/11.mp4&quot;</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">640</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">indices = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  ret, oriImg = cap.read()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  candidate, subset = body_estimation(oriImg)</span><br><span class="line"></span><br><span class="line">  canvas = copy.deepcopy(oriImg)</span><br><span class="line">  canvas = util.draw_bodypose(canvas, candidate, subset)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># detect hand</span></span><br><span class="line">  hands_list = util.handDetect(candidate, subset, oriImg)</span><br><span class="line"></span><br><span class="line">  all_hand_peaks = []</span><br><span class="line">  <span class="keyword">for</span> x, y, w, is_left <span class="keyword">in</span> hands_list:</span><br><span class="line">      peaks = hand_estimation(oriImg[y:y+w, x:x+w, :])</span><br><span class="line">      peaks[:, <span class="number">0</span>] = np.where(peaks[:, <span class="number">0</span>]==<span class="number">0</span>, peaks[:, <span class="number">0</span>], peaks[:, <span class="number">0</span>]+x)</span><br><span class="line">      peaks[:, <span class="number">1</span>] = np.where(peaks[:, <span class="number">1</span>]==<span class="number">0</span>, peaks[:, <span class="number">1</span>], peaks[:, <span class="number">1</span>]+y)</span><br><span class="line">      all_hand_peaks.append(peaks)</span><br><span class="line"></span><br><span class="line">  canvas = util.draw_handpose(canvas, all_hand_peaks)</span><br><span class="line"></span><br><span class="line">  cv2.imwrite(<span class="string">&#x27;image_out/img_&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(indices), canvas)</span><br><span class="line">  indices += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;images:&quot;</span>, indices)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cv2.imshow(&#x27;demo&#x27;, canvas)#一个窗口用以显示原视频</span></span><br><span class="line">  <span class="comment"># if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;):</span></span><br><span class="line">  <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h4 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">from</span> pathlib import Path</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 将视频video_path分割成图片和音频文件，保存到save_path文件夹中</span><br><span class="line">def video2mp3_img(video_path, save_path, audio_path):</span><br><span class="line">    def <span class="built_in">video_split</span>(video_path, save_path):</span><br><span class="line">        if not os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">            os.<span class="built_in">makedirs</span>(save_path)</span><br><span class="line">        cap = cv2.<span class="built_in">VideoCapture</span>(video_path)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        while True:</span><br><span class="line">            ret, frame = cap.<span class="built_in">read</span>()</span><br><span class="line">            if ret:</span><br><span class="line">                cv2.<span class="built_in">imwrite</span>(save_path + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.jpg&#x27;</span>, frame)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        cap.<span class="built_in">release</span>()</span><br><span class="line"></span><br><span class="line">    if not os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">        os.<span class="built_in">makedirs</span>(save_path)</span><br><span class="line"></span><br><span class="line">    # 视频分割</span><br><span class="line">    <span class="built_in">video_split</span>(video_path, save_path)</span><br><span class="line"></span><br><span class="line">    # 视频转音频</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125; -vn -acodec copy &#123;&#125;/audio.mp3&quot;</span>.<span class="built_in">format</span>(video_path, audio_path))</span><br><span class="line">    os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125; -q:a 0 -map a &#123;&#125;/audio.mp3&quot;</span>.<span class="built_in">format</span>(video_path, audio_path))</span><br><span class="line">    # 音频转wav</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125;/audio.mp3 &#123;&#125;/audio.wav&quot;</span>.<span class="built_in">format</span>(save_path, save_path))</span><br><span class="line"></span><br><span class="line"># 将video_imgout文件夹中的图片合成视频并且添加音频文件video_img/audio.mp3</span><br><span class="line">def <span class="built_in">img2mp4</span>(image_out, save_name):</span><br><span class="line"></span><br><span class="line">    BASE_PATH = os.path.<span class="built_in">dirname</span>(__file__)</span><br><span class="line">    # 读取img size</span><br><span class="line">    img = cv2.<span class="built_in">imread</span>(<span class="string">&quot;&#123;&#125;/img_1.jpg&quot;</span>.<span class="built_in">format</span>(image_out))</span><br><span class="line"></span><br><span class="line">    imgInfo = img.shape</span><br><span class="line">    size = (imgInfo[<span class="number">1</span>], imgInfo[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    files = []</span><br><span class="line">    for dirpath, dirnames, filenames in os.<span class="built_in">walk</span>(image_out):</span><br><span class="line">        for filename in filenames:</span><br><span class="line">            fileName = <span class="built_in">Path</span>(os.path.<span class="built_in">join</span>(dirpath, filename))</span><br><span class="line">            files.<span class="built_in">append</span>(os.path.<span class="built_in">join</span>(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    files = [file.<span class="built_in">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) for file in files]</span><br><span class="line">    files.<span class="built_in">sort</span>(key=lambda x: <span class="built_in">int</span>(x.<span class="built_in">split</span>(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>].<span class="built_in">split</span>(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.<span class="built_in">VideoWriter_fourcc</span>(*<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">    videoWrite = cv2.<span class="built_in">VideoWriter</span>(f<span class="string">&#x27;videos/&#123;save_name&#125;.mp4&#x27;</span>, fourcc, <span class="number">25</span>, size)  # 写入对象 <span class="number">1</span> file name  <span class="number">3</span>: 视频帧率</span><br><span class="line"></span><br><span class="line">    for i in files:</span><br><span class="line">        img = cv2.<span class="built_in">imread</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        videoWrite.<span class="built_in">write</span>(img)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&#x27;videos/&#123;save_name&#125;.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    # 将video_img中的音频文件添加到视频中</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125;/videos/&#123;&#125;.mp4 -c:v copy -c:a aac -strict experimental &#123;&#125;/videos/&#123;&#125;.mp4&quot;</span>.<span class="built_in">format</span>(BASE_PATH, save_name, BASE_PATH, save_name))</span><br><span class="line"></span><br><span class="line">if __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    BASE = os.path.<span class="built_in">dirname</span>(__file__)</span><br><span class="line">    video_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;videos/yangguo.mp4&quot;</span>)  # 视频路径</span><br><span class="line">    save_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;video_img&quot;</span>)            # 拆解视频保存路径</span><br><span class="line">    audio_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;audio&quot;</span>)               # 分离音频保存路径</span><br><span class="line"></span><br><span class="line">    # 视频  ==&gt; imgs</span><br><span class="line">    # <span class="built_in">video2mp3_img</span>(video_path, save_path, audio_path)</span><br><span class="line"></span><br><span class="line">    # # imgs ==&gt; 视频</span><br><span class="line">    <span class="built_in">img2mp4</span>(<span class="string">&quot;image_out&quot;</span>, save_name=<span class="string">&#x27;ldh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/138/021/138021118-6444ad09edf84_fix732" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;还记得上次通过 MediaPipe 估计人体姿态关键点驱动 3D 角色模型，虽然节省了动作 K 帧时间，但是网上还有一种似乎更方便的方法。M</summary>
      
    
    
    
    <category term="人工智能" scheme="https://www.zerofc.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="计算机视觉" scheme="https://www.zerofc.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>后端搞 Cocos 小游戏开发的三点避坑指北</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E5%90%8E%E7%AB%AF%E6%90%9E%20Cocos%20%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E7%82%B9%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E5%90%8E%E7%AB%AF%E6%90%9E%20Cocos%20%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E7%82%B9%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/</id>
    <published>2024-05-30T09:30:50.000Z</published>
    <updated>2024-06-01T04:00:15.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先说一下我为什么要弄小游戏吧，首先无关工作，也无关兴趣，就只是想在副业里探索一下。没错就是做一个单机的小游戏上架到平台试一下水（薅广告费），不过说实话入局有点晚。    </p><p>早在 2019 年的时候，我也折腾过白鹭引擎还弄过小 demo，当时上架平台也简单。但是不知道为什么那时不顺手发布一下，录了个视频就没再管了（还是太年轻）。现在好了白鹭引擎倒了，而我也才意识到写文章做视频并不是我的强项。    </p><p>尽管现在大佬们都在 All in AI，但我还是把一个方向定在了小游戏上。选引擎二选一，挑了 Cocos Creator，之所以有下面的几个坑点，其根本原因是我没有系统性看他们的文档，所以记录一下以便后期捡起。</p><p><img src="https://image-static.segmentfault.com/289/491/2894911702-13ca6cc07d54a483_fix732" alt="图片"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><h3 id="脚本引入方式"><a href="#脚本引入方式" class="headerlink" title="脚本引入方式"></a>脚本引入方式</h3><p>这个问题是我在 Cocos Creator 资源管理器里，创建脚本时选的 js，而代码里却用了 import 的语法导致还排查了一段时间（离大谱），但下面的花括号还是要值得注意。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;util&#125; <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> startPanel <span class="keyword">from</span> <span class="string">&quot;./startPanel&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>使用 {} 的 import 允许你导入模块中的特定导出项，在这里是具体实例。</p></li><li><p>不使用 {} 的 import 允许你导入模块的默认导出，在这里只是类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gameManager from <span class="string">&quot;./gameManager&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; util &#125; from <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"></span><br><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">uiManager</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> game: gameManager = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@property</span>(cc.<span class="type">Node</span>)</span><br><span class="line">  ninja: cc.<span class="type">Node</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里gameManager只是类型约束</span></span><br><span class="line">  init(game: gameManager) &#123;</span><br><span class="line">      <span class="keyword">this</span>.game = game</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onLoad() &#123;</span><br><span class="line">      <span class="comment">// 这里直接使用util的静态方法</span></span><br><span class="line">      util.resize();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的相关设置"><a href="#组件的相关设置" class="headerlink" title="组件的相关设置"></a>组件的相关设置</h3><p>大部分组件的设置可以从文档里看到，如碰撞组件 BoxCollider，渲染组件里 Sprite（精灵组件设置图片等参数），但是如何要用到其自带滑块，并也用他的精灵图，位置在 internal 里（当时我找了老半天）。internal&gt;image&gt;default_progressbar_bg （进度条举例）<br><img src="https://image-static.segmentfault.com/367/995/3679952663-ac4509d619115e6f_fix732" alt="图片"></p><h3 id="音乐和音效"><a href="#音乐和音效" class="headerlink" title="音乐和音效"></a>音乐和音效</h3><h4 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h4><p>在 Main Camera 下添加一个空白节点，在该节点中添加 AudioSource 组件，Clip 就是从 assets 里拖入的 mp3 文件。最后将节点拖入脚本中（作为组件操作播放 &#x2F; 停止）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property(cc.AudioSource)</span></span><br><span class="line">bgAudio: cc.AudioSource = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.bgAudio.play();</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/376/296/3762963357-86e195dc5ef1c7cd_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/162/907/1629077713-e2945c60fa0ca937_fix732" alt="图片"></p><h4 id="添加操作音效"><a href="#添加操作音效" class="headerlink" title="添加操作音效"></a>添加操作音效</h4><p>在脚本中定义 AudioClip 属性，然后在 assets 中拖入 mp3 文件，最后在脚本中操作音效的播放与停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property(&#123;</span></span><br><span class="line"><span class="meta">  type: cc.AudioClip</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">audioWin: cc.AudioClip = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@property(&#123;</span></span><br><span class="line"><span class="meta">  type: cc.AudioClip</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">audioLose: cc.AudioClip = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">playSound(sName)&#123;</span><br><span class="line">      <span class="keyword">switch</span>(sName)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;click&quot;</span>:</span><br><span class="line">              <span class="comment">// cc.audioEngine.play(this.audioClick, false, 1);</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;win&quot;</span>:</span><br><span class="line">              cc.audioEngine.play(<span class="built_in">this</span>.audioWin, <span class="literal">false</span>, <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;lose&quot;</span>:</span><br><span class="line">              cc.audioEngine.play(<span class="built_in">this</span>.audioLose, <span class="literal">false</span>, <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><p>给游戏加了开始的背景音乐和操作音效后，用编辑器运行一切正常。但是当打包成某节小游戏或某信小游戏后，发现声音直接出不来，在我不断调试也依次报了下面一堆错误。</p></li></ul><p>cocos2d-js-min.js:1 Uncaught TypeError: this.bgAudio.play is not a function</p><p>Uncaught TypeError: this.bgAudio.play is not a functionUncaught TypeError: Cannot read properties of undefined (reading ‘playMusic’)</p><p>Uncaught TypeError: Cannot read properties of null (reading ‘play’)</p><p>cc.audioEngine 为 undefined </p><p><img src="https://image-static.segmentfault.com/466/447/466447791-12f219d0aed7c2e6_fix732" alt="图片"><br>一开始我以为是引擎版本原因，切换几次后发现根本不是，因为把代码放到相同版本下的其他项目下是正常的。最主要的是打包后报的错误真不好排查，导致在这个问题上花了很多时间。最后在比较打包后的 js 文件，才怀疑是不是有些引擎里的模块没搭建来，顺着这个思路果真是音乐音效的模块被我关了，前面我还一直以为是 this 指向那里的代码有问题。<br><img src="https://image-static.segmentfault.com/165/488/1654883427-cd9d6b6f143dd48f_fix732" alt="图片"><br>解决方法就是在构造发布下面的 “项目设置”，勾选 Audio 和 AudioSource 然后再打包就可以了。其实创建项目时，默认是全选的，但可能是我前期乱折腾去掉了几项。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>后续可能还有一些关于小游戏或 Unity 游戏制作踩坑内容，包括小游戏的证书申请和上架流程等等，如果你也玩 Cocos Creator 和 Unity3D，欢迎一起交流谈论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;先说一下我为什么要弄小游戏吧，首先无关工作，也无关兴趣，就只是想在副业里探索一下。没错就是做一个单机的小游戏上架到平台试一下水（薅广告费），</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.zerofc.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="https://www.zerofc.cn/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>YOLO+SlowFast+DeepSORT 简单实现视频行为识别</title>
    <link href="https://www.zerofc.cn/2024/05/30/YOLO+SlowFast+DeepSORT%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB/"/>
    <id>https://www.zerofc.cn/2024/05/30/YOLO+SlowFast+DeepSORT%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB/</id>
    <published>2024-05-30T09:13:50.000Z</published>
    <updated>2024-05-31T02:41:12.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间刷短视频看到过别人用摄像头自动化监控员工上班状态，比如标注员工是不是离开了工位，在位置上是不是摸鱼。虽然是段子，但是这个是可以用识别技术实现一下，于是我在网上找，知道发现了 SlowFast，那么下面就用 SlowFast 简单测试一下视频的行为识别。<br><img src="https://image-static.segmentfault.com/257/030/2570309068-55c4e732c2eef7c0" alt="图片"></p><h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><h4 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h4><p>YOLO 是一个基于深度学习神经网络的对象识别和定位算法，前面我也用 v5s 训练了标注的扑克牌，实现了图片或视频中的点数识别，这里就跳过了。</p><h4 id="DeepSORT"><a href="#DeepSORT" class="headerlink" title="DeepSORT"></a>DeepSORT</h4><p>DeepSORT 是一个实现目标跟踪的算法，其使用卡尔曼滤波器预测所检测对象的运动轨迹。也就是当视频中有多个目标，算法能知道上一帧与下一帧各目标对象的匹配，从而完成平滑锁定，而不是在视频播放或记录时，检测框一闪一闪的。</p><h4 id="SlowFast"><a href="#SlowFast" class="headerlink" title="SlowFast"></a>SlowFast</h4><p>SlowFast 是一个行为分类模型 (pytorchvideo 内置)，可以通过输入视频序列和检测框信息，输出每个检测框的行为类别。所以需要借助类似 YOLO 的多目标检测模型，当然 SlowFast 也可以自行标注数据集训练，来完成自定义的行为识别。<br><img src="https://image-static.segmentfault.com/246/054/2460547519-37b0b46d1390da83_fix732" alt="图片"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><p>读取视频或者摄像头中的图片</p></li><li><p>通过 yolo 检测出画面的目标</p></li><li><p>通过 deep_sort 对目标进行跟踪</p></li><li><p>通过 slowfast 识别出目标的动作</p></li><li><p>根据识别的动作进行业务处理等<br><img src="https://segmentfault.com/img/remote/1460000044520460" alt="图片"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>整个流程下来，除了安装 slowfast 依赖 (pytorchvideo) 外，deep_sort 可以下载 <a href="https://link.segmentfault.com/?enc=9Iklchu9T8HTmKq3zcD2Tw==.O56EkHKoYCiiKVdF8ECJYjUxxL0qj57oCnSzfkBT4jvuRcH65qFGGa7acc/179wWqnMmeCd0D6Fk0HhyUAXgRg==">https://github.com/wufan-tb/yolo_slowfast&#x2F;tree&#x2F;master&#x2F;deep_sort</a> 然后 import 到项目中。如果要实时处理摄像头的视频，可以通过采用多线程，单独开一个线程读摄像头并一秒保存一张图，再开一个线程用于处理保存的图片，最后将处理后的结果保存为视频，或者只是做一些业务操作，以下只是一个例子。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os,cv2,time,torch,random,pytorchvideo,warnings,argparse,math</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>,category=UserWarning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pytorchvideo.transforms.functional <span class="keyword">import</span> (</span><br><span class="line">    uniform_temporal_subsample,</span><br><span class="line">    short_side_scale_with_boxes,</span><br><span class="line">    clip_boxes_to_image,)</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms._functional_video <span class="keyword">import</span> normalize</span><br><span class="line"><span class="keyword">from</span> pytorchvideo.data.ava <span class="keyword">import</span> AvaLabeledVideoFramePaths</span><br><span class="line"><span class="keyword">from</span> pytorchvideo.models.hub <span class="keyword">import</span> slowfast_r50_detection</span><br><span class="line"><span class="keyword">from</span> deep_sort.deep_sort <span class="keyword">import</span> DeepSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVideoCapture</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, source</span>):</span><br><span class="line">        self.cap = cv2.VideoCapture(source)</span><br><span class="line">        self.idx = -<span class="number">1</span></span><br><span class="line">        self.end = <span class="literal">False</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        self.idx += <span class="number">1</span></span><br><span class="line">        ret, img = self.cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            self.stack.append(img)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.end = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> ret, img</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_tensor</span>(<span class="params">self, img</span>):</span><br><span class="line">        img = torch.from_numpy(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line">        <span class="keyword">return</span> img.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_video_clip</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>, <span class="string">&quot;clip length must large than 0 !&quot;</span></span><br><span class="line">        self.stack = [self.to_tensor(img) <span class="keyword">for</span> img <span class="keyword">in</span> self.stack]</span><br><span class="line">        clip = torch.cat(self.stack).permute(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">del</span> self.stack</span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="keyword">return</span> clip</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">self</span>):</span><br><span class="line">        self.cap.release()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tensor_to_numpy</span>(<span class="params">tensor</span>):</span><br><span class="line">    img = tensor.cpu().numpy().transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ava_inference_transform</span>(<span class="params"></span></span><br><span class="line"><span class="params">    clip, </span></span><br><span class="line"><span class="params">    boxes,</span></span><br><span class="line"><span class="params">    num_frames = <span class="number">32</span>, <span class="comment">#if using slowfast_r50_detection, change this to 32, 4 for slow </span></span></span><br><span class="line"><span class="params">    crop_size = <span class="number">640</span>, </span></span><br><span class="line"><span class="params">    data_mean = [<span class="number">0.45</span>, <span class="number">0.45</span>, <span class="number">0.45</span>], </span></span><br><span class="line"><span class="params">    data_std = [<span class="number">0.225</span>, <span class="number">0.225</span>, <span class="number">0.225</span>],</span></span><br><span class="line"><span class="params">    slow_fast_alpha = <span class="number">4</span>, <span class="comment">#if using slowfast_r50_detection, change this to 4, None for slow</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    boxes = np.array(boxes)</span><br><span class="line">    roi_boxes = boxes.copy()</span><br><span class="line">    clip = uniform_temporal_subsample(clip, num_frames)</span><br><span class="line">    clip = clip.<span class="built_in">float</span>()</span><br><span class="line">    clip = clip / <span class="number">255.0</span></span><br><span class="line">    height, width = clip.shape[<span class="number">2</span>], clip.shape[<span class="number">3</span>]</span><br><span class="line">    boxes = clip_boxes_to_image(boxes, height, width)</span><br><span class="line">    clip, boxes = short_side_scale_with_boxes(clip,size=crop_size,boxes=boxes,)</span><br><span class="line">    clip = normalize(clip,</span><br><span class="line">        np.array(data_mean, dtype=np.float32),</span><br><span class="line">        np.array(data_std, dtype=np.float32),) </span><br><span class="line">    boxes = clip_boxes_to_image(boxes, clip.shape[<span class="number">2</span>],  clip.shape[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">if</span> slow_fast_alpha <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        fast_pathway = clip</span><br><span class="line">        slow_pathway = torch.index_select(clip,<span class="number">1</span>,</span><br><span class="line">            torch.linspace(<span class="number">0</span>, clip.shape[<span class="number">1</span>] - <span class="number">1</span>, clip.shape[<span class="number">1</span>] // slow_fast_alpha).long())</span><br><span class="line">        clip = [slow_pathway, fast_pathway]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> clip, torch.from_numpy(boxes), roi_boxes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_one_box</span>(<span class="params">x, img, color=[<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>], text_info=<span class="string">&quot;None&quot;</span>,</span></span><br><span class="line"><span class="params">                 velocity=<span class="literal">None</span>, thickness=<span class="number">1</span>, fontsize=<span class="number">0.5</span>, fontthickness=<span class="number">1</span></span>):</span><br><span class="line">    c1, c2 = (<span class="built_in">int</span>(x[<span class="number">0</span>]), <span class="built_in">int</span>(x[<span class="number">1</span>])), (<span class="built_in">int</span>(x[<span class="number">2</span>]), <span class="built_in">int</span>(x[<span class="number">3</span>]))</span><br><span class="line">    cv2.rectangle(img, c1, c2, color, thickness, lineType=cv2.LINE_AA)</span><br><span class="line">    t_size = cv2.getTextSize(text_info, cv2.FONT_HERSHEY_TRIPLEX, fontsize , fontthickness+<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    cv2.rectangle(img, c1, (c1[<span class="number">0</span>] + <span class="built_in">int</span>(t_size[<span class="number">0</span>]), c1[<span class="number">1</span>] + <span class="built_in">int</span>(t_size[<span class="number">1</span>]*<span class="number">1.45</span>)), color, -<span class="number">1</span>)</span><br><span class="line">    cv2.putText(img, text_info, (c1[<span class="number">0</span>], c1[<span class="number">1</span>]+t_size[<span class="number">1</span>]+<span class="number">2</span>), </span><br><span class="line">                cv2.FONT_HERSHEY_TRIPLEX, fontsize, [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>], fontthickness)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deepsort_update</span>(<span class="params">Tracker, pred, xywh, np_img</span>):</span><br><span class="line">    outputs = Tracker.update(xywh, pred[:,<span class="number">4</span>:<span class="number">5</span>],pred[:,<span class="number">5</span>].tolist(),cv2.cvtColor(np_img,cv2.COLOR_BGR2RGB))</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_yolopreds_tovideo</span>(<span class="params">yolo_preds, id_to_ava_labels, color_map, output_video, vis=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i, (im, pred) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(yolo_preds.ims, yolo_preds.pred)):</span><br><span class="line">        <span class="keyword">if</span> pred.shape[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">for</span> j, (*box, cls, trackid, vx, vy) <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(cls) != <span class="number">0</span>:</span><br><span class="line">                    ava_label = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> trackid <span class="keyword">in</span> id_to_ava_labels.keys():</span><br><span class="line">                    ava_label = id_to_ava_labels[trackid].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ava_label = <span class="string">&#x27;Unknow&#x27;</span></span><br><span class="line">                text = <span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(trackid),yolo_preds.names[<span class="built_in">int</span>(cls)],ava_label)</span><br><span class="line">                color = color_map[<span class="built_in">int</span>(cls)]</span><br><span class="line">                im = plot_one_box(box,im,color,text)</span><br><span class="line">        im = im.astype(np.uint8)</span><br><span class="line">        output_video.write(im)</span><br><span class="line">        <span class="keyword">if</span> vis:</span><br><span class="line">            cv2.imshow(<span class="string">&quot;demo&quot;</span>, im)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">config</span>):</span><br><span class="line">    device = config.device</span><br><span class="line">    imsize = config.imsize</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># model = torch.hub.load(&#x27;D:/3code/6pytorch/opencv_demo/05_yolo_v5.6&#x27;, &#x27;yolov5s&#x27;, source=&#x27;local&#x27;, pretrained=True).to(device)</span></span><br><span class="line">    model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, <span class="string">&#x27;yolov5l6&#x27;</span>).to(device)</span><br><span class="line">    model.conf = config.conf</span><br><span class="line">    model.iou = config.iou</span><br><span class="line">    model.max_det = <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> config.classes:</span><br><span class="line">        model.classes = config.classes</span><br><span class="line">    </span><br><span class="line">    video_model = slowfast_r50_detection(<span class="literal">True</span>).<span class="built_in">eval</span>().to(device)</span><br><span class="line">    </span><br><span class="line">    deepsort_tracker = DeepSort(<span class="string">&quot;deep_sort/deep_sort/deep/checkpoint/ckpt.t7&quot;</span>)</span><br><span class="line">    ava_labelnames,_ = AvaLabeledVideoFramePaths.read_label_map(<span class="string">&quot;selfutils/temp.pbtxt&quot;</span>)</span><br><span class="line">    coco_color_map = [[random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>)]</span><br><span class="line"></span><br><span class="line">    vide_save_path = config.output</span><br><span class="line">    video=cv2.VideoCapture(config.<span class="built_in">input</span>)</span><br><span class="line">    width,height = <span class="built_in">int</span>(video.get(<span class="number">3</span>)),<span class="built_in">int</span>(video.get(<span class="number">4</span>))</span><br><span class="line">    video.release()</span><br><span class="line">    outputvideo = cv2.VideoWriter(vide_save_path,cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>), <span class="number">25</span>, (width,height))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;processing...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    cap = MyVideoCapture(config.<span class="built_in">input</span>)</span><br><span class="line">    id_to_ava_labels = &#123;&#125;</span><br><span class="line">    a=time.time()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> cap.end:</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        yolo_preds=model([img], size=imsize)</span><br><span class="line">        yolo_preds.files=[<span class="string">&quot;img.jpg&quot;</span>]</span><br><span class="line">        </span><br><span class="line">        deepsort_outputs=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yolo_preds.pred)):</span><br><span class="line">            temp=deepsort_update(deepsort_tracker,yolo_preds.pred[j].cpu(),yolo_preds.xywh[j][:,<span class="number">0</span>:<span class="number">4</span>].cpu(),yolo_preds.ims[j])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp)==<span class="number">0</span>:</span><br><span class="line">                temp=np.ones((<span class="number">0</span>,<span class="number">8</span>))</span><br><span class="line">            deepsort_outputs.append(temp.astype(np.float32))</span><br><span class="line">            </span><br><span class="line">        yolo_preds.pred=deepsort_outputs</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cap.stack) == <span class="number">25</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;processing <span class="subst">&#123;cap.idx // <span class="number">25</span>&#125;</span>th second clips&quot;</span>)</span><br><span class="line">            clip = cap.get_video_clip()</span><br><span class="line">            <span class="keyword">if</span> yolo_preds.pred[<span class="number">0</span>].shape[<span class="number">0</span>]:</span><br><span class="line">                inputs, inp_boxes, _=ava_inference_transform(clip, yolo_preds.pred[<span class="number">0</span>][:,<span class="number">0</span>:<span class="number">4</span>], crop_size=imsize)</span><br><span class="line">                inp_boxes = torch.cat([torch.zeros(inp_boxes.shape[<span class="number">0</span>],<span class="number">1</span>), inp_boxes], dim=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(inputs, <span class="built_in">list</span>):</span><br><span class="line">                    inputs = [inp.unsqueeze(<span class="number">0</span>).to(device) <span class="keyword">for</span> inp <span class="keyword">in</span> inputs]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    inputs = inputs.unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    slowfaster_preds = video_model(inputs, inp_boxes.to(device))</span><br><span class="line">                    slowfaster_preds = slowfaster_preds.cpu()</span><br><span class="line">                <span class="keyword">for</span> tid,avalabel <span class="keyword">in</span> <span class="built_in">zip</span>(yolo_preds.pred[<span class="number">0</span>][:,<span class="number">5</span>].tolist(), np.argmax(slowfaster_preds, axis=<span class="number">1</span>).tolist()):</span><br><span class="line">                    id_to_ava_labels[tid] = ava_labelnames[avalabel+<span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">        save_yolopreds_tovideo(yolo_preds, id_to_ava_labels, coco_color_map, outputvideo, config.show)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;total cost: &#123;:.3f&#125; s, video length: &#123;&#125; s&quot;</span>.<span class="built_in">format</span>(time.time()-a, cap.idx / <span class="number">25</span>))</span><br><span class="line">    </span><br><span class="line">    cap.release()</span><br><span class="line">    outputvideo.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;saved video to:&#x27;</span>, vide_save_path)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--input&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;/home/wufan/images/video/vad.mp4&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test imgs folder or video or camera&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;output.mp4&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;folder to save result imgs, can not use input folder&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--imsize&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">640</span>, <span class="built_in">help</span>=<span class="string">&#x27;inference size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.4</span>, <span class="built_in">help</span>=<span class="string">&#x27;object confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.4</span>, <span class="built_in">help</span>=<span class="string">&#x27;IOU threshold for NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;cuda&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;filter by class: --class 0, or --class 0 2 3&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--show&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;show img&#x27;</span>)</span><br><span class="line">    config = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> config.<span class="built_in">input</span>.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;using local camera.&quot;</span>)</span><br><span class="line">        config.<span class="built_in">input</span> = <span class="built_in">int</span>(config.<span class="built_in">input</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(config)</span><br><span class="line">    main(config)</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>demo 中用的是网络 yolo，默认下载位置 C:\Users\Administrator&#x2F;.cache\torch\hub\ultralytics_yolov5_master，而 slowfast 权重文件位置是 C:\Users\Administrator.cache\torch\hub\checkpoints\SLOWFAST_8x8_R50_DETECTION.pyth。 </p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>运行执行命令，出现 AttributeError: ‘Upsample’ object has no attribute ‘recompute_scale_factor’错误</p><p>根据提示，找到 torch 下的 upsampling.py，将 return F.interpolate (input, self.size, self.scale_factor, self.mode, self.align_corners 修改为return F.interpolate(input, self.size, self.scale_factor, self.mode, self.align_corners)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间刷短视频看到过别人用摄像头自动化监控员工上班状态，比如标注员工是不是离开了工位，在位置上是不是摸鱼。虽然是段子，但是这个是可以用识别</summary>
      
    
    
    
    <category term="人工智能" scheme="https://www.zerofc.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="计算机视觉" scheme="https://www.zerofc.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>三种方式，浅谈 Cocos Creator 的动画添加</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%B5%85%E8%B0%88%20Cocos%20Creator%20%E7%9A%84%E5%8A%A8%E7%94%BB%E6%B7%BB%E5%8A%A0/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%B5%85%E8%B0%88%20Cocos%20Creator%20%E7%9A%84%E5%8A%A8%E7%94%BB%E6%B7%BB%E5%8A%A0/</id>
    <published>2024-05-30T09:13:50.000Z</published>
    <updated>2024-06-01T03:59:51.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然 Cocos 的官方文档对动画系统做了较详细的介绍，但是对于刚接触的同学（比如我）来说还是不太友好。尽管如此，我就按文档加社区帖子一起实践了一下。为了方便忘记后能快速捡起，所以就用我的方式结合使用场景，简单介绍一下 Cocos Creator 动画添加的三种方式。</p><p><img src="https://image-static.segmentfault.com/142/822/1428222877-b05dc3acfe95cd47" alt="图片"></p><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><p>这个是 Cocos Creator 动画系统自带的一种对节点进行标准位移、旋转、缩放动画操作。可以用来制作一些按钮加亮，引导之类的业务型动画。</p><p><img src="https://image-static.segmentfault.com/213/163/2131635919-325fe6db8ba9ee39" alt="图片"></p><h4 id="创建节点并挂载-“Animation”-组件"><a href="#创建节点并挂载-“Animation”-组件" class="headerlink" title="创建节点并挂载 “Animation” 组件"></a>创建节点并挂载 “Animation” 组件</h4><p>添加组件 &gt; 其他组件 &gt; Animation，然后打开动画编辑器，再点击 “新建 Clip 文件”，保存后放在 “assets” 下 “animations”，后缀为.anim 的文件。<br><img src="https://image-static.segmentfault.com/360/042/3600423541-68f2772d530ab950_fix732" alt="图片"></p><h4 id="动画编辑"><a href="#动画编辑" class="headerlink" title="动画编辑"></a>动画编辑</h4><p>进入编辑后，找到属性列表，点击 “Add Property”，选择列表的 “position，width，coclor” 等属性，点击右侧菜单按钮，可以插入关键帧，删除关键帧，清空关键帧等，添加一帧就可以在属性检查器对应节点的属性进行调节。<br><img src="https://image-static.segmentfault.com/826/974/826974519-10419ecf40822c0b_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/199/406/1994064641-b6d320e09536169e_fix732" alt="图片"></p><h4 id="挂载动画剪辑"><a href="#挂载动画剪辑" class="headerlink" title="挂载动画剪辑"></a>挂载动画剪辑</h4><p>将已经编辑好的动画剪辑文件 (.anim 后缀)，拖入到节点动画组件的 animation-clip 或 Default Clip 中。4. 脚本控制创建 ts 文件，将以下代码的脚本挂载到与动画相同的节点上（当然也可以制作预设体）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(cc.<span class="type">Animation</span>);</span><br><span class="line">        <span class="comment">// start_btn_dance 动画剪辑名称</span></span><br><span class="line">        anim.play(&#x27;start_btn_dance&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h2><p>帧动画也是 Cocos Creator 自带的编辑功能，就是在指定时间内循环各种动作或样式的图片，当然前期要准备好序列帧图片放到 assets 下。</p><h4 id="创建-Animation-组件和动画剪辑"><a href="#创建-Animation-组件和动画剪辑" class="headerlink" title="创建 Animation 组件和动画剪辑"></a>创建 Animation 组件和动画剪辑</h4><p>这部分和上面的属性动画操作一样<br><img src="https://image-static.segmentfault.com/329/445/3294454098-84728ec1e33dc20e" alt="图片"></p><h4 id="动画编辑-1"><a href="#动画编辑-1" class="headerlink" title="动画编辑"></a>动画编辑</h4><p>这里在属性列表 Add Property 要选择 “cc.Sprite.spriteFrame”，然后将资源里的序列图片一张一张放入关键帧里。<br><img src="https://image-static.segmentfault.com/592/234/59223440-1a88d5a3c2c0c2c8_fix732" alt="图片"></p><h4 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>如果只是用于播放动画的和上面的也一样，但是动画事件需要分开说一下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="comment">// 获取当前节点动画组件</span></span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(cc.<span class="type">Animation</span>);</span><br><span class="line">        <span class="comment">// 播放指定动画剪辑</span></span><br><span class="line">        anim.play(&#x27;monster&#x27;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.node.on(&#x27;onAnimCompleted&#x27;, this.onAnimCompleted, this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画事件，接收两个参数</span></span><br><span class="line">    onAnimCompleted(num, str) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;start anim completed end~&quot;</span>);</span><br><span class="line">        console.log(num);</span><br><span class="line">        console.log(str);</span><br><span class="line">        <span class="comment">//console.log(&#x27;onAnimCompleted: param1[%s], param2[%s]&#x27;, num, string);</span></span><br><span class="line">        <span class="comment">//console.log(&#x27;onAnimCompleted: this is a test event12345&#x27; + num);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h4><p>确切的说应该是动画帧事件，就是在指定帧上添加一个事件（可以预留参数），当播放到该帧时触发。当前触发是在脚本里控制，这种一般用来做比如一个角色击杀时，要触发一个大招特效动画等。<br><img src="https://image-static.segmentfault.com/211/485/2114857068-21a54bf6832085d6_fix732" alt="图片"></p><h2 id="第三方工具动画"><a href="#第三方工具动画" class="headerlink" title="第三方工具动画"></a>第三方工具动画</h2><p>通过第三方的工具制作动画后导入到 Cocos Creator， 官方提供对 Spine 和 DragonBones 的支持。下面以 Spine 为例，从工具内导出，到 Cocos 脚本控制进行演示。</p><h4 id="Spine-导出"><a href="#Spine-导出" class="headerlink" title="Spine 导出"></a>Spine 导出</h4><p>可以直接用工具提供的示例，然后选择导出，注意是 json 格式文件。<br><img src="https://image-static.segmentfault.com/216/635/2166353095-0633de7f2b3da2de_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/304/479/3044791017-b16b919adfeb94bd_fix732" alt="图片"></p><h4 id="Cocos-Creator-导入"><a href="#Cocos-Creator-导入" class="headerlink" title="Cocos Creator 导入"></a>Cocos Creator 导入</h4><p>将上面从 Spine 导出的三个文件整成一文件夹放入 cocos 项目下 assets 的资源下，然后找到后缀 json 文件拖入层级管理器中。<br><img src="https://image-static.segmentfault.com/593/848/593848238-159b87dc7f162bbb_fix732" alt="图片"></p><h4 id="脚本控制-1"><a href="#脚本控制-1" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>因为在 Spine 已经做好了动画，皮肤和帧事件，所以脚本也就是对动画的播放，操作换肤和事件回调等。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(sp.<span class="type">Skeleton</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空动画管道</span></span><br><span class="line">        <span class="comment">//anim.clearTracks();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加动作</span></span><br><span class="line">        anim.addAnimation(<span class="number">0</span>, &#x27;run&#x27;, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">/*anim.addAnimation(0, &#x27;walk&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;jump&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;idle&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;head-turn&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;fall&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;crouch&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;attack&#x27;, false, 0);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止动画</span></span><br><span class="line">        <span class="comment">/*let SpEnt: sp.spine.TrackEntry = anim.setAnimation(0, &#x27;run&#x27;, false);</span></span><br><span class="line"><span class="comment">        SpEnt.animationStart = SpEnt.animationEnd;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换肤</span></span><br><span class="line">        <span class="comment">//anim.setSkin(&quot;default&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听动画开始</span></span><br><span class="line">        anim.setStartListener(function () &#123;</span><br><span class="line">            console.log(<span class="string">&quot;animate start~&quot;</span>);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听动画结束</span></span><br><span class="line">        anim.setCompleteListener(function () &#123;</span><br><span class="line">            console.log(&#x27;animater end~&#x27;);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/284/953/2849534078-cb1e30ab9f689052" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然 Cocos 的官方文档对动画系统做了较详细的介绍，但是对于刚接触的同学（比如我）来说还是不太友好。尽管如此，我就按文档加社区帖子一起实</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.zerofc.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="https://www.zerofc.cn/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>初探 Cocos Creator： 碰撞与物理系统</title>
    <link href="https://www.zerofc.cn/2024/05/30/%E5%88%9D%E6%8E%A2%20Cocos%20Creator%EF%BC%9A%20%E7%A2%B0%E6%92%9E%E4%B8%8E%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.zerofc.cn/2024/05/30/%E5%88%9D%E6%8E%A2%20Cocos%20Creator%EF%BC%9A%20%E7%A2%B0%E6%92%9E%E4%B8%8E%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-05-30T08:40:50.000Z</published>
    <updated>2024-05-31T02:45:57.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道你刚开始玩碰撞时，会不会遇到始终无法触发碰撞事件？玩物理系统时，自由落体的刚体会穿过 “地面” 刚体等情况？没错我全都遇到过，那么下面我就用红蓝色方块，简单实战一下 Cocos Creator 的碰撞与物理系统。<br><img src="https://image-static.segmentfault.com/128/723/128723897-3fb474755484344a" alt="图片"></p><h2 id="场景创建"><a href="#场景创建" class="headerlink" title="场景创建"></a>场景创建</h2><p>场景很简单，一个白色背景，两个红蓝色玩家，和一个绿色大草地。创建的方式也很简单，全部采用 Sprite 单色。节点创建层级管理器 -&gt;Canvas 右键 -&gt; 创建节点 -&gt; 创建渲染节点 -&gt;Sprite（单色）。<br><img src="https://image-static.segmentfault.com/439/006/439006136-7f39b5701af77d97" alt="图片"></p><h4 id="颜色填充"><a href="#颜色填充" class="headerlink" title="颜色填充"></a>颜色填充</h4><p>在属性检查器，找到 Node 下的 Color，选择色盘里的一颜色即可。分组由于物理和碰撞中都要用到，这里就提前给两个玩家和绿草地创建分组并分配好。在属性检查器的 Node 中，找到 Group 点击编辑再添加，如下图。<br><img src="https://image-static.segmentfault.com/279/757/2797579645-dc8cdfb5e971b809_fix732" alt="图片"></p><h4 id="碰撞匹对"><a href="#碰撞匹对" class="headerlink" title="碰撞匹对"></a>碰撞匹对</h4><p>将三个分组进行碰撞的匹对，一定要勾选这个，不然后面测试碰撞无法触发回调，而是直接穿过另一个物体。<br><img src="https://image-static.segmentfault.com/180/036/1800364862-0d128f15a5990bc9_fix732" alt="图片"></p><h2 id="碰撞系统测试"><a href="#碰撞系统测试" class="headerlink" title="碰撞系统测试"></a>碰撞系统测试</h2><h4 id="碰撞组件添加"><a href="#碰撞组件添加" class="headerlink" title="碰撞组件添加"></a>碰撞组件添加</h4><p>碰撞组件有三种，Box（盒状）、Circle（圆形）、Polygon（多边形），可以根据不同的物体形状选择对应组件类型，比如像赛车的就可以选盒状，合成西瓜的那种就可以选圆形。在层级管理器中选中节点，进入属性检查器，添加组件，选择碰撞组件，Box Collider。<br><img src="https://image-static.segmentfault.com/415/221/4152218047-2d044764b41e891c" alt="图片"></p><h4 id="参数介绍（Box）"><a href="#参数介绍（Box）" class="headerlink" title="参数介绍（Box）"></a>参数介绍（Box）</h4><ul><li><p>Tag： 用于给在同一节点下，标识不同碰撞组件的</p></li><li><p>Offset： 碰撞的中心点位置，用于给碰撞范围定位</p></li><li><p>Size： 默认是物品节点的大小，其实是物体碰撞的范围大小<br><img src="https://image-static.segmentfault.com/592/422/592422880-7b78c0c2399be56e_fix732" alt="图片"><br>脚本测试创建脚本，开启碰撞监听和碰撞范围绘制 Debug，update 中添加红色方块向右移动，设置碰撞产生的回调。最后拖入节点的属性面板中，前提相关物品都添加了碰撞组件，并且也勾选了碰撞匹对。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 碰撞系统（绘制和监听开启）</span></span><br><span class="line">      <span class="keyword">var</span> manager = cc.<span class="property">director</span>.<span class="title function_">getCollisionManager</span>();</span><br><span class="line">      manager.<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">      manager.<span class="property">enabledDebugDraw</span> = <span class="literal">true</span>;</span><br><span class="line">      manager.<span class="property">enabledDrawBoundingBox</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">dt</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span> += dt * <span class="number">50</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞产生的时候调用</span></span><br><span class="line"><span class="comment">   * param  &#123;Collider&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * param  &#123;Collider&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">onCollisionEnter</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_enter_1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onCollisionStay</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_stay_2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞结束后调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onCollisionExit</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_exit_3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="物理系统测试"><a href="#物理系统测试" class="headerlink" title="物理系统测试"></a>物理系统测试</h2><h4 id="物理碰撞组件添加"><a href="#物理碰撞组件添加" class="headerlink" title="物理碰撞组件添加"></a>物理碰撞组件添加</h4><p>选择物理组件下的 Box（添加组件 -&gt; 物理组件 -&gt;Collider-&gt;Box），碰撞 + 刚体。参数就不介绍了，在编辑器里悬浮文字就可以看到用法描述，不过 刚体（RigidBody）的 “Type” 需要注意一下。<br><img src="https://image-static.segmentfault.com/306/275/3062755745-0c947fd4c11cf6e7_fix732" alt="图片"></p><h4 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h4><p>脚本中开启物理系统才可以看到自由落体效果，而碰撞监听需要在属性检查器的刚体中 “Enabled Contact Listen” 开启。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 开启物理系统</span></span><br><span class="line">      cc.<span class="property">director</span>.<span class="title function_">getPhysicsManager</span>().<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 物理物品绘制</span></span><br><span class="line">      <span class="comment">/*cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_pairBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_centerOfMassBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_jointBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_shapeBit;*/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">dt</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**刚体的属性Enabled Contact Listen必须开启**/</span></span><br><span class="line">  <span class="comment">// 只在两个碰撞体开始接触时被调用一次</span></span><br><span class="line">  <span class="title function_">onBeginContact</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~collider start1111111111111111111111~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只在两个碰撞体结束接触时被调用一次</span></span><br><span class="line">  <span class="title function_">onEndContact</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~collider end2222222222222222222222222~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次将要处理碰撞体接触逻辑时被调用</span></span><br><span class="line">  <span class="title function_">onPreSolve</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~pre collider3333333333333333333333333~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次处理完碰撞体接触逻辑时被调用</span></span><br><span class="line">  <span class="title function_">onPostSolve</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~solve44444444444444444444444444444444~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://image-static.segmentfault.com/128/723/128723897-3fb474755484344a" alt="图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知道你刚开始玩碰撞时，会不会遇到始终无法触发碰撞事件？玩物理系统时，自由落体的刚体会穿过 “地面” 刚体等情况？没错我全都遇到过，那么下面</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.zerofc.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Cocos" scheme="https://www.zerofc.cn/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>hexo实战：（三）独立博客运营总结</title>
    <link href="https://www.zerofc.cn/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://www.zerofc.cn/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/</id>
    <published>2024-05-30T08:13:50.000Z</published>
    <updated>2024-06-21T01:43:15.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过前面两个步骤，完成了静态博客从搭建到基本功能添加和界面优化。那么，这次就要介绍一下搭在GitHub上的静态博客如何运营推广。也就是如何让网站被各大搜索引擎收录？如何提高网站权重，提高收录量？</p><h2 id="网站收录"><a href="#网站收录" class="headerlink" title="网站收录"></a>网站收录</h2><h4 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h4><p>站长相关的平台有：某度站长工具、360站长平台、搜狗资源平台、必应网站管理员工具、谷歌站长工具等。列出的五个平台，可以按自身情况提交，提交方法也大同小异，以下以某度为例。</p><h4 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h4><p>添加某度、360、某狗等引擎收录，进入某度的站长工具，点击添加网站。流程就三步，输入网站，设置站点属性，最后验证网站。而验证网站又有三种方式，分别是文件验证、HTML标签验证、CNAME验证，我这里选择文件验证。</p><p>选择文件验证后，下载baidu_verify_xxxx.html文件，然后将该文件放入theme&#x2F;主题包名&#x2F;source&#x2F;根目录下。重新编译生成静态文件，而验证文件会被原封不动地复制到编译后博客根目录地public下，最后部署就完成验证了。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606113057594.png" alt="image-20240606113057594"></p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606135833994.png" alt="image-20240606135833994"></p><h4 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h4><p>进入站长工具的 “普通收录”，这里我们可以向搜索引擎主动提交网站的链接地址。其中提交的方式有三种，分别是API提交、sitemap、手动提交，而最方便快捷的就是给引擎提供sitemap，也就是网站地图，里面按固定格式放满网站上需要被收录的链接。但是某度对于这种方式有限制，需要站点达到一定量才可以使用sitemap，当然也不妨碍我们先做出地图。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240607091525644.png" alt="image-20240607091525644"></p><h5 id="安装地图生成插件"><a href="#安装地图生成插件" class="headerlink" title="安装地图生成插件"></a>安装地图生成插件</h5><p>以下两个插件都可以生成sitemap，但是generator-sitemap相比另一个多了一种txt格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h5 id="配置url"><a href="#配置url" class="headerlink" title="配置url"></a>配置url</h5><p>设置这个可以在sitemap中指定网站的地址，如果绑定了个性化域名就填写改域名。不然放入github自带域名，可能被国内引擎屏蔽，也可能由自带域名重定向个性化域名，同样都影响网站的收录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://www.zerofc.cn</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240607105629724.png" alt="image-20240607105629724"></p><h5 id="配置地图插件"><a href="#配置地图插件" class="headerlink" title="配置地图插件"></a>配置地图插件</h5><p>打开hexo的_config.yml添加下面对应插件的参数，用于配置sitemap文件的保存位置。其中上面的插件可通过txt和xml决定需要的格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># generator-sitemap插件</span><br><span class="line">sitemap:</span><br><span class="line">    #path: sitemap.txt</span><br><span class="line">    path: sitemap.xml</span><br><span class="line"></span><br><span class="line"># hexo sitemap百度网站地图</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h5 id="清理与生成"><a href="#清理与生成" class="headerlink" title="清理与生成"></a>清理与生成</h5><p>插件完毕后再重新编译打包的同时，在public下就会生成sitemap的xml文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606133915299.png" alt="image-20240606133915299"></p><h5 id="创建robots文件"><a href="#创建robots文件" class="headerlink" title="创建robots文件"></a>创建robots文件</h5><p>robots.txt 文件是一个简单的文本文件，用于指示搜索引擎爬虫如何访问和索引您的网站。创建后放入hexo主题包下的source，这样每次打包后都会在静态项目的根目录下，以下是一个简单的robots.txt文件配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *  </span><br><span class="line">Disallow: /video/  </span><br><span class="line">Disallow: /archives/</span><br></pre></td></tr></table></figure><p>上述示例告诉所有搜索引擎爬虫（<code>User-agent: *</code>）不要索引 <code>/video/</code> 和 <code>/archives/</code> 目录下的内容。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240607145358947.png" alt="image-20240607145358947"></p><h2 id="错误合集"><a href="#错误合集" class="headerlink" title="错误合集"></a>错误合集</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">On branch master</span><br></pre></td></tr></table></figure><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>windows下的换行符是CRLF而Unix的换行符格式是LF。git默认支持LF。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><h2 id="抱团友情链接"><a href="#抱团友情链接" class="headerlink" title="抱团友情链接"></a>抱团友情链接</h2><p>最好是有收录或网站权重高的，欢迎大家找我互链！</p><h2 id="添加广告联盟"><a href="#添加广告联盟" class="headerlink" title="添加广告联盟"></a>添加广告联盟</h2><p>这个后续等流量上来了再更新。</p><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><h4 id="markdown中插入视频"><a href="#markdown中插入视频" class="headerlink" title="markdown中插入视频"></a>markdown中插入视频</h4><p>启动源代码模式，输入下面代码后再切回。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606204325844.png" alt="image-20240606204325844"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://www.zerofc.cn/zd_image_bed/img/11.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span>  </span><br><span class="line">  Your browser does not support the video tag.  </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><video width="320" height="240" controls>    <source src="https://www.zerofc.cn/zd_image_bed/img/11.mp4" type="video/mp4">    Your browser does not support the video tag.  </video>]]></content>
    
    
    <summary type="html">介绍搭建在GitHub上的静态博客如何运营推广</summary>
    
    
    
    <category term="前端开发" scheme="https://www.zerofc.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Hexo" scheme="https://www.zerofc.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
