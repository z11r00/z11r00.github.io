<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spine动画教程：皮肤制作</title>
      <link href="/2025/04/08/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/"/>
      <url>/2025/04/08/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>搁了很久的抖音直播小玩法开发，最近又让我想起来了。由于是初次尝试，所以我将开发费用的预算降到为零。不但不买服务器采用UnitySDK的指令直推，而且游戏的资产也用AI生成，主打省时又省钱。</p><p>但是图片有了，动画还是得自己做，于是我又从零开始学了一下Spine动画制作。整个过程也是有很多值得记录下来的，比如制作皮肤的教程，网上还是比较少，问DeepSeek也不全，做完后导入Unity3D报错等问题。所以，跟着我这篇文章动手走一遍，还是能快速制作动画皮肤的。</p><h2 id="二、工具"><a href="#二、工具" class="headerlink" title="二、工具"></a>二、工具</h2><p>Spine 3.8.75</p><p>spine-unity-3.8-2021-11-10</p><h2 id="三、皮肤制作"><a href="#三、皮肤制作" class="headerlink" title="三、皮肤制作"></a>三、皮肤制作</h2><p>在动手制作前，可以先对照一下自己的Spine版本，和Unity3D的Spine插件版本，后面我会说一个很有意思的导入问题，那下面就开始如何制作皮肤了。</p><h3 id="1-简单的图片皮肤示例"><a href="#1-简单的图片皮肤示例" class="headerlink" title="1.简单的图片皮肤示例"></a>1.简单的图片皮肤示例</h3><h4 id="1-1-画面创建"><a href="#1-1-画面创建" class="headerlink" title="1.1.画面创建"></a>1.1.画面创建</h4><p>导入两张形状一致，但纹理不同的图片，然后两张图全部绑定在一个骨骼下，层级结构参考下图。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408165643830.png" alt="image-20250408165643830"></p><h4 id="1-2-添加皮肤"><a href="#1-2-添加皮肤" class="headerlink" title="1.2.添加皮肤"></a>1.2.添加皮肤</h4><p>在层级树的皮肤中，点击创建两个皮肤，名字自定义。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408165839140.png" alt="image-20250408165839140"></p><h4 id="1-3-创建皮肤占位符"><a href="#1-3-创建皮肤占位符" class="headerlink" title="1.3.创建皮肤占位符"></a>1.3.创建皮肤占位符</h4><p>在层级树中选择一个皮肤，点击左边的 “眼睛（小圆点，表显示）”，然后选中某插槽下的一个附件（图片）。选择后再点击下面的 “新建” -&gt; “皮肤占位符”。，名字自定。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408171257613.png" alt="image-20250408171257613"></p><h4 id="1-4-检查皮肤切换"><a href="#1-4-检查皮肤切换" class="headerlink" title="1.4.检查皮肤切换"></a>1.4.检查皮肤切换</h4><p>通过点击皮肤左边的眼睛按钮，看看能不能展开皮肤占位符里的附件，因为给附件添加皮肤占位符后，就被折叠进占位符中了。</p><h4 id="1-5-创建动画"><a href="#1-5-创建动画" class="headerlink" title="1.5.创建动画"></a>1.5.创建动画</h4><p>进入动画模式后，点击两张图片上的骨骼，在摄影表中给该骨骼添加移动的关键帧，最后我们在播放时就可以切换皮肤了。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408171833203.png" alt="image-20250408171833203"></p><h3 id="2-简单的网格皮肤演示"><a href="#2-简单的网格皮肤演示" class="headerlink" title="2.简单的网格皮肤演示"></a>2.简单的网格皮肤演示</h3><p>装配和上面图片的皮肤示例一样，但是在绑定骨骼前，现对图片网格处理（蒙皮），然后绑骨骼，刷权重。</p><h4 id="2-1-网格编辑"><a href="#2-1-网格编辑" class="headerlink" title="2.1.网格编辑"></a>2.1.网格编辑</h4><p>点击图片-&gt;勾选网格-&gt;编辑网格-&gt;新建，然后对图片的轮廓围起来（像PS里的钢笔一样操作）。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408172921833.png" alt="image-20250408172921833"></p><h4 id="2-2-添加骨骼"><a href="#2-2-添加骨骼" class="headerlink" title="2.2.添加骨骼"></a>2.2.添加骨骼</h4><p>选择自定义的根骨骼，按照预期的动画效果，添加几个骨骼。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408173418643.png" alt="image-20250408173418643"></p><h4 id="2-3-给网格绑定骨骼"><a href="#2-3-给网格绑定骨骼" class="headerlink" title="2.3.给网格绑定骨骼"></a>2.3.给网格绑定骨骼</h4><p>选中网格，点击添加骨骼上方的 “权重” 按钮，弹出一个权重窗口，点击绑定，然后将下面添加的几个骨骼选中（按ctrl多选），最后再点一下绑定。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408173830107.png" alt="image-20250408173830107"></p><h4 id="2-4-添加皮肤"><a href="#2-4-添加皮肤" class="headerlink" title="2.4.添加皮肤"></a>2.4.添加皮肤</h4><p>第二张图片重复前面的添加网格，但是不用再新建骨骼，和第一张共用，皮肤切换的作用就在这里了，多个皮肤共用一套骨骼动画。</p><p>就像我们玩游戏的时候，不管怎么换皮肤，英雄的招式是一样的，当然打击特效可能也拆分出了皮肤除外。</p><h4 id="2-5-创建皮肤占位符"><a href="#2-5-创建皮肤占位符" class="headerlink" title="2.5.创建皮肤占位符"></a>2.5.创建皮肤占位符</h4><p>皮肤添加和占位符创建和前面的图片皮肤示例一样，只是这次是点击网格而不是附件了。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408175516573.png" alt="image-20250408175516573"></p><h2 id="四、导出与导入"><a href="#四、导出与导入" class="headerlink" title="四、导出与导入"></a>四、导出与导入</h2><p>导出是在Spine中导出能在Unity3D中使用的动画文件，这里要注意格式和添加方法，还有前面提到的导入游戏引擎中报错问题。</p><h3 id="Spine导出"><a href="#Spine导出" class="headerlink" title="Spine导出"></a>Spine导出</h3><p>点击导出，选择 “JSON”，确定输出文件夹后，点击 “打包设置”，为了被Unity3D支持，图集扩展名要加上 “.txt”。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408191026555.png" alt="image-20250408191026555"></p><h3 id="导入Unity3D"><a href="#导入Unity3D" class="headerlink" title="导入Unity3D"></a>导入Unity3D</h3><p>从Spine导出后有三个文件，分别是atlas.txt的图集文件，json数据和png贴图。</p><p>放入一个文件夹后直接复制到Unity3D项目的Resources后，游戏引擎会再生成一个atlas和skeletonData的asset文件，以及一个mat文件。</p><p>进入编辑器中，只需要将SkeletonData.asset拖到场景中即可。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408192003300.png" alt="image-20250408192003300"></p><h3 id="导入运行报错"><a href="#导入运行报错" class="headerlink" title="导入运行报错"></a>导入运行报错</h3><p>当我第一次导进去后就提示错误：Error reading skeleton JSON file for SkeletonData asset: skeleton_SkeletonData Unsupported skeleton data, please export with a newer version of Spine。</p><p>根据提示是导出的Spine文件版本太低，其实就是我安装的Spine-Unity插件和Spine3.8.75不匹配。一般的做法就是换新版Spine，或安装低版本Unity插件，但是我这次就对比了一下可以使用的spine动画json文件。</p><p>发现格式都差不多，唯一不同的只是skeleton下的spine版本号，原本的是3.8.75，当我改成3.8.99重新加载进去后竟然就可以了。这整得我也是很无语，就只是校验了一下版本号，我还以为是格式不对。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20250408192801332.png" alt="image-20250408192801332"></p><h2 id="五、写在后面"><a href="#五、写在后面" class="headerlink" title="五、写在后面"></a>五、写在后面</h2><p>其实想要快速制作游戏动画，还有以一种更好的方法，那就是序列帧动画。首先将AI生成的图片，再输入指定动作的提示词，用图生视频。然后将视频拆成图片帧，最后只需要挑选一些抠图做成图片精灵就可以了。</p><p>虽然我一开始就是这样想的，但是了解到Spine优点后就放弃这种方式。第二个原因，通过学习Spine我可以可持续制作动画贴图，还能上传到平台赚取收益，以后有时间我也会不定时地更新Spine动画制作小案例。</p><p><img src="/img/Spine%E5%8A%A8%E7%94%BB%E6%95%99%E7%A8%8B%EF%BC%9A%E7%9A%AE%E8%82%A4%E5%88%B6%E4%BD%9C/image-20240805201033707.png" alt="image-20250408192801332"></p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Unity3D导入Spine动画</title>
      <link href="/2025/02/26/%E5%A6%82%E4%BD%95%E5%9C%A8Unity3D%E5%AF%BC%E5%85%A5Spine%E5%8A%A8%E7%94%BB/"/>
      <url>/2025/02/26/%E5%A6%82%E4%BD%95%E5%9C%A8Unity3D%E5%AF%BC%E5%85%A5Spine%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>《如何在Unity3D项目中导入Spine动画》，虽然在网上有很多这种文章，直接将问题交给<strong>DeepSeek</strong>也能得到具体的操作流程，但是照着他们提供的方法还是能遇到几个问题，比如：</p><ol><li>AI回答没有提到Unity无法识别.altas，要修改动画文件后缀部分；</li><li>导入到游戏场景中，动画总是被Canvas的背景图或元素挡住，层级低；</li></ol><p>所以针对这几点问题和操作流程，再带上<strong>Spine的基本操作</strong>，我整理成文章，那么，下面先参照一下我的工具版本开始。</p><p> <img src="https://image-static.segmentfault.com/299/005/2990051870-67be8f22347ee_fix732" alt="img"></p><h1 id="二、工具"><a href="#二、工具" class="headerlink" title="二、工具"></a>二、工具</h1><ul><li>Unity3D 2020.3</li><li>Spine 3.8.75</li><li>spine-unity-3.8-2021-11-10</li><li>2D场景游戏</li></ul><h1 id="三、Spine操作"><a href="#三、Spine操作" class="headerlink" title="三、Spine操作"></a>三、Spine操作</h1><p>因为练习时，多数动画文件是直接下载的别人制作好的json导出文件（非工程）。所以如果要在游戏场景前看效果，可以先导进Spine工具中查看一下。</p><h3 id="json导出文件目录"><a href="#json导出文件目录" class="headerlink" title="json导出文件目录"></a>json导出文件目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fileName.altas // 图集描述文件</span><br><span class="line">fileName.json  // 骨骼动画数据</span><br><span class="line">fileName.png   // 纹理图集</span><br></pre></td></tr></table></figure><h3 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h3><p>1.导入数据&gt;选择“JSON或二进制文件”&gt;文件选“json”格式文件&gt;导入</p><p>2.保存更改&gt;浏览&gt;自定义名称的“spine”格式文件</p><p><img src="https://image-static.segmentfault.com/319/894/3198943486-67bea4a8be2be_fix732" alt="img"></p><h3 id="展示纹理"><a href="#展示纹理" class="headerlink" title="展示纹理"></a>展示纹理</h3><p>1.纹理解包器&gt;图集文件选择“.atlas”格式文件&gt;输出文件夹随便指定即可&gt;解开</p><p>2.Hierarchy&gt;图片&gt;图片文件&gt;路径，找到纹理解包后的输出文件夹</p><p><img src="https://image-static.segmentfault.com/418/251/4182516544-67bea4cf2835a_fix732" alt="img"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>通常一个json导出文件里可以包含很多个动画，可以看到预览右边的列表，每一个选项就是一个动画，选中可以预览，左边的工程窗的设置可以进入K帧窗。</p><p>更多的比如骨骼绑定，蒙皮刷权重，K帧，我后面再出一个单独的文章说明，下面就进入正题到Unity的导入了。</p><p><img src="https://image-static.segmentfault.com/231/247/2312472564-67bea4ffaa22f_fix732" alt="img"></p><h1 id="四、导入Unity3D"><a href="#四、导入Unity3D" class="headerlink" title="四、导入Unity3D"></a>四、导入Unity3D</h1><p>要在Unity3D导入前需要先下载Spine Unity运行库，可以网上找Spine官方下载页；第二个是前面提到的Unity不识别.atlas文件，将动画放到Unity项目的资源文件夹下需要将.atlas改成.txt后缀的文件。</p><h3 id="Spine-Unity运行库安装"><a href="#Spine-Unity运行库安装" class="headerlink" title="Spine Unity运行库安装"></a>Spine Unity运行库安装</h3><p>在Unity中，点击菜单栏 <strong>Assets &gt; Import Package &gt; Custom Package</strong>，选择下载的<code>.unitypackage</code>文件，导入全部内容。</p><p>最后在工具栏的GameObject下，查看是否有Spine选项，就可以验证安装成功与否。</p><h3 id="Spine数据资源生成"><a href="#Spine数据资源生成" class="headerlink" title="Spine数据资源生成"></a>Spine数据资源生成</h3><p>前面提到的Spine动画的三个文件，再放入游戏资产文件夹中修改了图片描述文件格式后，打开项目后，Unity会自动生成一个.meta和两个.asset文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_Atlas.asset             与之前的atlas对应的图集描述文件</span><br><span class="line">_Material.mat            与之前的png对应的素材纹理</span><br><span class="line">_SkeletonData.asset      与之前的json对应的骨骼数据文件</span><br></pre></td></tr></table></figure><h3 id="创建动画对象"><a href="#创建动画对象" class="headerlink" title="创建动画对象"></a>创建动画对象</h3><p>因为游戏是2D的，我主体场景用的是Canvas，开头也提到过的导入后总是显示在Canvas背景图的下层，所以第一步就从设置画面开始。</p><p>1.选中Canvas后，Render Mode选择 “Screen Space-Camera”，Hierachy中的Main Camera拖入Render Camera中。</p><p><img src="https://image-static.segmentfault.com/192/673/1926736657-67be848795f75_fix732" alt="img"></p><p>2.在场景中创建空对象（如右键Hierarchy &gt; <strong>Create Empty</strong>），命名为 SpineCharacter</p><p>3.添加组件：点击 <strong>Add Component</strong>，搜索并添加 <strong>Skeleton Animation</strong></p><p>4.配置组件：</p><ul><li><strong>Skeleton Data Asset</strong>：拖入前面“Spine数据资源”生成的<code>_SkeletonData.asset</code>文件。</li><li><strong>Animation Name</strong>：输入默认播放的动画名称（如<code>idle</code>）。</li><li><strong>Loop</strong>：勾选以循环播放。</li><li><strong>Scale</strong>：调整 Rect Transform 的 Scale，大小自行尝试。</li></ul><p>5.Shader设置 <strong>UI&#x2F;Default</strong>，默认的Spine Skeleton素材拼接得有点锯齿，详细的可以自行选择尝试。</p><p><img src="https://image-static.segmentfault.com/133/888/1338888192-67be8ccd42a5c_fix732" alt="img"></p><h3 id="脚本控制动画"><a href="#脚本控制动画" class="headerlink" title="脚本控制动画"></a>脚本控制动画</h3><p>创建C#脚本（如<code>SpineController.cs</code>）并附加到角色对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Spine.Unity;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SpineController</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> SkeletonAnimation skeletonAnim;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> runAnimation = <span class="string">&quot;run&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span> &#123;</span><br><span class="line">        skeletonAnim.AnimationState.SetAnimation(<span class="number">0</span>, runAnimation, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 切换动画</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayAnimation</span>(<span class="params"><span class="built_in">string</span> animName</span>)</span> &#123;</span><br><span class="line">        skeletonAnim.AnimationState.SetAnimation(<span class="number">0</span>, animName, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>为什么我做小游戏从CocosCreator切到了Unity3D，原因是这次尝试的是抖音直播小玩法，也就是弹幕小游戏。</p><p>前期为了跑通流程，所以我要避开所有要用到服务端的产品开发，从而采用指令直推方式，但官网只有Unity SDK的案例，最后有了这篇文章，当然后续还有更多。</p><p>当然CocosCreator制作普通单机小游戏我也会继续，不过当前以2D为主，毕竟现在用AI抽卡来生成游戏资产太方便了，等图生3D模型较完善的时候，以后再用AI制作3D小游戏。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2024年终总结，持续尝试</title>
      <link href="/2024/12/23/%E6%88%91%E7%9A%842024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%EF%BC%8C%E6%8C%81%E7%BB%AD%E5%B0%9D%E8%AF%95/"/>
      <url>/2024/12/23/%E6%88%91%E7%9A%842024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%EF%BC%8C%E6%8C%81%E7%BB%AD%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>时光飞逝，一晃就到2024的年底了，按照我近年来的传统，我要复盘一下今年做过的关于探索收入多样性的事件。包括这一年的工作进展，收获的事项，遇到的各种问题，以及来年计划等，希望能对你有所参考意义。</p><p><img src="https://image-static.segmentfault.com/232/901/2329019790-67495ca328071_fix732" alt="img"></p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><ol><li><p>Cocos小游戏《忍者疾风转》开发，并上架到微信和抖音平台。</p></li><li><p>微信小程序《有用工具盒》开发并上架。</p></li><li><p>视频号《一曲小北》，主打编曲和吉他，首次开通广告分成计划。</p></li><li><p>QQ小程序《实用工具箱》上架，暂未开通广告分成。</p></li><li><p>微信公众号《ZERO开发》发布推文23篇，首次小绿书1篇，爆文5篇。</p></li><li><p>三个QQ短视频账号注册孵化，均已开通广告共享计划。</p></li><li><p>鸿蒙Next应用开发，暂未上架，发布相关教程3篇，视频1个。</p></li><li><p>全网粉丝数达20000人，含抖音账号《小北玩游戏》。</p></li><li><p>微信问一问《ZERO开发》，累计回答40个，推流3w+，粉丝132人。</p></li><li><p>重新搭建个人博客，加入独立博客联盟，友链，每日UV稳定破零。</p></li></ol><p><img src="https://image-static.segmentfault.com/336/491/3364910669-67495cac11bcf_fix732" alt="img"></p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><ol><li><p>工作上的开发语言学习，新增Go语言和鸿蒙Next的ArkTs。</p></li><li><p>单机游戏的Mod简单制作，游戏解包与封包。</p></li><li><p>Adobe Audition混音制作，用于视频号《一曲小北》更新。</p></li></ol><h3 id="收入"><a href="#收入" class="headerlink" title="收入"></a>收入</h3><ol><li><p>公众号《ZERO开发》广告收益，付费文章1篇支付3人，账号打赏4人。</p></li><li><p>视频号《北桥苏》、《一曲小北》原创视频，每日广告收益。</p></li><li><p>微信小游戏、抖音小游戏《忍者疾风转》每日激励广告收益。</p></li><li><p>微信小程序《有用工具盒》每日开屏广告、信息流广告收益。</p></li><li><p>其他内容创作平台收益，哔哩哔哩，知乎，今日头条，QQ短视频，大鱼号。</p></li></ol><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ol><li><p>加入副业交流群3个，小游戏、小程序开发交流群2个。</p></li><li><p>个人运营程序员技术交流群1个，小程序交流QQ群1个。</p></li><li><p>线下交友活动较缺失，2024年属于非常独来独往的一年。</p></li></ol><h3 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h3><p>年初我就关闭了自2019年末以来购买的所有基金，也错过了今年10月前后的一次A股大涨时机。转而放到了余额宝和微信零钱通，每天固定几块钱的收益。为什么要这样做，因为关于金融产品的收入方向，我现在并不了解所以持保守态度，以后再慢慢学，重资产投资我没有尝试就不赘述了。</p><p><img src="https://image-static.segmentfault.com/552/933/55293385-67495cb696533_fix732" alt="img"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>个人产品自然流量普遍偏低</li></ol><p>因为以前技术崇拜，而不看重产品本身，导致入局独立开发比较晚，产品思维也跟不上，进一步影响我做出来的小程序，只能算是小应用而非产品。所以我现在才开始学习调研，需求分析，推广营销等等，毕竟独立产品开发是程序员晚期收入很重要的布局之一。</p><ol start="2"><li>视频创作方向不明确</li></ol><p>不管是我的短视频还是中视频账号风格还没定调，因为过去都是用来学习新东西后的记录视频，没有真人出镜和真人发声。平台既不给流量，在观感上也显得不真诚，给人种营销号的感觉，这个只能慢慢摸索方向，之后再尝试出镜和口播。</p><p><img src="https://image-static.segmentfault.com/893/939/89393987-67495cbf81eb5_fix732" alt="img"></p><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><ol><li><p>2025年每周都写日志复盘，博客新增周刊栏目。</p></li><li><p>注册个人微信服务号，探索新方向，持续内容输出。 </p></li><li><p>直播弹幕小游戏，直播插件开发并上架。</p></li><li><p>用Unity3D引擎独立开发一个偏大型的单机游戏。</p></li><li><p>Blender、3D Max建模改模学习，Mod制作升级。</p></li><li><p>持续探索AI大模型个人项目变现，AI应用开发。</p></li><li><p>加大小红书内容更新力度，完成商单权限开通。</p></li><li><p>个人资源（代码，创作源文件）变现，网盘拉新。</p></li></ol><p><img src="https://image-static.segmentfault.com/185/484/1854843107-67495cc82284d_fix732" alt="img"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>2024年的我的复盘结论就是 “持续尝试”，告别技术崇拜，但依然相信技术改变世界。二者不矛盾，因为技术服务于业务，建立在价值产出之上，任何优秀的代码结构终将会成为 “屎山”（有点俗）。</p><p>好的技术架构值得骄傲与推崇，但也只能延缓逐渐臃肿的进程，世界总是向熵增的方向演进，总是向混乱的方向发展，唯一不变的就是变，多方向尝试，多次推倒重来，就算是草台班子也能找到个方向，最后我也希望2025年的复盘主题是 “持续深耕”。</p><p><img src="https://image-static.segmentfault.com/284/079/2840796087-67495ccfd0bd4_fix732" alt="img"></p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 思维思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人开发者，还能入局抖音直播小玩法吗？</title>
      <link href="/2024/12/21/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E8%80%85%EF%BC%8C%E8%BF%98%E8%83%BD%E5%85%A5%E5%B1%80%E6%8A%96%E9%9F%B3%E7%9B%B4%E6%92%AD%E5%B0%8F%E7%8E%A9%E6%B3%95%E5%90%97%EF%BC%9F/"/>
      <url>/2024/12/21/%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E8%80%85%EF%BC%8C%E8%BF%98%E8%83%BD%E5%85%A5%E5%B1%80%E6%8A%96%E9%9F%B3%E7%9B%B4%E6%92%AD%E5%B0%8F%E7%8E%A9%E6%B3%95%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间，我在微信问一问里回答了一个关于 “一天赚几十块钱副业有哪些？”的问题。主要推荐的是直播小玩法的副业，截至目前收获了官方1万的推流和超5千人的围观。由此我认为，当前开发直播小玩法还是比较小众，竞争小，个人开发者入局应该能躺赚一笔，真的很适合参考以前的回合制游戏。</p><p><img src="https://image-static.segmentfault.com/240/818/240818257-674924b25adcf_fix732" alt="img"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>直播小玩法是抖音里的一种统称，其他平台有叫直播弹幕小游戏，而抖音里的直播小玩法包括两种，弹幕小游戏和互动插件。个人主体开发者申请软著后，符合平台规范都能上架。上架后，只要有主播用了你的开播，就能享受直播间的礼物分成，分成比例见下图。</p><p><img src="https://image-static.segmentfault.com/116/601/1166018645-67492500142db_fix732" alt="img"></p><p>比例看着确实比较低，但他也有一个很符合被动收益的优势：一经开发，多端部署，多人开播，无需直接面向观众。就是我们开发后，其实是可以发布到多个平台的，已知对个人开发者开发弹幕游戏上架的平台有：</p><ol><li><p>抖音</p></li><li><p>哔哩哔哩</p></li><li><p>虎牙</p></li></ol><p>同一平台可以让多个主播同时开播，看似一场直播分百分之八，但如果一天有100个主播，就可以从100个直播间分走百分点的收入。</p><p><img src="https://image-static.segmentfault.com/115/806/1158064410-6749251e03deb_fix732" alt="img"></p><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>上架直播小玩法虽然是小众行业，但也同样有二八效应，据业内人士说，弹幕游戏有榜单，如果上架后能冲进前30，那每月被动收入十几W很常见。比如2023年的两款，《兵临城下》这款游戏全平台月流水超过6000万，《星辰无双》日均流水突破150万元。</p><p>这些头部爆款多数是开发团队完成的，个人开发者前期不试水，上架后可能就是主播一日游，然后还要承担服务器的费用。当然前面的优势和收益也是很可观的，这里只是在入局前给个预期中和一下，防止后期沉默成本过高。</p><p><img src="https://image-static.segmentfault.com/116/881/1168810401-67492536ee170_fix732" alt="img"></p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>根据官方开发文档介绍，互动插件和弹幕小游戏都支持单价版开发，也就是无需购买服务器，通过客户端接收推送完成交互。互动插件这里就不详细介绍了，类似直播里的点歌，点击屏幕上一个按钮，下拉出一些歌曲列表，选中后可以发送到直播间，这种的交互性更似小程序，可专门为开课，舞蹈博客定制相应的业务型互动插件。</p><p>而弹幕小游戏的开发，主要的是通过接收直播间的弹幕、礼物数据后，在游戏中显示对应的增益效果，比如送出仙女棒触发什么，阵营能提升什么。大部分是大同小异，更多的是主题和效果的设计，哪些更能迎合主播和观众，下面就用服务器+文档API，介绍一下大致的开发过程。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>用直播伴侣打开后获取Token请求服务器接口</p></li><li><p>服务端根据Token获取房间ID并返回到小玩法</p></li><li><p>服务端将监听的房间数据通过长链接推送到小玩法</p></li><li><p>小玩法根据礼物、弹幕等数据展示buff效果</p></li><li><p>时间结束后根据业务数值判断阵营输赢并排名</p></li></ol><p><img src="https://image-static.segmentfault.com/256/557/2565572183-6749255545bf1_fix732" alt="img"></p><h2 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h2><p>下面就从官方文档里列出一些服务端业务中需要用的请求接口，详细可见开放平台的小玩法文档的服务端API介绍。</p><h4 id="接口调用凭证"><a href="#接口调用凭证" class="headerlink" title="接口调用凭证"></a>接口调用凭证</h4><p>access_token 是服务端接口的全局唯一调用凭据，如下面直播信息里的 “X-Token”，任务启动的 “access-token”传递的请求头参数用的都是这个。access_token 的有效期为 2 个小时，需要定时刷新 access_token。</p><h4 id="直播信息"><a href="#直播信息" class="headerlink" title="直播信息"></a>直播信息</h4><p>主播使用直播伴侣或移动端云启动玩法后，直播伴侣&#x2F;移动端云启动会传入 token 到玩法中，当玩法获取 token 后，传递给玩法的服务端。玩法服务端通过该接口，使用 token 获取直播间信息，在返回到客户端前，服务端还需要调用 “任务启动”、“礼物置顶”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;ack_cfg&quot;: [ // 预留信息，sdk接入使用，开发者不用感知</span><br><span class="line">    ],</span><br><span class="line">    &quot;linker_info&quot;: &#123; // 连屏数据预留信息，开发者目前不用感知</span><br><span class="line">        &quot;linker_id&quot;: 0,</span><br><span class="line">        &quot;linker_status&quot;: 0,</span><br><span class="line">        &quot;master_status&quot;: 0</span><br><span class="line">    &#125;，</span><br><span class="line">    &quot;info&quot;: &#123;</span><br><span class="line">        &quot;room_id&quot;: 7214015683695250235,</span><br><span class="line">        &quot;anchor_open_id&quot;: &quot;_000oJIu6APhomK7KIBGqSYm5XYPxCJB_xxx&quot;,</span><br><span class="line">        &quot;avatar_url&quot;: &quot;https://p11.douyinpic.com/aweme/720x720/aweme-avatar/tos-cn-avt-0015_973c31e8055f78a41d3f7de3def9821d.jpeg?from=3067671334&quot;,</span><br><span class="line">        &quot;nick_name&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任务启动"><a href="#任务启动" class="headerlink" title="任务启动"></a>任务启动</h4><p>调用任务启动后，直播间数据才会同步推送给开发者服务器，注意：不同类型的数据需要启动不同的任务单独监听，比如礼物数据单独启动一个，评论数据单独启动一个，见文档的数据开发。</p><h4 id="礼物置顶"><a href="#礼物置顶" class="headerlink" title="礼物置顶"></a>礼物置顶</h4><p>为什么还要调这个接口，因为置顶的礼物被送出，才会有礼物数据推送（后期会废用不需要这一步），实现时可以在获取房间ID后异步调用。然后直播挂载小玩法后，开发者根据玩法场景自主控制当前场景需要置顶的礼物，前提是置顶的礼物在玩法维度礼物配置中。调用置顶礼物接口的条件：</p><ul><li>已开通“获取礼物互动数据能力”。</li><li>置顶的礼物数量不能超过6个，且必须为礼物配置列表中已勾选的礼物。</li></ul><h4 id="分页查询推送失败数据"><a href="#分页查询推送失败数据" class="headerlink" title="分页查询推送失败数据"></a>分页查询推送失败数据</h4><p>可以用定时任务对已经开播的RoomId请求 api 分页查询推送失败的数据，返回空代表全部推送成功，否则可以根据业务需求记录失败的数据和重新推送到小玩法客户端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;err_no&quot;: 0,</span><br><span class="line">  &quot;err_msg&quot;: &quot;ok&quot;,</span><br><span class="line">  &quot;logid&quot;: &quot;20220927122238291&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;page_num&quot;: 1,</span><br><span class="line">    &quot;total_count&quot;: 100,</span><br><span class="line">    &quot;data_list&quot;: [</span><br><span class="line">      // 当页的数据列表</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;roomid&quot;: &quot;12345&quot;, // string类型，消息的房间id</span><br><span class="line">        &quot;msg_type&quot;: &quot;live_gift&quot;, // string类型，表示消息类型</span><br><span class="line">        &quot;payload&quot;: &quot;[...]&quot; // string类型， 对应推送协议中的payload字符串，需要unmarshal</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他接口"><a href="#其他接口" class="headerlink" title="其他接口"></a>其他接口</h4><p>弹幕数据上报、用户战绩与排行榜看自身业务使用，而小玩法客户端主要就和服务端保持长链接，接收直播间互动数据，以及三个Http业务接口。</p><ul><li>开启，获取roomId</li><li>结算，传递比赛结果</li><li>获取排行榜单</li></ul><p><img src="https://image-static.segmentfault.com/344/432/3444326852-674925738f7e0_fix732" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>上面的是官方玩法，其实还有第三方，而且抖音推出抖音小玩法可能也是打不过就加入的策略。因为以前盛行一时的无人直播，像修狗云蹦迪、挤地铁、马保国格斗等，都是别人用技术手段实现弹幕礼物接收实现的小游戏。</p><p>因为没有人出境和抓取数据等原因，开播的房间经常被封，虽然被封，但收益不错也屡禁不止，所以抖音干脆开放小玩法模块（个人猜想），更大程度实现主播、开发者、观众双收。我已知第三方平台有：咩播、阿比整蛊、青播，有机会我再聊聊关于这些平台软件的内部概况。</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播弹幕小游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ小程序互帮互助</title>
      <link href="/2024/12/20/QQ%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%92%E5%B8%AE%E4%BA%92%E5%8A%A9/"/>
      <url>/2024/12/20/QQ%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%92%E5%B8%AE%E4%BA%92%E5%8A%A9/</url>
      
        <content type="html"><![CDATA[<p>个人主体的 QQ 小程序，到底是哪些人开通了流量主在玩啊？</p><p>从微信端移植并修改了一个工具类的 QQ 小程序，然后备案审核上架后，自然流量没有一点，你说尴不尴尬！</p><p><img src="https://cdn.learnku.com/uploads/images/202410/30/121806/5iNp282ZdW.jpg!large" alt="img"></p><p>还有一点呢，QQ 小程序开通流量主的条件还是很高的，相比微信小程序。</p><p>要求连续 7 天内，每天的访问 UV 都不能低于 100，也就是在一个连续周期内要完成 700UV。</p><p>于是，我就去某宝找找有没有做流量主开通的，我先是输入 “QQ 小程序流量主开通”，根本就没有。</p><p>然后就只搜小程序流量主开通，清一色微信小程序的，没辙，随便找几家问问有没有能做 QQ 小程序的。</p><p><img src="https://cdn.learnku.com/uploads/images/202410/30/121806/KTXMYnwr1s.png!large" alt="img"></p><p>结果就是，根本没人做这玩意的流量主开通业务，不过也意外地知道了他们做一个微信小程序地普遍报价 150 上下，同样也是刷访问，10 天完成 500UV。</p><p>最后我就找群找论坛，QQ 小程序互助，也没有，不知道有没有和我一样的，有的话，我建了一个扣扣群，或加我 QQ：2652364582，互帮互助。</p><p><img src="https://cdn.learnku.com/uploads/images/202410/30/121806/pTGBTnmZFZ.jpg!large" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>守护C盘，3种指令清理方法</title>
      <link href="/2024/12/20/%E5%AE%88%E6%8A%A4C%E7%9B%98%EF%BC%8C3%E7%A7%8D%E6%8C%87%E4%BB%A4%E6%B8%85%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2024/12/20/%E5%AE%88%E6%8A%A4C%E7%9B%98%EF%BC%8C3%E7%A7%8D%E6%8C%87%E4%BB%A4%E6%B8%85%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>磁盘清理工具虽然有很多，但是对于一些开发工具，或较为隐蔽的缓存还是无法有效清理。</p><p>眼看着C盘的“垃圾”越积越多，电脑使用起来越来越卡，我们只有两种方法：</p><ol><li>将较大的软件转移到其他磁盘（直接移动 or 软链接）</li><li>一条路走到底，对 “垃圾” 大清理。</li></ol><p>下面我就简单介绍一下软链接和两种指令清理的方法。</p><h4 id="一、软链接"><a href="#一、软链接" class="headerlink" title="一、软链接"></a>一、软链接</h4><p>mklink &#x2F;J 目标文件&#x2F;文件夹 源文件&#x2F;文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /J D:\target-dir E:\src-dir</span><br></pre></td></tr></table></figure><h4 id="二、清理临时文件"><a href="#二、清理临时文件" class="headerlink" title="二、清理临时文件"></a>二、清理临时文件</h4><p>通过下面命令进入到临时文件的默认位置，然后再点击删除，也可以将这个默认位置指定到其他磁盘。</p><p>只需要在环境变量种创建变量名TEMP，值为上面显示的默认位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd 输入 %temp%</span><br></pre></td></tr></table></figure><h4 id="三、指令清理"><a href="#三、指令清理" class="headerlink" title="三、指令清理"></a>三、指令清理</h4><p>管理员身份运行命令行 C盘瘦身</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、  DISM.exe /Online /Cleanup-Image /StartComponentCleanup</span><br><span class="line">2、  powercfg hibernate off</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/170/672/1706722225-666d5d93e0e9d_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 运维相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C盘清理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年，个人申请小游戏软著速通指南</title>
      <link href="/2024/12/10/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/"/>
      <url>/2024/12/10/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2024年6月26号，我申请的小游戏软著通过了。由于等待时间太长，所以就总结了一下整个申请过程踩过的坑。帮助未了解或即将申请个人软著的同学绕过下面三点，可以节省至少三分之一的时间（小游戏类目）。</p><p>当然，这里也会围绕大家关心的几个问题展开，比如：软著申请的费用、软著申请到底要多久以及整个申请的流程。最后再给大家两份我自己的申请模板，软件源程序文档和软件说明书文档。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/1.png" alt="img"></p><h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><p>2024年申请软著不用钱，如果说一分钱不用也说不过去，因为在申请时的签章页要打印签字，所以整个过程的花费就是一张纸的打印钱。要是你找的第三方代办收取高费用，并且说要打印这打印那的就自己弄吧。因为现在关于软著的登记都是采用电子版形式了。之前既要打印源码文档和软件说明书，还要寄过去，然后才能收到纸张版软著。</p><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><p>我从申请到通过一共是三个月时间，但是在过程中有三次补正，也就是提交的信息和资料不符和要求。而每次补正再审核大概在8-15天（个人观察），错三次也就要多一个月时间，按正常填写一遍过的话应该两个月以内就能获取。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="注册与开始申请"><a href="#注册与开始申请" class="headerlink" title="注册与开始申请"></a>注册与开始申请</h2><p>进入“国家版权保护中心官网”，选择个人身份，填写手机邮箱等信息后注册成功后登陆。然后回到官网首页导航栏选择 “版权登记” -&gt; “软件登记” -&gt; ”计算机软件著作权登记申请（R11）“, 然后进入到办理身份，是自己就选 ”我是申请人“。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/2.jpg" alt="img"></p><h2 id="软件申请信息"><a href="#软件申请信息" class="headerlink" title="软件申请信息"></a>软件申请信息</h2><p>这是第一步要填写的表单，其中权利取得方式、软件全称、版本号、权利范围为必填，权利取得方式按默认原始取得，权利范围按默认全部权利，其他的可以参考我下面截图。而 ”软件全称“ 一定要注意，因为我其中一项补正就是软件全称和后面的软件说明、源码文档里的页眉软件名称不一致。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/3.jpg" alt="img"></p><h2 id="软件开发信息"><a href="#软件开发信息" class="headerlink" title="软件开发信息"></a>软件开发信息</h2><p>软件开发信息都为必填，软件分类选择 ”应用软件“，软件说明 ”原创“，开发方式 ”单独开发“，开发完成日期自己选择，发表状态 ”未发表“。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/4.jpg" alt="img"></p><h2 id="软件功能与特点"><a href="#软件功能与特点" class="headerlink" title="软件功能与特点"></a>软件功能与特点</h2><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/5.jpg" alt="img"></p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/6.jpg" alt="img"></p><h2 id="鉴别材料"><a href="#鉴别材料" class="headerlink" title="鉴别材料"></a><strong>鉴别材料</strong></h2><p>鉴别材料有两份，分别是程序鉴别材料和文档鉴别材料，两个都选择一般交存。其中程序鉴别材料是代码清除空行注释整理后转PDF提交，前后各连续30页可以按开发时间排序，也可以按功能主次等自定义排序，每页不少于50行，若源程序整体不到60页，应提交全部源程序。</p><p>而文档鉴别材料是用来描述程序的内容、组成、设计、功能、开发情况、测试结果及使用方法的文字资料和图表，如程序设计说明书、流程图、用户手册等，同样文档要求是连续的前30页和后30页，每页不少于30行，如果整个文档不到60页，就提交整个说明文档，这个我会在下面列出我的那两个模板。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/7.jpg" alt="img"></p><h2 id="确认信息"><a href="#确认信息" class="headerlink" title="确认信息"></a>确认信息</h2><p>填完上面的信息后，提交身份证正反面，最后就会列出提交材料的清单确认信息。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/8.jpg" alt="img"></p><h2 id="签章页提交"><a href="#签章页提交" class="headerlink" title="签章页提交"></a>签章页提交</h2><p>签章页其实也是材料清单确认书，下载打印后签字拍照完再上传。软著的状态就会由 “待提交” 转 “待受理” 了，接着就等待审核发放了。</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/9.jpg" alt="img"></p><h1 id="模板参考"><a href="#模板参考" class="headerlink" title="模板参考"></a>模板参考</h1><p>以下两份就是我的程序鉴别材料和文档鉴别材料模板，这里要注意一点的是，游戏类的文档说明一定要加上 “游戏健康忠告” 页面的介绍。（可以扫描下面公众号二维码找到文章或留言）</p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/10.jpg" alt="img"></p><p><img src="/img/2024%E5%B9%B4%EF%BC%8C%E4%B8%AA%E4%BA%BA%E7%94%B3%E8%AF%B7%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%BD%AF%E8%91%97%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97/11.jpg" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>软著下来后就准备上架到小游戏或快游戏平台了，可能是近年来的净网相关政策，有些平台对于小游戏或快游戏对个人身份的提交通道已经关闭了。不光如此，我最近做了一个工具类的小程序也卡在提交，因为我是要改名称和类目，现在还需要备案和认证，就不知道到时候我上架的时候，以前积累的UV会不会被清掉。</p><p><img src="https://www.zerofc.cn/img/qrcode/wx_gzh.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软著申请 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本 API 服务搭建，用 GitHub Actions 自动爬取文章</title>
      <link href="/2024/12/09/%E9%9B%B6%E6%88%90%E6%9C%AC%20API%20%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%EF%BC%8C%E7%94%A8%20GitHub%20Actions%20%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96%E6%96%87%E7%AB%A0/"/>
      <url>/2024/12/09/%E9%9B%B6%E6%88%90%E6%9C%AC%20API%20%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%EF%BC%8C%E7%94%A8%20GitHub%20Actions%20%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本着将成本降到最低，我目前做的应用或小程序都是单机的，也就是不用请求接口，只要一上架就没有任何支出。但是<strong>写死的数据毕竟有限，应用的内容单一无法紧跟时事热点，每次打开一个样，自然就没有留存</strong>。遇到有错字啥还要更新版本，那有没有方法既能丰富应用内容，又不用增加成本呢？</p><p>既要又要，当然也有，找网上提供的免费 API 接上去。但是这种有请求数限制，而且还和自己应用的业务不相关，那就只能自己弄接口了。</p><p>既然可以在 GitHub 上搭静态博客，那整一个静态 API (json 文件)，时不时地更新或提交新的 json 文件上去，在 C 端应用上不也看起来像是动态的了。所以下面就实践一下如何在 GitHub 上搭建 API 服务，以及<strong>如何自动化更新数据（部署爬虫）？</strong></p><p><img src="https://image-static.segmentfault.com/482/078/482078067-591238b9bf37dca1_fix732" alt="图片"></p><h2 id="API-服务搭建"><a href="#API-服务搭建" class="headerlink" title="API 服务搭建"></a>API 服务搭建</h2><p>方法和之前在 GitHub 上搭建 Hexo 类似，就是给仓库开启 GitHub Pages，可以自行绑定域名，也可以用之前主仓设置的域名后面带当前仓库名访问。当前域名要备案过了，然后用访问资源的方式能访问到 json 文件 (xml、csv 等) 就可以了。<br><img src="https://image-static.segmentfault.com/358/371/3583717244-3b39cca3d762137d_fix732" alt="图片"></p><h2 id="定时爬虫部署"><a href="#定时爬虫部署" class="headerlink" title="定时爬虫部署"></a>定时爬虫部署</h2><p>要实现自动化更新数据，那就要定时手动上传和直接爬虫爬取，可以通过 GitHub Actions 工作流的方式实现，下面第一次使用的方式演示如何创建并运行 workflow。</p><h3 id="创建推送-TOKEN"><a href="#创建推送-TOKEN" class="headerlink" title="创建推送 TOKEN"></a>创建推送 TOKEN</h3><p>因为生成了 json 文件需要自动推送到仓库，为了不用输入账号密码并使用 PAT，这个和之前 Hexo 搭建时获取的一样。settings-&gt;developer settings-&gt;github apps-&gt;personal access tokens-&gt;tokens (classic)，然后选择 “Generate new token (classic)”。</p><h3 id="TOKEN-权限设置"><a href="#TOKEN-权限设置" class="headerlink" title="TOKEN 权限设置"></a>TOKEN 权限设置</h3><p>设置名称，有效时间，勾选权限，主要的把 repo、workflow、user、write:discussion 以及 admin 开头的全勾上，如果不想选都选上也可以。最后创建后就会显示 token 值，记得把那个 ghp 开头的字符串复制下来，不然后面就看不到了。这里再说一下 PAT 下的 Fine-grained tokens 和 Tokens (classic) 的区别，上面比 Tokens (classic) 权限控制更精细，安全性更高，而且无法设置不能失效的 Token。<br><img src="https://image-static.segmentfault.com/221/964/2219644713-4289f5ec535a94cd_fix732" alt="图片"></p><h3 id="测试-TOKEN"><a href="#测试-TOKEN" class="headerlink" title="测试 TOKEN"></a>测试 TOKEN</h3><p>是否可用用 git 命令运行，换成自己的 token 和仓库报错了则说明该 TOKEN 无效</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push https:<span class="regexp">//</span>x-access-token:换成你的TOKEN@github.com<span class="regexp">/z11r00/</span>你的仓库.git HEAD</span><br></pre></td></tr></table></figure><h3 id="创建工作流"><a href="#创建工作流" class="headerlink" title="创建工作流"></a>创建工作流</h3><p>打开仓库后，点击 Actions，然后点击 New workflow，set up a workflow yourself 后提交。git 拉取后会在项目中生成一个.github 文件夹，依次点进去是刚才创建的工作流 yml 文件。<br><img src="https://image-static.segmentfault.com/383/733/3837336944-12e422efa1eb2b35_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/183/528/1835286103-701e10b4d848d679_fix732" alt="图片"></p><h3 id="Yml-配置说明"><a href="#Yml-配置说明" class="headerlink" title="Yml 配置说明"></a>Yml 配置说明</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span>：工作流名称，展示在用于表示工作流。</span><br><span class="line"><span class="literal">on</span>：触发事件，schedule 定时 | <span class="keyword">push</span> 推送 | pull_request pr 请求，定时任务下有一个 cron 的五个 * 分别是分 时 日 月 星期（, 分割字段多值 - 定义范围 / 指定间隔频率）。</span><br><span class="line">workflow_dispatch： 是否允许在 github actions 操作选项卡中手动操作，默认是可以。</span><br><span class="line">jobs：任务执行的定义。</span><br><span class="line">runs-<span class="literal">on</span>： 用于任务执行的运行器，可以说是操作系统，其他的还有 windows 等，具体参考文档，下面会贴出。</span><br><span class="line">steps： 步骤，工作流依次执行的步骤，每个都有一个名字和具体的运行指令，可以使用 actions 包 (github 提供的集成程序，比如用于检出仓库代码的，python 环境的等等)。</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/101/238/1012385766-e75fd97b886b950b_fix732" alt="图片"></p><h3 id="爬虫工作流"><a href="#爬虫工作流" class="headerlink" title="爬虫工作流"></a>爬虫工作流</h3><p>以下定义一个每天八点十分（不一定准时），先是用 TOKEN 检出仓库中的所有代码，然后设置 python 环境后安装指定依赖，运行 script 目录下的 ArticleSpider.py 脚本，最后将脚本里生成的 json 文件提交并推送到仓库。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作流名称</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">article_spider</span></span><br><span class="line"><span class="comment"># 事件：schedule 定时 | push 推送 | pull_request pr请求</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># 分 时 日 月 星期 (*每次都 ,分割字段多值 -定义范围 /指定间隔频率)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;10 0 * * *&#x27;</span> <span class="comment"># 每日8:10，时间点执行任务，注意时区(UTC, 0+8)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 是否可在github操作选项卡手动运行</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义任务</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># 任务运行器（切换可参考文档）</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 使用到的actions包(用于克隆当前仓库的所有代码)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUSH_TOKEN</span> <span class="string">&#125;&#125;</span>  <span class="comment"># 自定义的个人推送TOKEN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python -m pip install --upgrade pip</span></span><br><span class="line"><span class="string">          pip install requests</span></span><br><span class="line"><span class="string">          pip install lxml</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">execute</span> <span class="string">py</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">FM_USERNAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python script/ArticleSpider.py</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">列出所有文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          ls -l</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --local user.email &quot;2652364582@qq.com&quot;</span></span><br><span class="line"><span class="string">          git config --local user.name &quot;bqs&quot;</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;Add changes&quot; || echo &quot;No changes to commit&quot;</span></span><br><span class="line"><span class="string">          git push origin main</span></span><br></pre></td></tr></table></figure><h3 id="ArticleSpider-py"><a href="#ArticleSpider-py" class="headerlink" title="ArticleSpider.py"></a>ArticleSpider.py</h3><p>脚本因为对方站点是一个前后端分离的项目，页面的列表和详情都是用异步请求的方式。所以这种抓取就比较好办，写一个 while 循环，页码不断累加的请求接口，判断有超过某时间点的文章则跳出循环。在循环中将数据保存到指定的目录下的 json 文件中，当然也可以自己调整数据，如果要分页就按固定条数分文件。<br><img src="https://image-static.segmentfault.com/106/933/1069333098-c1ec78234f429dfa_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/336/648/3366485286-f2994b4068981ace_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/369/226/3692265409-3e901a36d109a6ca_fix732" alt="图片"></p><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>虽然是定时的，但也可以去 GitHub 控制台手动运行。打开 Actions，选择工作流名字进去，最后 Run workflow 就等待执行了。详细也可以看到脚本里打印出的日志，执行完毕再回到仓库查看是否有 json 文件生成。<br><img src="https://image-static.segmentfault.com/103/646/1036463815-5c07338533579be8_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/408/784/4087841949-c0779a32953a2527_fix732" alt="图片"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以上只是演示，如果真要弄自己的 API 还是得对爬取的数据做一下处理，拓展一下是不是还可以用这种方式，实现一个带后台管理的资源 “动态网站”。但是应用也不光只有展示，还有提交部分，所以要想零成本实现将用户数据存储下来就要用到另一些方法了，最后 GitHub Actions 用法也远不止于此……</p><h2 id="安利"><a href="#安利" class="headerlink" title="安利"></a>安利</h2><p>QQ小程序：**<a href="https://m.q.qq.com/a/s/b97b48f72dacd484942124801d7442c5?via=2016_1">实用工具箱</a>**</p><p><img src="https://image-static.segmentfault.com/236/602/236602261-66ac8276ea541_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 运维相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本搭建个人 APP 和小程序后台</title>
      <link href="/2024/12/08/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%20APP%20%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0/"/>
      <url>/2024/12/08/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%20APP%20%E5%92%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面也说了，通过 GitHub Pages+GitHub Actions 只是解决了动态数据展示，但是要零成本得完成将用户信息存储下来，并实现数据交互呢？</p><p>我开始是想用云文档，种种原因，我还是希望有个自己能二次修改的后台，于是就选择了 Vercel+Railway 方式。</p><p>虽然网上也有很多人介绍这俩平台的玩法，但都是 2024 年以前的文章，有些平台最新的修改，和自己踩到的坑而别人没提到的细节，我还是想记录一下。</p><p><img src="https://image-static.segmentfault.com/112/329/1123298108-66c6afc00f6c9_fix732" alt="图片"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ol><li>域名已经解析成功了，但是一直无法访问 Vercel 上的页面。</li><li>vercel-php 版本和 Vercel 上的 NodeJs 版本冲突，和一些配置问题。</li><li>代码提交推送后，Vercel 没有完成自动部署等等。</li></ol><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Vercel：  略过详细介绍，暂且把他理解成云服务器，入门配置免费，需要注册登陆。 </li><li>Railway： 同样略过详细介绍，暂且把他理解成云数据库，几乎免费，需要注册登陆。 </li><li>GitHub：  先创建存放程序的仓库，也几乎完全免费，需要注册登陆。</li><li>Typecho： 博客程序 ，其他语言的像 Flask 也行，开源免费，下载或自行编写。</li></ul><h2 id="Vercel-配置"><a href="#Vercel-配置" class="headerlink" title="Vercel 配置"></a>Vercel 配置</h2><p>进入 vercel 官网，推荐使用 GitHub 账号登陆，配置主要完成仓库的代码导入，域名解析绑定，项目部署和相关参数设置。</p><h4 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h4><p>登陆后点击 “Import Git Repository”，然后选择仓库安装并设置权限，接着是 Configure Project，Congratulations 都可以直接下一步进入到 Production Deployment，可参考下图。</p><p><img src="https://image-static.segmentfault.com/194/830/1948305833-f663bd9b95027499_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/357/937/3579370051-7d45672da6aa94da_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/157/854/1578542957-e08ae56701f30be5_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/407/877/4078779053-76e16095000b8a99_fix732" alt="图片"></p><h4 id="域名解析绑定"><a href="#域名解析绑定" class="headerlink" title="域名解析绑定"></a>域名解析绑定</h4><p>进入到 “Production Deployment” 时，我们可以看到项目已经创建成功。不但可以看到 source 源仓库分支和提交信息，还能看到 Domains 分配的域名，但是该域名被墙无法访问。</p><p><img src="https://image-static.segmentfault.com/271/284/2712842239-538527472e9ddca8_fix732" alt="图片"></p><p>点击上面的 “Domains” 按钮（在 Visit 左边），输入即将要解析过来的域名，系统会展示需要用 CNAM 类型被解析的域名，复制该 value 去到自己的域名服务商控制台，添加一条 CNAME 解析记录。</p><p><img src="https://image-static.segmentfault.com/220/638/2206387084-da8c96d53f4d11dc_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/419/830/4198302430-ef6e02fa24ce75ac_fix732" alt="图片"></p><p>如果说服务商那边解析成功了，并且 Vercel 平台也显示域名验证成功，也就是前面提到的坑点一。这种一般是 DNS 缓存原因，可以换一台电脑或用手机访问测试，如果能就等待一下，直到能 ping 通。</p><p>还有 Vercel 会自动办法 SSL 证书，所以后面只需要留意日期就可以，下图我暂时放了一个 index.html 页面，动态程序演示要放到 Railway 后。</p><p><img src="https://image-static.segmentfault.com/820/082/820082961-58e7e3a59a0edad5_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/116/786/1167866018-c97fd426a83c6390_fix732" alt="图片"></p><h2 id="Railway-配置"><a href="#Railway-配置" class="headerlink" title="Railway 配置"></a>Railway 配置</h2><p>进入 Railway 官网，同样推荐 GitHub 账号登陆，进来后选择 “MySQL” 类型，直接按默认后进入到 production，最主要的是我们需要分配给他的 Host，账号和密码，数据库名等等。</p><p>需要注意的是 Railway 每个月只有 5 刀的限额，需要提前备份数据库。超过限额后没有备份的数据就没了，需要删掉账户重新注册才可以。</p><p><img src="https://image-static.segmentfault.com/382/257/3822573661-9e6397f87912f69e_fix732" alt="图片"></p><p>打开 Data，选择 “Connect” -&gt; “Public Network”，Connection URL 就是该产品对外的连接 Host，用户密码，端口等信息。只需要复制下来，用于在程序中连接配置，Navicat for MySQL 图形化工具连接失败，我试过了。</p><p><img src="https://image-static.segmentfault.com/133/030/1330302240-b0d33cbdce6b46af_fix732" alt="图片"></p><h2 id="后端程序部署"><a href="#后端程序部署" class="headerlink" title="后端程序部署"></a>后端程序部署</h2><p>以下简单介绍 php 和 python 两种语言的 hello world，和有数据库连接的博客程序，第一步是后端入口文件都不能放在项目的根目录下，放在新建文件夹的 api 中，并添加 vercel.json（用于配置路由和分配内存等信息）。</p><p><img src="https://image-static.segmentfault.com/369/904/3699043011-ceced661fb52cea9_fix732" alt="图片"></p><h4 id="Python-的-Hello-World"><a href="#Python-的-Hello-World" class="headerlink" title="Python 的 Hello World"></a>Python 的 Hello World</h4><p>新建 vercel.json 文件，和用于打印的 py 文件，最后访问自定义的域名。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;rewrites&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>, <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;/api/index&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PHP-的-Hello-World"><a href="#PHP-的-Hello-World" class="headerlink" title="PHP 的 Hello World"></a>PHP 的 Hello World</h4><p>需要注意的是部署 php 项目要用到 vercel-php，而 vercel-php 又与 NodeJs 版本有一定对应关系。目前 2024 年 8 月 vercel 平台默认 Node 版本是 20.x，我下面演示的是 <a href="mailto:&#x76;&#x65;&#x72;&#x63;&#x65;&#108;&#45;&#112;&#x68;&#112;&#64;&#x30;&#46;&#x36;&#46;&#48;">&#x76;&#x65;&#x72;&#x63;&#x65;&#108;&#45;&#112;&#x68;&#112;&#64;&#x30;&#46;&#x36;&#46;&#48;</a>，所以再部署前需要先将 Node 版本切换为 18.x，如下图。（以下有两种情况的报错都要 node 和 vercel-php 版本相关）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">部署后报错合集</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> PHP Built-<span class="keyword">In</span> <span class="keyword">Server</span> HTTP error: Error: <span class="keyword">connect</span> ECONNREFUSED <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> The <span class="keyword">following</span> Serverless <span class="keyword">Functions</span> contain an invalid &quot;runtime&quot;: - api/<span class="keyword">index</span> (nodejs18.x)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/291/536/2915361539-aa0a869601076103_fix732" alt="图片"></p><h4 id="Typecho-安装"><a href="#Typecho-安装" class="headerlink" title="Typecho 安装"></a>Typecho 安装</h4><p>从官网下载源码后，找到 config.inc.php 文件，将数据库的参数修改为 Railway 复制过来的配置。</p><p><img src="https://image-static.segmentfault.com/382/510/3825100263-91c17da3cc3ae9d3_fix732" alt="图片"></p><p>然后通过 Git 提交代码到仓库，如果发现没有部署成功，可以进入 vercel 平台的 Deployments 查看部署记录，有报错的根据信息修改。</p><p><img src="https://image-static.segmentfault.com/364/430/3644305189-7a209e7616e296e3_fix732" alt="图片"></p><p>提交并成功部署后，输入自定义域名，并带上 install.php 进行安装，然后用 pdo 方式安装数据库，上面的 railway 参数就再输入一遍。</p><p><img src="https://image-static.segmentfault.com/577/234/577234854-fd52bff4addf224c_fix732" alt="图片"></p><p>安装成功后，可以到 Railway 查看到新增的表格，这就表示全部都能正常使用了。</p><p><img src="https://image-static.segmentfault.com/186/192/1861922813-66197cbc0f83bc55_fix732" alt="图片"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>当然 Vercel 也不只是可以用来部署动静态网站或 API，也能搭一些国外工具的镜像，像 npm 之类的。</p><p>还有一种是，比如国外有一些很好用还免费的 API，你想用在小程序进行调用，但是在小程序后台填写这些 API 访问域名时无法添加，没有国内的备案信息。</p><p>这时候就可以用自己备案过的域名再 Vercel 中搭建一个中转，小程序请求自己的域名，而部署的程序请求别人的地址，更多玩法待后续更新了……</p><p><img src="https://image-static.segmentfault.com/236/602/236602261-66ac8276ea541_fix732" alt="Snipaste_2024-07-31_14-08-07"></p>]]></content>
      
      
      <categories>
          
          <category> 运维相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本加速 “个人图床服务”</title>
      <link href="/2024/12/06/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/"/>
      <url>/2024/12/06/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上次简单分享了一下通过 Github Pages 方式搭建图床，但是国内对 <strong>github 资源的加载普遍不太稳定</strong>，多数情况下很慢甚至打不开。而这次我要推荐两个解决方法，<strong>一种是助力方案，使用 CDN 加速</strong>；另一种是<strong>代替方案，换成真正的图床或其他托管服务</strong>（先卖个关子）。</p><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/cover.jpg" alt="img"></p><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><p>方案一提供助力，<strong>github 上的仓库和资源保持不变</strong>，只需要对其进行 CDN 加速就可以了。那么，好用的 jsDelivr 就上场了，这是一个<strong>免费、开源的加速 CDN 公共服务</strong>，托管了许多大大小小的项目，可加速访问托管的项目目录或图片资源。</p><p>并且他<strong>同时对 github、npm、wordpress 提供支持</strong>，无需安装或搭建什么就能使用，下面就简单介绍一下使用方法。前提是比如你已经创建了 github 仓库，这次<strong>无需开启 github pages，只要是一个 public 的仓库就可以</strong>。</p><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/00.jpg" alt="img"></p><h2 id="访问-github"><a href="#访问-github" class="headerlink" title="访问 github"></a>访问 github</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名称/仓库名称@版本号/目录</span><br></pre></td></tr></table></figure><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/11.jpg" alt="img"></p><h2 id="访问-npm"><a href="#访问-npm" class="headerlink" title="访问 npm"></a>访问 npm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/npm/包名@版本号/目录</span><br></pre></td></tr></table></figure><h2 id="访问-wordpress"><a href="#访问-wordpress" class="headerlink" title="访问 wordpress"></a>访问 wordpress</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 加载任何插件从WordPress.org插件SVN repo</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/plugins/project/tags/version/file</span><br><span class="line"></span><br><span class="line">// 加载精确版本</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/plugins/wp-slimstat/tags/4.6.5/wp-slimstat.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 加载最新版本</span><br><span class="line"></span><br><span class="line">// 你不应该在生产中使用这个</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/plugins/wp-slimstat/trunk/wp-slimstat.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 从WordPress.org的主题SVN repo加载任何主题</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/themes/project/version/file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 加载精确版本</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/wp/themes/twenty-eightteen/1.7/assets/js/html5.js</span><br></pre></td></tr></table></figure><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p>方案二是替代方法，就是找<strong>其他免费的做图床服务的网站或平台</strong>。但是以我自己体验过的几个做图床的平台，个人感觉还是很不好。比如他们可能是出于监管或业务原因，对图片内容做了识别，<strong>稍微有点敏感的或者是有二维码的都无法上传</strong>，而且有的对<strong>单位时间内上传个数做了限制</strong>等等。</p><p>毕竟是人家免费提供的图床服务，每天的流量消耗也很大，都要生存，所以限制之类的也很正常。那用付费的图床服务不就行了吗，这当然也是很不错的，但是我这里写的是<strong>零成本</strong>，所以就把目光转移到了<strong>其他提供托管服务的平台</strong>。</p><p>没错就用国内的 Gitee，图片和视频放上去绝对比在 Github 上访问要稳定，而且使用方法也是一样。创建一个 public 仓库，<strong>通过 git 工具提交后，参考我下面的访问链接就能使用了</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/gaoxingqufuhchao/bqs-toolsbox-uniapp/raw/master/static/images/componentBg.png</span><br></pre></td></tr></table></figure><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/22.jpg" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>关于零成本可能要做成一个系列了，因为<strong>作为独立开发者，在自己的产品还没有经过市场检验，降低成本绝对是首选</strong>。尽管开发方面不用支出，但是面向 C 端至少要有个云服务器和数据库吧，需要数据炼丹总得要部署个爬虫吧，现在都进入 AI 时代了，给产品加上 AI 功能也得要吧。</p><p>这些其实都可以通过 Github 和零零散散的小众平台来实现零成本，<strong>比如用某云文档做数据库，Github 来定时跑爬虫，某平台的 GPTs 也提供了带有限制的 API 服务</strong>。别看人家平台的 api 每天就 1000 次的调用限制，要知道很多情况下，自己刚做的小程序和什么应用每天有几百的访问就很不错了，所以能用一些免费 api 来给自己应用增加有用性就先用着，量起来了可以选择付费或自研。</p><p><strong>那么，后面我再慢慢分享怎么零成本玩上面我提到的几个东西吧。</strong></p><p><img src="https://www.zerofc.cn/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E5%8A%A0%E9%80%9F%20%E2%80%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E2%80%9D/33.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 运维相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零成本搭建个人图床服务器</title>
      <link href="/2024/12/05/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/12/05/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图床服务器是一种用于存储和管理图片的服务器，可以给我们提供将图片上传后能外部访问浏览的服务。这样我们在写文章时插入的说明图片，就可以集中放到图床里，既方便多平台文章发布，又能统一管理和备份。</p><p>当然下面通过在GitHub上搭建的图床，不光不用成本，而且还能上传视频或音乐。操作方法和以前在GitHub上搭建静态博客类似，但是中间会多一些一些工具介绍和技巧。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><h5 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h5></li><li><h5 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h5></li><li><h5 id="连接仓库"><a href="#连接仓库" class="headerlink" title="连接仓库"></a>连接仓库</h5></li><li><h5 id="应用Typora"><a href="#应用Typora" class="headerlink" title="应用Typora"></a>应用Typora</h5></li></ul><h2 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>创建仓库和平时的代码托管一样，添加一个public权限仓库，用默认的main分支。当然也可以提前创建一个目录，但是根目录最好有一个index.html。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608131742136.png" alt="image-20240608131742136"></p><h2 id="设置仓库-1"><a href="#设置仓库-1" class="headerlink" title="设置仓库"></a>设置仓库</h2><p>设置仓库主要是添加提交Token，和配置GitHub Pages参数。而这两小步的设置，在前面文章 “Hexo博客搭建” 有比较详细介绍，所以这里就稍微文字带过了。</p><h4 id="Token生成"><a href="#Token生成" class="headerlink" title="Token生成"></a>Token生成</h4><p>登陆GitHub -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Tokens(classic)，然后点击 “Generate new token”，填写备注和过期时间，权限主要勾选 “repo”、“workflow”、“user”。最后生成 “ghp_” 前缀的字符串就是Token了，复制并保存下来。</p><h4 id="GitHub-Pages配置"><a href="#GitHub-Pages配置" class="headerlink" title="GitHub Pages配置"></a>GitHub Pages配置</h4><p>进入仓库页 -&gt; Settings -&gt; Pages，设置Branch，指定仓库的分支和分支根目录，Source选择 “Deploy from a branch”，最后刷新或者重新进入，把访问链接地址复制保存下来。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608134712059.png" alt="image-20240608134712059"></p><h2 id="连接仓库-1"><a href="#连接仓库-1" class="headerlink" title="连接仓库"></a>连接仓库</h2><p>连接可以除了API方式，也可以用第三方的工具，比如 “PicGo”。工具位置自行搜索哈，下面以他为例，演示工具的连接配置、文件上传和访问测试。</p><h4 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h4><p>找到 “图床设置” -&gt; “GitHub”，下面主要填写仓库名（需带上账户名），分支名（默认main即可），Token（上面生成保存下来的），存储路径（后带斜杠）可以填写已存在，如果不存在则在仓库根目录下新建。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608140418396.png" alt="image-20240608140418396"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>文件格式除了下面指定的如Markdown、HTML、URL外，还能上传图片音乐视频等（亲测有效）。点击 “上传区”，将文件直接拖动到该窗口，提示上传成功后，进入GitHub仓库下查看是否存在。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608141234199.png" alt="image-20240608141234199"></p><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问就是能将仓库里的图片或视频以外链的方式展示，就像将文件放在云平台的存储桶一样。将前面GitHub Pages开启的链接复制下来，然后拼接存储路径和文件名就可以访问了。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608144141950.png" alt="image-20240608144141950"></p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608144227453.png" alt="image-20240608144227453"></p><h2 id="应用Typora-1"><a href="#应用Typora-1" class="headerlink" title="应用Typora"></a>应用Typora</h2><p>Typora通过PicGo软件自动上传图片到GitHub仓库中。打开Typora的文件 -&gt;偏好设置 -&gt; 图像 -&gt; 上传图片 -&gt; 配置PicGo路径，然后指定一下PicGo的安装位置。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608145919367.png" alt="image-20240608145919367"></p><h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>可以点击 “验证图片上传选项”，验证成功就代表已经将Typora的图标上传到仓库，也可以直接将图片复制到当前md文档位置。</p><p><img src="/img/%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240608150003173.png" alt="image-20240608150003173"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image-20240608145607117](https://raw.githubusercontent.com/z11r00/zd_image_bed/main/img/image-20240608145607117.png)</span><br></pre></td></tr></table></figure><p>上传成功后会将返回一个如上面的远程链接，并且无法打开和显示，这是就要在PicGo工具的图床设置中。将自己GitHUb上的域名设定为自定义域名，格式 “域名&#x2F;仓库名”,  在Typora上传图片后重启就可展示了。</p><p><img src="https://www.zerofc.cn/zd_image_bed/img/test/image-20240612104856943.png" alt="image-20240612104856943"></p>]]></content>
      
      
      <categories>
          
          <category> 运维相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6个小众的独立博客圈</title>
      <link href="/2024/12/04/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/"/>
      <url>/2024/12/04/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/</url>
      
        <content type="html"><![CDATA[<p>名称：BlogFinder<br>地址：<a href="https://bf.zzxworld.com/">https://bf.zzxworld.com</a><br>描述：一个聚合了优秀的个人博客，同样免注册登陆就能发布。可以根据话题：读书、旅行、好物、极客等筛选网站或文章。</p><p><img src="/img/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/BlogFinder.jpg" alt="img"></p><p>名称：ZERO开发<br>地址：<a href="https://www.zerofc.cn/">https://www.zerofc.cn</a><br>描述：一个持续探索副业的独立开发人博客，网站不仅有实战类的技术文章，也有多款在线工具包和小游戏，同时提供友链服务。</p><p><img src="/img/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/ZERO%E5%BC%80%E5%8F%91.jpg" alt="img"></p><p>名称：博客录<br>地址：<a href="https://boke.lu/">https://boke.lu</a><br>描述：一个不用登陆就能发布个人网站的博客圈子，如果是站长，适合做友链，其他时候也可以用来摸鱼，博客间串门。</p><p><img src="/img/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/%E5%8D%9A%E5%AE%A2%E5%BD%95.jpg" alt="img"></p><p>名称：Blogwe<br>地址：<a href="https://blogwe.com/">https://blogwe.com</a><br>描述：是较早的个人博客导航网站，为纯公益性网站，网站宗旨是通过博客导航串联博客圈子，增强互动交流，认识更多朋友。</p><p><img src="/img/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/%E5%8D%9A%E5%AE%A2%E6%88%91%E4%BB%AC.jpg" alt="img"></p><p>名称：博客志<br>地址：<a href="https://www.jetli.com.cn/">https://www.jetli.com.cn</a><br>描述：博客志-优秀个人独立博客导航，建站于2006年，专注于收藏有价值的有效更新的优秀个人独立博客。</p><p><img src="/img/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/%E5%8D%9A%E5%AE%A2%E5%BF%97.jpg" alt="img"></p><p>名称：博友圈<br>地址：<a href="https://www.boyouquan.com/">https://www.boyouquan.com</a><br>描述：那些记忆中有趣的博客还在更新吗？博友圈是博客人的专属朋友圈，连接还在写博的博友，让那属于文字的时代延续光辉！</p><p><img src="/img/6%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%9C%88/%E5%8D%9A%E5%8F%8B%E5%9C%88.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6个AI视频操作的工具集</title>
      <link href="/2024/12/03/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
      <url>/2024/12/03/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>名称：kaiber<br>地址：<a href="https://kaiber.ai/">https://kaiber.ai/</a><br>描述：kaiber 图片转换为视频</p><p><img src="/img/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/2.jpg" alt="img"></p><p>名称：wonder studio<br>地址：<a href="https://wonderdynamics.com/">https://wonderdynamics.com/</a><br>描述：Wonder Studio 替换视频中人物</p><p><img src="/img/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/3.jpg" alt="img"></p><p>名称：runway<br>地址：<a href="https://runwayml.com/research/gen-2/">https://runwayml.com/research/gen-2/</a><br>描述：Runway GEN2 文字生成视频</p><p><img src="/img/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/4.jpg" alt="img"></p><p>名称：reddit<br>地址：<a href="https://www.reddit.com/r/StableDiffusion/">https://www.reddit.com/r/StableDiffusion/</a><br>描述：Stable Diff+ControlNet+EBsynth reddit教程</p><p><img src="/img/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/5.jpg" alt="img"></p><p>名称：3D模型动作生成<br>地址：<a href="https://www.zhengyiluo.com/PHC-Site/">https://www.zhengyiluo.com/PHC-Site/</a><br>描述：PHC AI生成动作作为SD输入</p><p><img src="/img/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/6.jpg" alt="img"></p><p>名称：3D场景生成<br>地址：<a href="https://twitter.com/LumaLabsAl">https://twitter.com/LumaLabsAl</a><br>描述：Luma Al NeRF生成3D场景</p><p><img src="/img/6%E4%B8%AAAI%E8%A7%86%E9%A2%91%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86/7.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6个摸鱼神站，真的猎奇（一）</title>
      <link href="/2024/12/03/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/12/03/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>名称：中华中华珍宝馆<br>地址：<a href="https://g2.ltfc.net/home">https://g2.ltfc.net/home</a><br>描述：中华珍宝馆-超清中华古玩字画淡——扬无咎的梅花精宝</p><p><img src="/img/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/2.%E4%B8%AD%E5%8D%8E%E7%8F%8D%E5%AE%9D%E9%A6%86.jpg" alt="img"></p><p>名称：随机少女<br>地址：<a href="https://thisanimedoesnotexist.ai/">https://thisanimedoesnotexist.ai</a><br>描述：随机少女-随机生成二次元少女</p><p><img src="/img/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/3%E9%9A%8F%E6%9C%BA%E5%B0%91%E5%A5%B3.jpg" alt="img"></p><p>名称：濒临灭绝动物拼图<br>地址：<a href="http://species-in-pieces.com/">http://species-in-pieces.com/</a><br>描述：频临灭绝的动物拼图碎片</p><p><img src="/img/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/4%E6%BF%92%E4%B8%B4%E7%81%AD%E7%BB%9D%E5%8A%A8%E7%89%A9%E6%8B%BC%E5%9B%BE.jpg" alt="img"></p><p>名称：中国妖怪百集<br>地址：<a href="https://www.czhiyao.com/">https://www.czhiyao.com/</a><br>描述：知妖中国妖怪百集</p><p><img src="/img/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/5%E4%B8%AD%E5%9B%BD%E5%A6%96%E6%80%AA%E7%99%BE%E9%9B%86.jpg" alt="img"></p><p>名称：大量冷知识<br>地址：https:&#x2F;jandan.net&#x2F;<br>描述：煎蛋网收录了大量冷知识</p><p><img src="/img/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/6%E7%85%8E%E8%9B%8B%E7%BD%91.jpg" alt="img"></p><p>名称：蠕虫蹦迪<br>地址：<a href="http://www.staggeringbeauty.com/">http://www.staggeringbeauty.com</a><br>描述：蠕虫随着鼠标摆动蹦迪</p><p><img src="/img/6%E4%B8%AA%E6%91%B8%E9%B1%BC%E7%A5%9E%E7%AB%99%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%8C%8E%E5%A5%87%EF%BC%88%E4%B8%80%EF%BC%89/7%E8%A0%95%E8%99%AB%E8%B9%A6%E8%BF%AA.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7个免费视频剪辑素材网站</title>
      <link href="/2024/12/03/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/"/>
      <url>/2024/12/03/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>名称：CG、AE素材<br>地址：<a href="https://www.newcger.com/">https://www.newcger.com/</a><br>描述：新cg宠儿CG、AE为主</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/2.jpg" alt="img"></p><p>名称：pexels素材<br>地址：<a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a><br>描述：pexels 无需注册登录即下载4K</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/3.jpg" alt="img"></p><p>名称：4K视频素材<br>地址：<a href="https://pixabay.com/videos/">https://pixabay.com/videos/</a><br>描述：pixabay 矢量图、系列4K视频</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/4.jpg" alt="img"></p><p>名称：videezy素材<br>地址：<a href="https://www.videezy.com/">https://www.videezy.com/</a><br>描述：videezy分类明确，个别收费</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/5.jpg" alt="img"></p><p>名称：mazwai素材<br>地址：<a href="https://mazwai.com/">https://mazwai.com/</a><br>描述：mazwai 高质量电影风格</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/6.jpg" alt="img"></p><p>名称：ignitemotion<br>地址：<a href="https://www.ignitemotion.com/">https://www.ignitemotion.com/</a><br>描述：ignitemotion 低画质CG科普视频</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/7.jpg" alt="img"></p><p>名称：4K123论坛<br>地址：<a href="https://www.4k123.com/">https://www.4k123.com/</a><br>描述：4k123远古论坛形式资源</p><p><img src="/img/7%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99/8.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7个无版权实用的图片素材下载网站</title>
      <link href="/2024/12/03/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/"/>
      <url>/2024/12/03/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>名称：picjumbo<br>地址：https:&#x2F;picjumbo.com&#x2F;<br>描述：picjumbo高清静物风景图</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/2picjumbo.jpg" alt="img"></p><p>名称：foodiesfeed<br>地址：<a href="https://www.foodiesfeed.com/">https://www.foodiesfeed.com/</a><br>描述：foodiesfeed免费食物类图片</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/3foodiesfeed.jpg" alt="img"></p><p>名称：gratisography<br>地址：<a href="https://gratisography.com/">https://gratisography.com/</a><br>描述：gratisography 免费下载10张</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/4gratisography.jpg" alt="img"></p><p>名称：cupcake<br>地址：<a href="https://cupcake.nilssonlee.se/">https://cupcake.nilssonlee.se/</a><br>描述：cupcake 唯美冷艳个人摄影作品</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/5cupcake.jpg" alt="img"></p><p>名称：magdeleine<br>地址：<a href="https://magdeleine.co/">https://magdeleine.co/</a><br>描述：magdeleine 精致的文艺图</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/6magde.jpg" alt="img"></p><p>名称：textures<br>地址：<a href="https://www.textures.com/">https://www.textures.com/</a><br>描述：designerspics 文艺清新图免费</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/7textures.jpg" alt="img"></p><p>名称：stockvault<br>地址：<a href="https://www.stockvault.net/">https://www.stockvault.net/</a><br>描述：designerspics 文艺清新图免费</p><p><img src="/img/7%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99/8stockvault.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8个程序员常用开发工具官网</title>
      <link href="/2024/12/03/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/"/>
      <url>/2024/12/03/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>名称：cacher<br>地址：<a href="https://www.cacher.io/">https://www.cacher.io/</a><br>描述：cacher代码块组织管理和标记</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/2.jpg" alt="img"></p><p>名称：FTPS工具<br>地址：<a href="https://filezilla-project.org/">https://filezilla-project.org/</a><br>描述：FTP,SFTPFTPS客户端</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/3.jpg" alt="img"></p><p>名称：API文档工具<br>地址：<a href="https://velocity.silverlakesoftware.com/">https://velocity.silverlakesoftware.com/</a><br>描述：velocity-离线API文档工具</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/4.jpg" alt="img"></p><p>名称：winscp工具<br>地址：<a href="https://winscp.net/eng/docs/lang:chs/">https://winscp.net/eng/docs/lang:chs/</a><br>描述：winscp-免费开源的FTP工具</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/5.jpg" alt="img"></p><p>名称：网络抓包工具<br>地址：<a href="https://www.wireshark.org/">https://www.wireshark.org/</a><br>描述：wireshark-网络抓包分析工具</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/6.jpg" alt="img"></p><p>名称：命令行shell<br>地址：<a href="https://www.zsh.org/">https://www.zsh.org/</a><br>描述：zsh-命令行shell</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/7.jpg" alt="img"></p><p>名称：gitextensions<br>地址：<a href="https://gitextensions.github.io/">https://gitextensions.github.io</a><br>描述：gitextension-git UI</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/8.jpg" alt="img"></p><p>名称：meldmerge<br>地址：<a href="https://meldmerge.org/">https://meldmerge.org/</a><br>描述：meldmerge-可视化差异和合并</p><p><img src="/img/8%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%AE%98%E7%BD%91/9.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8个工具，玩转短视频剪辑</title>
      <link href="/2024/12/02/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/"/>
      <url>/2024/12/02/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>名称：33台词<br>地址：<a href="https://33.agilestudio.cn/">https://33.agilestudio.cn</a><br>描述：一个好用的电影字幕搜索引擎，轻松搜索台词出现的影片和时间点，是视频创作者的必备工具，是帮助英语学习的利器。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/33%E5%8F%B0%E8%AF%8D-%E7%94%A8%E5%8F%B0%E8%AF%8D%E6%89%BE%E7%94%B5%E5%BD%B1.jpg" alt="img"></p><p>名称：dialogue<br>地址：<a href="https://dialogue.moe/">https://dialogue.moe</a><br>描述：根据输入的台词，按照权重自动匹配网上所有的动漫，适合动漫混剪的短视频博主。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E5%8A%A8%E6%BC%AB%E5%8F%B0%E8%AF%8D.jpg" alt="img"></p><p>名称：牛片网<br>地址：<a href="https://peiyin.6pian.cn/">https://peiyin.6pian.cn</a><br>描述：牛片网为影视公司和工作室免费提供文字转录音服务，语音在线配音合成器完全免费，可选择配音模板，多用于专题片配音、宣传片的配音生成。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E7%89%9B%E7%89%87-AI%E9%85%8D%E9%9F%B3.jpg" alt="img"></p><p>名称：七味<br>地址：<a href="https://www.pkmp4.xyz/">https://www.pkmp4.xyz</a><br>描述：七味网，最新电影，最新电视剧，大片，在线电影，在线观看，电影下载，迅雷下载，磁力下载，网盘下载，离线下载。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E4%B8%83%E5%91%B3-%E6%89%BE%E7%B4%A0%E6%9D%90.jpg" alt="img"></p><p>名称：音范丝<br>地址：<a href="https://www.yinfans.me/">https://www.yinfans.me</a><br>描述：音范丝是一个搜集、高品质电影资源网站，精选4K蓝光原盘下载，顶级收藏，最适合对画质有极度要求的博主了。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E9%9F%B3%E8%8C%83%E4%B8%9D-%E8%93%9D%E5%85%89%E9%AB%98%E6%B8%85.jpg" alt="img"></p><p>名称：预告片世界<br>地址：<a href="https://www.6huo.com/">https://www.6huo.com</a><br>描述：网站专注于提供高清电影预告片资源，电影视频，预告片，正片片段，制作花絮，更适合做影视混剪、知识分享博主的素材了。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E9%A2%84%E5%91%8A%E7%89%87%E4%B8%96%E7%95%8C.jpg" alt="img"></p><p>名称：找台词<br>地址：<a href="https://zhaotaici.cn/">https://zhaotaici.cn</a><br>描述：这是一个收录丰富的找台词网站，主要提供电影、电视剧台词搜索，可按片名、导演等筛选并查看具体台词。</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E6%89%BE%E5%8F%B0%E8%AF%8D.jpg" alt="img"></p><p>名称：真不卡影院<br>地址：<a href="https://zhenbuka.net/">https://zhenbuka.net</a><br>描述：一个在线观看电影、美剧、韩剧、动漫真不卡网站，值得每一个影迷朋友收藏，看片我真不卡，可观看、可下载、找剪辑素材！</p><p><img src="/img/8%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%8E%A9%E8%BD%AC%E7%9F%AD%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/%E7%9C%9F%E4%B8%8D%E5%8D%A1%E5%BD%B1%E9%99%A2.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8个AI视频工具，短视频必备</title>
      <link href="/2024/12/02/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/"/>
      <url>/2024/12/02/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<p>名称：runway<br>地址：https:&#x2F;runwayml.com&#x2F;<br>描述：runwayml 图片、视频编辑、生成</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/2runwayml.jpg" alt="img"></p><p>名称：cascadeur<br>地址：<a href="https://cascadeur.com/">https://cascadeur.com/</a><br>描述：cascadeur 基于物理的角色动画</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/3cascadeur.jpg" alt="img"></p><p>名称：synthesia<br>地址：<a href="https://www.synthesia.io/">https://www.synthesia.io/</a><br>描述：synthesia 15分钟内生成专业视频</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/4secesd.jpg" alt="img"></p><p>名称：zubtitle<br>地址：<a href="https://zubtitle.com/">https://zubtitle.com/</a><br>描述：zubtitle自动视频加字幕</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/5zubtitle.jpg" alt="img"></p><p>名称：getmunch<br>地址：https:&#x2F;<a href="http://www.getmunch.com/">www.getmunch.com/</a><br>描述：getmunch Al提取视频最佳内容</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/6getmunch.jpg" alt="img"></p><p>名称：fliki<br>地址：https:&#x2F;fliki.ai&#x2F;<br>描述：fliki 文本转有声音的视频</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/7fliki.jpg" alt="img"></p><p>名称：peech<br>地址：https:&#x2F;<a href="http://www.peech-ai.com/">www.peech-ai.com/</a><br>描述：peech-ai自动视频编辑管理平台</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/8peech.jpg" alt="img"></p><p>名称：dreamfaceapp<br>地址：<a href="https://dreamfaceapp.com/">https://dreamfaceapp.com/</a><br>描述：dreamfaceapp 用AI驱动人脸动画</p><p><img src="/img/8%E4%B8%AAAI%E8%A7%86%E9%A2%91%E5%B7%A5%E5%85%B7%EF%BC%8C%E7%9F%AD%E8%A7%86%E9%A2%91%E5%BF%85%E5%A4%87/9dreamfaceapp.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9个AI音频润色、音乐生成工具</title>
      <link href="/2024/12/02/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/12/02/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>名称：soundraw<br>地址：<a href="https://soundraw.io/">https://soundraw.io/</a><br>描述：soundraw Al生成和修改音乐</p><p><img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/AI%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E4%BF%AE%E6%94%B9.jpg" alt="img"></p><p>名称：mubert<br>地址：<a href="https://mubert.com/">https://mubert.com/</a><br>描述：mubert Al生成音乐</p><p><img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/AI%E9%9F%B3%E9%A2%91%E7%94%9F%E6%88%90.jpg" alt="img"></p><p>名称：endel<br>地址：<a href="https://endel.io/">https://endel.io/</a><br>描述：endel 个性化背景音乐</p><p><img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E4%B8%AA%E6%80%A7%E5%8C%96%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90.jpg" alt="img"></p><p>名称：papercup<br>地址：<a href="https://www.papercup.com/">https://www.papercup.com/</a><br>描述：papercup AI配乐和视频翻译</p><p><img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E9%85%8D%E4%B9%90%E3%80%81%E8%A7%86%E9%A2%91%E7%BF%BB%E8%AF%91.jpg" alt="img"></p><p>名称：lalal<br>地址：<a href="https://www.lalal.ai/">https://www.lalal.ai/</a><br>描述：lalal 从任意音频中提取人声伴奏</p><p><img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E4%BA%BA%E5%A3%B0%E4%BC%B4%E5%A5%8F%E6%8F%90%E5%8F%96.jpg" alt="img"></p><p>名称：voicemod<br>地址：<a href="https://www.voicemod.net/zh">https://www.voicemod.net/zh</a><br>描述：voicemod 实时变声器<img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E5%AE%9E%E6%97%B6%E5%8F%98%E5%A3%B0%E5%99%A8.jpg" alt="img"></p><p>名称：brain<br>地址：<a href="https://www.brain.fm/">https://www.brain.fm/</a><br>描述：brain.fm生成冥想、睡眠、专注<img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E7%9D%A1%E7%9C%A0%E5%86%A5%E6%83%B3%E9%9F%B3%E9%A2%91.jpg" alt="img"></p><p>名称：riffusion<br>地址：<a href="https://www.riffusion.com/">https://www.riffusion.com/</a><br>描述：riffusion 提示词生成音乐<img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E6%8F%90%E7%A4%BA%E8%AF%8D%E7%94%9F%E6%88%90%E9%9F%B3%E4%B9%90.jpg" alt="img"></p><p>名称：murf<br>地址：<a href="https://murf.ai/">https://murf.ai/</a><br>描述：murf声音克隆转换、文本转音频<img src="/img/9%E4%B8%AAAI%E9%9F%B3%E9%A2%91%E6%B6%A6%E8%89%B2%E3%80%81%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/%E6%96%87%E6%9C%AC%E8%BD%AC%E9%9F%B3%E9%A2%91%EF%BC%8C%E5%A3%B0%E9%9F%B3%E5%85%8B%E9%9A%86.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 51轻创 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ小程序已发布，但无法被搜索的解决方案</title>
      <link href="/2024/11/12/QQ%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B7%B2%E5%8F%91%E5%B8%83%EF%BC%8C%E4%BD%86%E6%97%A0%E6%B3%95%E8%A2%AB%E6%90%9C%E7%B4%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2024/11/12/QQ%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B7%B2%E5%8F%91%E5%B8%83%EF%BC%8C%E4%BD%86%E6%97%A0%E6%B3%95%E8%A2%AB%E6%90%9C%E7%B4%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的QQ小程序在2024年8月就已经审核通过，上架后却一直无法被搜索到。打开后，再在QQ上下拉查看 “最近使用”，发现他出现一下又马上消失。</p><p>上线是按正常流程走的，开发、备案、审核，也没有任何违规，后台也没收到说被封或异常的信息。</p><p><img src="https://image-static.segmentfault.com/146/197/1461978197-67330ea4c3308_fix732" alt="img"></p><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><p>难道是我名字（实用工具箱）问题，当我要去后台修改名字时，提示要重新备案。不过也让我想起之前我搜索的时候，别人也有用这名字，所以根本不是这个原因。</p><p>会不会是后台哪里设置了，第一次玩QQ小程序后台，搞不好一开始的时候我乱点了什么。最后找啊找，终于在 “关联设置” 中找到了问题所在。</p><p><img src="https://image-static.segmentfault.com/353/254/3532545970-67330f3e9057c_fix732" alt="img"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在QQ后台的设置下的 “关联设置” 里 “QQ频道” 有一个 “仅允许在机器人服务中使用”，这一项给出的解释是 “打开后，QQ小程序推荐页将不会展示此小程序”，没错，我勾选了。</p><p>尴不尴尬，去掉后什么无法被搜索，什么在最近使用框里马上消失的问题，全部解决。所以我之前刚上架时没有自然流量也是因为这个，那我才放开小程序推荐，官方会不会就给推了啊，这个只能看后面几天的情况才能知道，但现在的我还是急需流量。</p><p><img src="https://image-static.segmentfault.com/412/768/4127687719-67330fbceb690_fix732" alt="img"></p><h1 id="找流量"><a href="#找流量" class="headerlink" title="找流量"></a>找流量</h1><p>为什么着急找流量？因为QQ小程序的流量主开通不同于微信小程序，他的要求更高，必须连续7天内，每天的UV不能低于100。</p><p>虽然700UV也不多，但他不是累积的，过了7天没达量，前面的UV总数作废。在不清楚明天有没有自然流量的情况，我决定找人友链，就是我们在自己的小程序里互相跳转。</p><h1 id="友链之路"><a href="#友链之路" class="headerlink" title="友链之路"></a>友链之路</h1><p>小程序友链，也就是小程序跳小程序，由于我的没有做后台管理，界面展示是写死的，加这个要改两个地方，一个是配置，一个是添加点击跳转事件。</p><h3 id="配置，只需在app-json中添加"><a href="#配置，只需在app-json中添加" class="headerlink" title="配置，只需在app.json中添加"></a>配置，只需在app.json中添加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;navigateToMiniProgramAppIdList&quot;: [</span><br><span class="line">    &quot;appId&quot;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="添加点击跳转事件"><a href="#添加点击跳转事件" class="headerlink" title="添加点击跳转事件"></a>添加点击跳转事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qq.navigateToMiniProgram(&#123;</span><br><span class="line">    appId: &#x27;1112309851&#x27;,</span><br><span class="line">    success(res) &#123;</span><br><span class="line">        // 跳转成功</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>其实平台刚上线时，好像是19年还是18年，个人开发者只要一上架自己的小程序就能开通流量主。现在我的心态，借张伟名言：机会像雨点般打来, 而我却一一闪过。</p><p>不过QQ小程序的应用场景还是很多元化的，群和频道，机器人里都能绑定，外加互助一下其实也很快，所以，大家要和我一起吗？我建了一个扣扣群，或加我 QQ：2652364582，互帮互助。</p><p><img src="https://image-static.segmentfault.com/391/757/3917570979-67331241979aa_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP如何对接支付宝JSAPI</title>
      <link href="/2024/11/03/PHP%E5%A6%82%E4%BD%95%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9DJSAPI/"/>
      <url>/2024/11/03/PHP%E5%A6%82%E4%BD%95%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9DJSAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽然对接支付宝支付功能很常见，但是随着项目业务不断调整，有时候支付宝也在迭代。过段时间不看很可能就忘了，比如证书过期了，连密钥生成都不知道怎么弄。所以我就在这里就再总结一下JSAPI的对接步骤和遇到的几个小坑。</p><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><ol><li>服务端请求接口返回 “商户协议状态非正常状态”。</li><li>前端调起支付时报6001错误。</li><li>最新的JSAPI已经不再支持预支付串。</li></ol><h1 id="接口加密方式"><a href="#接口加密方式" class="headerlink" title="接口加密方式"></a>接口加密方式</h1><p>根据我以往的经验，对接支付宝支付，偶尔改动的地方是返回部分，而容易忘记的是接口加密部分。</p><ol><li><h2 id="密钥方式"><a href="#密钥方式" class="headerlink" title="密钥方式"></a>密钥方式</h2></li></ol><p>用SDK要使用AopClient包，要求有开发者私钥（APP_PRIVATE_KEY）和支付宝公钥（ALIPAY_PUBLIC_KEY），都是在支付宝商户平台操作生成。</p><ol start="2"><li><h2 id="证书方式"><a href="#证书方式" class="headerlink" title="证书方式"></a>证书方式</h2></li></ol><p>证书模式用的是AopCertClient包，要求在商户平台下载应用公钥证书、支付宝公钥证书、支付宝根证书。</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732" alt="img"></p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><ol><li><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付宝小程序</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"><span class="comment">// 网关地址</span></span><br><span class="line">    <span class="string">&quot;GATEWAY_URL&quot;</span> =&gt; <span class="string">&#x27;https://openapi.alipay.com/gateway.do&#x27;</span>,</span><br><span class="line">    <span class="comment">// appId</span></span><br><span class="line">    <span class="string">&quot;APP_ID&quot;</span> =&gt; <span class="string">&quot;20180**********15&quot;</span>,</span><br><span class="line">    <span class="comment">//合作ID</span></span><br><span class="line">    <span class="string">&quot;PID&quot;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// 私钥</span></span><br><span class="line">    <span class="string">&quot;RSA_PRIVATE_KEY&quot;</span> =&gt; <span class="string">&#x27;ali_private.pem&#x27;</span>,</span><br><span class="line">    <span class="comment">// 公钥</span></span><br><span class="line">    <span class="string">&quot;ALIPAYRSA_PUBLIC_KEY&quot;</span> =&gt; <span class="string">&#x27;apiclient_cert.pem&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="2"><li><h2 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h2></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">pay</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span>  <span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params"><span class="variable">$class_name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$class_name</span> = <span class="string">&#x27;pay\\&#x27;</span>.<span class="variable">$class_name</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$class_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><h2 id="支付方法抽象"><a href="#支付方法抽象" class="headerlink" title="支付方法抽象"></a>支付方法抽象</h2></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">pay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PayBase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span>(<span class="params"><span class="variable">$order</span>,<span class="variable">$notify_url</span></span>)</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">batchpay</span>(<span class="params"><span class="variable">$order</span></span>)</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">version</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><h2 id="密钥方式封装"><a href="#密钥方式封装" class="headerlink" title="密钥方式封装"></a>密钥方式封装</h2></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">pay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">Env</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/AopCertClient.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayFundTransUniTransferRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayOpenPublicTemplateMessageIndustryModifyRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayUserInfoShareRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipaySystemOauthTokenRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayTradeAppPayRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayTradeCreateRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayFundAuthOrderAppFreezeRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayFundAuthOrderUnfreezeRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayTradeRefundRequest.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝企业支付</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">extends</span> <span class="title">PayBase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$config</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aop</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = <span class="keyword">include</span> <span class="string">&#x27;config/ali_pay_config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$path</span> = <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$RSA_PRIVATE_KEY</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;RSA_PRIVATE_KEY&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$ALIPAYRSA_PUBLIC_KEY</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;ALIPAYRSA_PUBLIC_KEY&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop = <span class="keyword">new</span> <span class="title class_">\AopClient</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;gatewayUrl = <span class="variable language_">$this</span>-&gt;config[<span class="string">&quot;GATEWAY_URL&quot;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;appId = <span class="variable language_">$this</span>-&gt;config[<span class="string">&quot;APP_ID&quot;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;rsaPrivateKey = <span class="variable">$RSA_PRIVATE_KEY</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;alipayrsaPublicKey= <span class="variable">$ALIPAYRSA_PUBLIC_KEY</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;apiVersion = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;signType = <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;postCharset = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;format = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">version</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><h2 id="证书方式封装"><a href="#证书方式封装" class="headerlink" title="证书方式封装"></a>证书方式封装</h2></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">pay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">Env</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/AopCertClient.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayFundTransUniTransferRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayOpenPublicTemplateMessageIndustryModifyRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayUserInfoShareRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipaySystemOauthTokenRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayTradeAppPayRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayTradeCreateRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayFundAuthOrderAppFreezeRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayFundAuthOrderUnfreezeRequest.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib/aop/request/AlipayTradeRefundRequest.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝企业支付</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">extends</span> <span class="title">PayBase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$config</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aop</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = <span class="keyword">include</span> <span class="string">&#x27;config/ali_pay_config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$path</span> = <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$RSA_PRIVATE_KEY</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;RSA_PRIVATE_KEY&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$ALIPAYRSA_PUBLIC_KEY</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;ALIPAYRSA_PUBLIC_KEY&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop = <span class="keyword">new</span> <span class="title class_">\AopCertClient</span> ();</span><br><span class="line"></span><br><span class="line">            <span class="variable">$appCertPath</span> = <span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;cert&quot;</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;appCertPublicKey_2018091961451345.crt&quot;</span>;</span><br><span class="line">            <span class="variable">$alipayCertPath</span> = <span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;cert&quot;</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;alipayCertPublicKey_RSA2.crt&quot;</span>;</span><br><span class="line">            <span class="variable">$rootCertPath</span> = <span class="variable">$path</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;keys&quot;</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;cert&quot;</span>.DIRECTORY_SEPARATOR.<span class="string">&quot;alipayRootCert.crt&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;gatewayUrl = <span class="variable language_">$this</span>-&gt;config[<span class="string">&quot;GATEWAY_URL&quot;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;appId = <span class="variable language_">$this</span>-&gt;config[<span class="string">&quot;APP_ID&quot;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;rsaPrivateKey = <span class="variable">$RSA_PRIVATE_KEY</span>;</span><br><span class="line">            <span class="comment">//$this-&gt;aop-&gt;alipayrsaPublicKey= $ALIPAYRSA_PUBLIC_KEY;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;apiVersion = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;signType = <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;postCharset = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;format = <span class="string">&quot;json&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用getPublicKey从支付宝公钥证书中提取公钥</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;alipayrsaPublicKey = <span class="variable language_">$this</span>-&gt;aop-&gt;<span class="title function_ invoke__">getPublicKey</span>(<span class="variable">$alipayCertPath</span>);</span><br><span class="line">            <span class="comment">//是否校验自动下载的支付宝公钥证书，如果开启校验要保证支付宝根证书在有效期内</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;isCheckAlipayPublicCert = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//调用getCertSN获取证书序列号</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;appCertSN = <span class="variable language_">$this</span>-&gt;aop-&gt;<span class="title function_ invoke__">getCertSN</span>(<span class="variable">$appCertPath</span>);</span><br><span class="line">            <span class="comment">//调用getRootCertSN获取支付宝根证书序列号</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;aop-&gt;alipayRootCertSN = <span class="variable language_">$this</span>-&gt;aop-&gt;<span class="title function_ invoke__">getRootCertSN</span>(<span class="variable">$rootCertPath</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><h2 id="支付封装"><a href="#支付封装" class="headerlink" title="支付封装"></a>支付封装</h2></li></ol><p>这里要特别注意的是调用执行方法时，证书模式execute，密钥模式sdkExecute。密钥模式返回orderStr，证书模式返回tradeNO。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span>(<span class="params"><span class="variable">$order</span>,<span class="variable">$notify_url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="variable">$order</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该笔订单允许的最晚付款时间，逾期将关闭交易。</span></span><br><span class="line"><span class="variable">$timeout_express</span> = <span class="string">&quot;30m&quot;</span>;</span><br><span class="line"><span class="comment">// 订单总金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]</span></span><br><span class="line"><span class="variable">$total_amount</span> = <span class="variable">$data</span>[<span class="string">&#x27;total_amount&#x27;</span>];</span><br><span class="line"><span class="comment">// 商品的标题/交易标题/订单标题/订单关键字等。</span></span><br><span class="line"><span class="variable">$subject</span> = <span class="variable">$data</span>[<span class="string">&#x27;subject&#x27;</span>];</span><br><span class="line"><span class="comment">// 商户网站唯一订单号</span></span><br><span class="line"><span class="variable">$out_trade_no</span> = <span class="variable">$data</span>[<span class="string">&#x27;out_trade_no&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> = [</span><br><span class="line"><span class="string">&quot;timeout_express&quot;</span>   =&gt; <span class="string">&quot;30m&quot;</span>,</span><br><span class="line"><span class="string">&quot;total_amount&quot;</span>      =&gt; <span class="variable">$total_amount</span>,</span><br><span class="line"><span class="string">&quot;subject&quot;</span>           =&gt; <span class="variable">$subject</span>,</span><br><span class="line"><span class="string">&quot;out_trade_no&quot;</span>      =&gt; <span class="variable">$out_trade_no</span>,</span><br><span class="line"><span class="string">&quot;product_code&quot;</span>      =&gt; <span class="string">&quot;JSAPI_PAY&quot;</span>,</span><br><span class="line"><span class="string">&quot;op_app_id&quot;</span>      =&gt; <span class="variable language_">$this</span>-&gt;config[<span class="string">&quot;APP_ID&quot;</span>],</span><br><span class="line"><span class="string">&quot;buyer_id&quot;</span>      =&gt; <span class="variable">$order</span>[<span class="string">&#x27;open_id&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$jsonData</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$content</span>,JSON_UNESCAPED_UNICODE);</span><br><span class="line"></span><br><span class="line"><span class="variable">$request</span> = <span class="keyword">new</span> <span class="title class_">\AlipayTradeCreateRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置异步回调地址</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">setNotifyUrl</span>(<span class="title class_">Env</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;pay.coupon_notify&#x27;</span>));</span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">setBizContent</span>(<span class="variable">$jsonData</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 证书模式execute，密钥方式sdkExecute</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;aop-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$responseApiName</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>,<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getApiMethodName</span>()).<span class="string">&quot;_response&quot;</span>;</span><br><span class="line"><span class="variable">$response</span> = <span class="variable">$result</span>-&gt;<span class="variable">$responseApiName</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$response</span>-&gt;code)&amp;&amp;<span class="variable">$response</span>-&gt;code==<span class="number">10000</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$response</span>-&gt;trade_no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&#x27;调用JSAPI支付接口失败~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$order</span>,<span class="variable">$type</span>=<span class="string">&quot;pay&quot;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$data</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">&quot;pay&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 订单总金额，单位为元，精确到小数点后两位，取值范围[0.01,100000000]</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;total_amount&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;amount&#x27;</span>];</span><br><span class="line"><span class="comment">// 商品的标题/交易标题/订单标题/订单关键字等。</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;subject&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line"><span class="comment">// 商户网站唯一订单号</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;out_trade_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;order_no&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">&quot;freeze&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 商户授权资金订单号 ,不能包含除中文、英文、数字以外的字符，创建后不能修改，需要保证在商户端不重复。</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;out_order_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;order_no&#x27;</span>];</span><br><span class="line"><span class="comment">// 商户本次资金操作的请求流水号，用于标示请求流水的唯一性，不能包含除中文、英文、数字以外的字符，需要保证在商户端不重复。</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;out_request_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;request_no&#x27;</span>];</span><br><span class="line"><span class="comment">// 业务订单的简单描述，如商品名称等</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;order_title&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line"><span class="comment">// 需要冻结的金额，单位为：元（人民币），精确到小数点后两位 取值范围：[0.01,100000000.00]</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;amount&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;amount&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">&quot;unfreeze&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 支付宝资金授权订单号</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;auth_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;auth_no&#x27;</span>];</span><br><span class="line"><span class="comment">// 商户本次资金操作的请求流水号，同一商户每次不同的资金操作请求，商户请求流水号不能重复</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;out_request_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;request_no&#x27;</span>];</span><br><span class="line"><span class="comment">// 本次操作解冻的金额，单位为：元（人民币），精确到小数点后两位，取值范围：[0.01,100000000.00]</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;amount&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;amount&#x27;</span>];</span><br><span class="line"><span class="comment">// 商户对本次解冻操作的附言描述</span></span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;remark&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;remark&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退款</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">&quot;refund&quot;</span>)&#123;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;trade_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;trade_no&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;refund_amount&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;refund_amount&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;out_request_no&#x27;</span>] = <span class="variable">$order</span>[<span class="string">&#x27;out_request_no&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;form&#x27;</span>] = <span class="keyword">isset</span>(<span class="variable">$order</span>[<span class="string">&#x27;form&#x27;</span>]) ? <span class="variable">$order</span>[<span class="string">&#x27;form&#x27;</span>] : <span class="string">&quot;app&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/425/669/4256690665-67ea889189345_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> PHP开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付对接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙Next实战：烟花模拟器</title>
      <link href="/2024/10/07/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%83%9F%E8%8A%B1%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <url>/2024/10/07/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%83%9F%E8%8A%B1%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过上一篇文章可以看出，要在鸿蒙应用中实现特别炫的特效还是比较复杂。动画固然重要，但如果在赶工期的情况下，大家都会优先业务，那有没有简单快速的方法呢？</p><p>有的，也用像 Android 和 iOS 里 WebView 的方式，h5 的特效现在是应有尽有，把他嵌入鸿蒙 Next 应用里就可以，那如何在鸿蒙 Next 中使用 WebView 来实现电子烟花？</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://image-static.segmentfault.com/101/720/101720689-fba2ef9ffeb50e51" alt="img"></h1><h1 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h1><ol><li>组件拆解</li><li>资源引入</li><li>页面路由</li><li>WebView</li></ol><p><img src="https://image-static.segmentfault.com/155/091/1550919059-0684fa6bbb73ce95" alt="img"></p><h1 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h1><p>因为前面的木鱼和现在的烟花都是同一个小工具应用，公用组件的拆分、页面跳转和资源的引入全有涉及，所以就连同 WebView 一起总结一下。</p><h2 id="组件拆解"><a href="#组件拆解" class="headerlink" title="组件拆解"></a>组件拆解</h2><p>在 ArkUI 中，UI 显示的内容均为组件，由框架直接提供的称为系统组件，由开发者定义的称为自定义组件。这里我们将所有页面的导航拆分成一个公用组件，并定义为 HdNav.ets。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import &#123; router &#125; from &#x27;@kit.ArkUI&#x27;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">export struct HdNav &#123;</span><br><span class="line">  @StorageProp(&#x27;topHeight&#x27;)</span><br><span class="line">  topHeight: number = 0</span><br><span class="line">  @Prop</span><br><span class="line">  title: string = &#x27;hello world&#x27;</span><br><span class="line">  @Prop</span><br><span class="line">  hasBorder: boolean = false</span><br><span class="line">  @Prop</span><br><span class="line">  leftIcon: ResourceStr = $r(&#x27;app.media.ic_common_back&#x27;)</span><br><span class="line">  @Prop</span><br><span class="line">  rightIcon: ResourceStr = $r(&#x27;sys.media.ohos_ic_public_more&#x27;)</span><br><span class="line">  @Prop</span><br><span class="line">  showRightIcon: boolean = true</span><br><span class="line">  @Prop</span><br><span class="line">  iconColor: ResourceStr = $r(&#x27;app.color.black&#x27;)</span><br><span class="line">  @Prop</span><br><span class="line">  titleColor: string = &#x27;#131313&#x27;</span><br><span class="line">  @BuilderParam</span><br><span class="line">  menuBuilder: () =&gt; void = this.defaultMenu</span><br><span class="line"></span><br><span class="line">  @Builder</span><br><span class="line">  defaultMenu() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row(&#123; space: 16 &#125;) &#123;</span><br><span class="line">      Image(this.leftIcon)</span><br><span class="line">        .size(&#123; width: 24, height: 24 &#125;)</span><br><span class="line">        .onClick(() =&gt; router.back())</span><br><span class="line">        .fillColor(this.iconColor)</span><br><span class="line">      Row() &#123;</span><br><span class="line">        if (this.title) &#123;</span><br><span class="line">          Text(this.title)</span><br><span class="line">            .fontWeight(600)</span><br><span class="line">            .fontColor(this.titleColor)</span><br><span class="line">            .layoutWeight(1)</span><br><span class="line">            .textAlign(TextAlign.Center)</span><br><span class="line">            .fontSize(18)</span><br><span class="line">            .maxLines(1)</span><br><span class="line">            .textOverflow(&#123; overflow: TextOverflow.Ellipsis &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .height(56)</span><br><span class="line">      .layoutWeight(1)</span><br><span class="line"></span><br><span class="line">      if (this.showRightIcon) &#123;</span><br><span class="line">        Image(this.rightIcon)</span><br><span class="line">          .size(&#123; width: 24, height: 24 &#125;)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .bindMenu(this.menuBuilder)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        Blank()</span><br><span class="line">          .width(24)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .padding(&#123; left: 16, right: 16, top: this.topHeight &#125;)</span><br><span class="line">    .height(56 + this.topHeight)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .border(&#123;</span><br><span class="line">      width: &#123; bottom: this.hasBorder ? $r(&#x27;app.float.common_border_width&#x27;) : 0 &#125;,</span><br><span class="line">      color: $r(&#x27;app.color.common_gray_bg&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源引入"><a href="#资源引入" class="headerlink" title="资源引入"></a>资源引入</h2><p>应用开发过程中，经常需要用到颜色、字体、间距、图片等资源，在不同的设备或配置中，这些资源的值可能不同。</p><ul><li>应用资源：借助资源文件能力，开发者在应用中自定义资源，自行管理这些资源在不同的设备或配置中的表现。</li><li>系统资源：开发者直接使用系统预置的资源定义。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 引入resouces/base/media下的home_selected的图片</span><br><span class="line">$r(&#x27;app.media.home_selected&#x27;)</span><br><span class="line"></span><br><span class="line"># 导入resources/rawfile下的index.html文件</span><br><span class="line">$rawfile(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line"># 获取resources/rawfile下的audio.mp3音频</span><br><span class="line">await getContext(this).resourceManager.getRawFd(&quot;audio.mp3&quot;)</span><br></pre></td></tr></table></figure><h2 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h2><p>页面路由 router 根据页面的 uri 找到目标页面，从而实现跳转。以最基础的两个页面之间的跳转为例，具体实现步骤如下：</p><ol><li>在 “Project“窗口，打开 src&gt; main &gt;ets，右键点击 pages 文件夹，创建一个页面。</li><li>在 resources&#x2F;base&#x2F;profile 下的 main_pages.json，新建一个 pages 中创建页面的文件名（注意大小写）。</li><li>调用 router.push () 路由到指定页面。</li><li>调用 router.back () 回到首页。</li></ol><p><img src="https://image-static.segmentfault.com/161/065/1610655462-e340b77e6bdab6c6_fix732" alt="img"></p><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><p>页面加载是 Web 组件的基本功能。根据页面加载数据来源可以分为三种常用场景，包括加载网络页面、加载本地页面、加载 HTML 格式的富文本数据。</p><p>页面加载过程中，若涉及网络资源获取，需要配置 ohos.permission.INTERNET 网络访问权限，下面以本地静态文件的方法举例。</p><ul><li>将资源文件放置在应用的 resources&#x2F;rawfile 目录下。</li></ul><p><img src="https://image-static.segmentfault.com/287/264/2872649454-0e3ba1620d89bc8f_fix732" alt="img"></p><ul><li>鸿蒙 Next 应用代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import web_webview from &#x27;@ohos.web.webview&#x27;;</span><br><span class="line">import &#123; HdNav &#125; from &#x27;@mygames/basic&#x27;;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct WebComponent &#123;</span><br><span class="line">  controller: web_webview.WebviewController = new web_webview.WebviewController();</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      HdNav(&#123; title: &#x27;看烟花秀&#x27;, showRightIcon: false, iconColor: $r(&#x27;app.color.black&#x27;) &#125;)</span><br><span class="line"></span><br><span class="line">      Button(&#x27;loadData&#x27;)</span><br><span class="line">        .onClick(() =&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            this.controller.loadUrl($rawfile(&quot;index.html&quot;));</span><br><span class="line"></span><br><span class="line">          &#125; catch (error) &#123;</span><br><span class="line">            console.error(`ErrorCode: $&#123;error.code&#125;,  Message: $&#123;error.message&#125;`);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      // 组件创建时，加载www.example.com</span><br><span class="line">      Web(&#123; src: $rawfile(&quot;index.html&quot;), controller: this.controller &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>烟花代码</li></ul><p><img src="https://image-static.segmentfault.com/118/121/1181218140-a4c3e0f5024f631e_fix732" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>到这里鸿蒙 Next 应用实战暂告一段落了。但是鸿蒙系统提供了开箱即用的原生 AI 能力，更方便了我们开发者实现应用的快速智能化，所以，鸿蒙 Next 智能应用实战，待续～</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鸿蒙Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙Next实战：电子木鱼</title>
      <link href="/2024/10/06/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%B5%E5%AD%90%E6%9C%A8%E9%B1%BC/"/>
      <url>/2024/10/06/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%B5%E5%AD%90%E6%9C%A8%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正所谓：Hello Word 是程序员学任何一门语言的第一个程序实践。这其实也是一个不错的正反馈，那如何让学习鸿蒙 Next 更有成就感呢？下面就演示一下从零开发一个鸿蒙 Next 版的电子木鱼，主打就是一个抽象！</p><p><img src="https://image-static.segmentfault.com/254/933/2549334873-98ee6ddb63bc01fc_fix732" alt="img"></p><h1 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h1><ol><li>页面布局</li><li>木鱼点击</li><li>木鱼音效</li><li>动画特效</li><li>自定义弹窗</li></ol><p><img src="https://image-static.segmentfault.com/338/193/338193454-9b44c864b1337a0a_fix732" alt="img"></p><h1 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h1><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>ArkTS 定义了声明式 UI 描述、自定义组件和动态扩展 UI 元素的能力，配合 ArkUI 开发框架中的系统组件及其相关的事件方法、属性方法等共同构成 UI 开发的主体。我们下面要完成的主要是一个木鱼和设置按钮、自动按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">build() &#123;</span><br><span class="line"></span><br><span class="line">Column() &#123;</span><br><span class="line">  HdNav(&#123; title: &#x27;电子木鱼&#x27;, showRightIcon: false, iconColor: $r(&#x27;app.color.white&#x27;), titleColor: &#x27;#ffffff&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Text(this.woodenType[this.type] + &#x27;：&#x27;+ this.score).fontSize(22).fontColor(&quot;#ffffff&quot;).width(&#x27;100%&#x27;).textAlign(TextAlign.Center)</span><br><span class="line">  &#125;.width(&quot;100%&quot;).height(&quot;8%&quot;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Image($r(&#x27;app.media.setting&#x27;)).width(25).height(25).margin(16).onClick(() =&gt; &#123;</span><br><span class="line">  if (this.dialogController != null) &#123;</span><br><span class="line">this.dialogController.open()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  &#125;.width(&#x27;100%&#x27;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Image($r(&#x27;app.media.foreground&#x27;)).width(40).height(40).margin(&#123;left:8,top:5&#125;)</span><br><span class="line">  &#125;.width(&#x27;100%&#x27;)</span><br><span class="line">  .onClick(() =&gt; &#123;</span><br><span class="line">this.handlePopup = !this.handlePopup</span><br><span class="line">  &#125;)</span><br><span class="line">  .bindPopup(this.handlePopup, &#123;</span><br><span class="line">message: &#x27;数据统计功能，正在完善中~&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">if (this.isPresent) &#123;</span><br><span class="line">  Text(this.woodenType[this.type] + &#x27;: &#x27; + this.woodenFishNum).fontSize(16).fontColor(&quot;#ffffff&quot;).width(&#x27;100%&#x27;).textAlign(TextAlign.Center)</span><br><span class="line">.transition(this.effect)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;.width(&#x27;100%&#x27;).height(&#x27;25%&#x27;)</span><br><span class="line">  .alignItems(VerticalAlign.Top)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Image($r(&#x27;app.media.muyu&#x27;))</span><br><span class="line">  .width(this.isZoomed == true ? this.targetWidth * 1.2 : this.targetWidth * 1)</span><br><span class="line">  .height(this.isZoomed == true ? this.targetHeight * 1.2 : this.targetHeight * 1)</span><br><span class="line">  &#125;</span><br><span class="line">  .width(&#x27;100%&#x27;)</span><br><span class="line">  .height(&#x27;25%&#x27;)</span><br><span class="line">  .alignItems(VerticalAlign.Center)</span><br><span class="line">  .justifyContent(FlexAlign.Center)</span><br><span class="line"></span><br><span class="line">  Row() &#123;</span><br><span class="line">Toggle(&#123; type: ToggleType.Switch &#125;)</span><br><span class="line">  .onChange((isOn: boolean) =&gt; &#123;</span><br><span class="line">if(isOn) &#123;</span><br><span class="line">  promptAction.showToast(&#123; message: &#x27;auto is on.&#x27; &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  promptAction.showToast(&#123; message: &#x27;auto is off.&#x27; &#125;)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">Text(&#x27;自动&#x27; + this.woodenType[this.type]).fontSize(18).fontColor(&#x27;#ffffff&#x27;).height(40).margin(&#123;left: 10&#125;)</span><br><span class="line"></span><br><span class="line">  &#125;.width(&#x27;100%&#x27;).height(&#x27;10%&#x27;).justifyContent(FlexAlign.Center)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.height(&quot;100%&quot;)</span><br><span class="line">.backgroundColor(&#x27;rgba(0, 0, 0, 1.00)&#x27;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="木鱼点击"><a href="#木鱼点击" class="headerlink" title="木鱼点击"></a>木鱼点击</h2><p>木鱼是一张图片，也就是给该图绑定一个点击事件，点击一次有三个动作需要执行：</p><ul><li>木鱼有放大的效果</li><li>有类似功德文字的飘动</li><li>功德数值的累加</li></ul><p>而点击的时候要看到实时的效果，所以可以声明三个状态，通过 State 的修改，从而驱动 UI 更新，以下的 animateTo 是给域名的放大添加的一个平滑效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 积分</span><br><span class="line">@State score: number = 0</span><br><span class="line">// 积分文字</span><br><span class="line">@State isPresent: boolean = false</span><br><span class="line">// 木鱼是否放大</span><br><span class="line">@State isZoomed: boolean = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 木鱼UI</span><br><span class="line">Image($r(&#x27;app.media.muyu&#x27;))</span><br><span class="line">.width(this.isZoomed == true ? this.targetWidth * 1.2 : this.targetWidth * 1)</span><br><span class="line">.height(this.isZoomed == true ? this.targetHeight * 1.2 : this.targetHeight * 1)</span><br><span class="line">.onClick((event) =&gt; &#123;</span><br><span class="line">animateTo(&#123; curve: curves.springMotion() &#125;, () =&gt; &#123;</span><br><span class="line">  this.isZoomed = !this.isZoomed;</span><br><span class="line"></span><br><span class="line">  if (this.isZoomed == true) &#123;</span><br><span class="line">this.isPresent = true;</span><br><span class="line">this.score += this.woodenFishNum;</span><br><span class="line">this.onClickPlay();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 定时缩小/定时文字消失</span><br><span class="line">setTimeout(() =&gt; &#123;this.isZoomed = false;&#125;, 50);</span><br><span class="line">setTimeout(() =&gt; &#123;this.isPresent = false&#125;, 600);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="木鱼音效"><a href="#木鱼音效" class="headerlink" title="木鱼音效"></a>木鱼音效</h2><p>木鱼音效是点击时的咚咚的声音，这里就要使用到 HarmonyOS Next 的音频服务。这里需要注意一点，项目运行预览无法播放，一定要模拟器或真机才可以调试音频的播放效果。</p><p><img src="https://image-static.segmentfault.com/174/807/1748078957-54216970590e78e7_fix732" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 销毁音效工具</span><br><span class="line">  onClickDestroy= ()=&gt;&#123;</span><br><span class="line">    AudioMgr.Ins().destroy();</span><br><span class="line">    console.log(&#x27;audio&#x27;, &#x27;destroy&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 初始化音效工具</span><br><span class="line">  onClickInit = ()=&gt;&#123;</span><br><span class="line">    AudioMgr.Ins().init();</span><br><span class="line">    console.log(&#x27;audio&#x27;, &#x27;init&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 播放指定音效</span><br><span class="line">  onClickPlay = ()=&gt;&#123;</span><br><span class="line">    AudioMgr.Ins().play();</span><br><span class="line">    console.log(&#x27;audio&#x27;, &#x27;playing&#x27;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/906/743/90674303-644605593b43aaad_fix732" alt="img"></p><h2 id="动画特效"><a href="#动画特效" class="headerlink" title="动画特效"></a>动画特效</h2><p>这里的动画效果主要是点击木鱼，从下网上飘出一个文字然后消失的特效。在鸿蒙中可以通过 TransitionEffect 方法添加效果，首先创建特效，然后再文字上挂载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 上移入场特效</span><br><span class="line">  private effect: object =</span><br><span class="line">    TransitionEffect.OPACITY</span><br><span class="line">      // 初始正常大小// 假设动画持续时间为500ms</span><br><span class="line">      .combine(TransitionEffect.scale(&#123; x: 1, y: 1 &#125;).animation(&#123; curve: curves.springMotion(0.6, 1.2), duration: 0 &#125;))</span><br><span class="line">       // 向上平移150单位// 与上一步同时开始</span><br><span class="line">      .combine(TransitionEffect.translate(&#123; x: 0, y: 400 &#125;).animation(&#123; curve: curves.springMotion(0.6, 1.2), duration: 10000, delay: 50 &#125;))</span><br><span class="line">       // 淡出至完全透明// 在平移结束后开始淡出</span><br><span class="line">      .combine(TransitionEffect.opacity(0).animation(&#123; curve: curves.springMotion(0.6, 1.2), duration: 1000, delay: 0 &#125;));</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/382/339/3823392715-053831381a9900f8_fix732" alt="img"></p><h2 id="自定义弹窗"><a href="#自定义弹窗" class="headerlink" title="自定义弹窗"></a>自定义弹窗</h2><p>经过前面布局，事件绑定，音效播放，一个简单的电子木鱼其实已经完成了。但是为了增添趣味和后期扩展，这里再加一个设置功能，通过按钮打开配置项弹窗，设置包括：</p><ul><li>类型选项 (功德、财运、桃花运等)</li><li>音效选项 (各种解压的音效素材)</li><li>皮肤管理 (木鱼的 UI 界面设置)</li><li>数值修改 (对展示的累加数值做任意修改)</li><li>其他 (是否关闭音效，是否自动点击等)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// 弹窗层(UI开发-组件-自定义弹窗)</span><br><span class="line">@CustomDialog</span><br><span class="line">struct SettingDialog &#123;</span><br><span class="line">  controller?: CustomDialogController</span><br><span class="line"></span><br><span class="line">  // 父子组件双向同步，文档见 https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-link-V5</span><br><span class="line">  @Link woodenFishType: number</span><br><span class="line"></span><br><span class="line">  // 木鱼敲击的数值</span><br><span class="line">  @Link woodenFishNum: number</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;愿望：&#x27;).fontSize(17).fontWeight(600)</span><br><span class="line">        Radio(&#123; value: &#x27;功德&#x27;, group: &#x27;word&#x27; &#125;).checked(true).onChange((isChecked: boolean) =&gt; &#123;</span><br><span class="line">          if(isChecked) &#123;</span><br><span class="line">            this.woodenFishType = 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Text(&#x27;功德&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;财富&#x27;, group: &#x27;word&#x27; &#125;).onChange((isChecked: boolean) =&gt; &#123;</span><br><span class="line">          if(isChecked) &#123;</span><br><span class="line">            this.woodenFishType = 1</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Text(&#x27;财富&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;桃花运&#x27;, group: &#x27;word&#x27; &#125;).onChange((isChecked: boolean) =&gt; &#123;</span><br><span class="line">          if(isChecked) &#123;</span><br><span class="line">            this.woodenFishType = 2</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        Text(&#x27;桃花运&#x27;).fontSize(15)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;数值：&#x27;).fontSize(16).fontWeight(600)</span><br><span class="line">        TextInput(&#123;text:&#x27;1&#x27;&#125;).type(InputType.Number).width(180).onChange((value: string) =&gt; &#123;</span><br><span class="line">          this.woodenFishNum = parseInt(value)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;音效：&#x27;).fontSize(16).fontWeight(600)</span><br><span class="line">        Toggle(&#123; type: ToggleType.Switch &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;皮肤：&#x27;).fontSize(16).fontWeight(600)</span><br><span class="line">        Radio(&#123; value: &#x27;默认&#x27;, group: &#x27;skin&#x27; &#125;).checked(true)</span><br><span class="line">        Text(&#x27;木鱼&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;悟空&#x27;, group: &#x27;skin&#x27; &#125;)</span><br><span class="line">        Text(&#x27;黑悟空&#x27;).fontSize(15)</span><br><span class="line">        Radio(&#123; value: &#x27;典韦&#x27;, group: &#x27;skin&#x27; &#125;)</span><br><span class="line">        Text(&#x27;典韦&#x27;).fontSize(15)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .margin(&#123;bottom: 12&#125;)</span><br><span class="line">      .justifyContent(FlexAlign.Start)</span><br><span class="line"></span><br><span class="line">    &#125;.padding(&#123;top: 28, left: 15&#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是：父子组件的数据传递。因为自定义弹窗和木鱼是两个不同的组件，而点击弹窗中的比如类型切换或修改的数值，全部要更新到木鱼组件的展示当中。</p><p>当然鸿蒙也提供了 @Link 装饰器，用于与其父组件中的数据源共享相同的值，可以结合上面代码和下方截图参考其用法。</p><p><img src="https://image-static.segmentfault.com/722/773/722773406-8b884045f9af81cd_fix732" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>到这里，一个通用型的鸿蒙 Next 版电子木鱼就完成了。不管是组件交互还是布局都还好，唯一让我觉得不适应的是动画特效。</p><p>如果用这种方式实现电子烟花肯定不行，所以下次将换一种方法快速实现烟花秀，以及页面间的跳转，待更新～</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鸿蒙Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙Next实战：环境搭建</title>
      <link href="/2024/10/05/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/10/05/%E9%B8%BF%E8%92%99Next%E5%AE%9E%E6%88%98%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为独立开发者，如果我们错过了传统移动 App，和后起小程序的红利，那万物互联 + AI 的应用开发就得抓住了。</p><p>虽然个人上架应用平台难易都差不多，但是鸿蒙生态当前正需要广大开发者参与，一旦上架，相比其他平台，流量扶持力度更大，变现能力也更容易。</p><p>所以，我们可以先开发一些应用占个位置，后面再逐渐迭代完善；那么，第一步就先从搭建开发环境开始吧。</p><p><img src="https://image-static.segmentfault.com/215/704/2157045002-92c2b2f020c04ee2_fix732" alt="img"></p><h1 id="鸿蒙-Next-简介"><a href="#鸿蒙-Next-简介" class="headerlink" title="鸿蒙 Next 简介"></a>鸿蒙 Next 简介</h1><p>鸿蒙 Next，英文 HarmoneyOS Next，又叫纯血版鸿蒙，2023 年 8 月 4 日开发者预览版，2024 年 6 月正式对外公布。鸿蒙 NEXT 采用了全鸿蒙内核，完成了对 Linux 内核的全面替换，并去掉了安卓开放源代码项目（AOSP）等代码，实现了真正的自主可控，他能支持华为及合作厂商的多种智能终端设备，包括手机、平板、智慧屏等等。</p><p><img src="https://image-static.segmentfault.com/370/244/3702443813-2bafc28d7fac28ca_fix732" alt="img"></p><h3 id="运行环境要求"><a href="#运行环境要求" class="headerlink" title="运行环境要求"></a>运行环境要求</h3><p>针对开发 HarmonyOS 应用及元服务，华为基于 IntelliJ IDEA Community 开源版本打造了一个集成开发环境（IDE）——DevEco Studio，能将开发的应用和服务同时运行在 HarmonyOS 和 OpenHarmony 系统上，为保证 DevEco Studio 正常运行，建议您的电脑配置满足如下要求：</p><ul><li>操作系统：Windows10 64 位，内部版号大于 18363</li><li>内存：8GB 及以上</li><li>硬盘：100GB 及以上</li><li>分辨率：1280*800 像素及以上</li><li>其他： 开启了 Hyper-V 虚拟化</li></ul><p><img src="https://image-static.segmentfault.com/257/651/2576514724-869bc1ea7a17a4d7_fix732" alt="img"></p><h1 id="DevEco-Studio"><a href="#DevEco-Studio" class="headerlink" title="DevEco Studio"></a>DevEco Studio</h1><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>进入 huawei 开发者平台下载，最好找 5.0 以上又不是最新版本就行。还有 DevEco Studio 支持 Windows 和 macOS 系统，但我本人用的是 Windows，所以就以 win 系统演示。</p><p><img src="https://image-static.segmentfault.com/180/632/1806329594-ecf864a76d7e3693_fix732" alt="img"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载完成后，双击下载的 “deveco-studio-xxxx.exe”，进入 DevEco Studio 安装向导。因为 DevEco Studio 提供开箱即用的开发体验，将 HarmonyOS SDK、Node.js、Hvigor、OHPM、模拟器平台等进行合一打包，几乎无需额外下载配置就能马上跑项目，但是要运行模拟器需要一点配置，比如 Windows 版本要大于 18363。</p><p><img src="https://image-static.segmentfault.com/427/197/4271971367-b4f561050ebe05ea_fix732" alt="img"></p><h3 id="模拟器设置"><a href="#模拟器设置" class="headerlink" title="模拟器设置"></a>模拟器设置</h3><p>DevEco Studio 提供预览、模拟器、真机三种方式查看项目的运行效果，但是给予的测试权限不一。最高的真机，目前需要搭载了鸿蒙 Next 的手机才行，且鸿蒙无法自己升级到 Next，所以折中的方法就是用模拟器。官方现在要求使用模拟器需申请，而且本地电脑开始了虚拟化技术 Hyper-V。</p><p><img src="https://image-static.segmentfault.com/310/867/3108673098-edf87300ca9029c1_fix732" alt="img"></p><p><img src="https://image-static.segmentfault.com/155/933/1559338628-ee9e676e4b248264_fix732" alt="img"></p><p><img src="https://image-static.segmentfault.com/396/656/3966567023-cb54447504ff6eb2_fix732" alt="img"></p><h1 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h1><p>DevEco Studio 安装完成后，可以通过运行 Hello World 工程来验证环境设置是否正确。接下来以创建一个支持 Phone 设备的工程为例进行介绍。</p><p><img src="https://image-static.segmentfault.com/225/965/225965149-326d21d5a1832c98_fix732" alt="img"></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>可能当时为了适应主流开发语言，加上自己新出的 ArkTS 有三种工程类型可供选择，而我就是为 ArkTS 而来，所以以下和后面要做的应用也都是 ArkTS。</p><ul><li>ArkTS 工程目录结构（Stage 模型）</li><li>C++ 工程目录结构（Stage 模型）</li><li>JS 工程目录结构（FA 模型）</li></ul><p><img src="https://image-static.segmentfault.com/383/776/3837765906-83c0ac1eecf67e9f_fix732" alt="img"></p><p>项目创建后，结构就是上图，而关于每个目录或文件的用法，就要去官方文档查看 “工程目录结构”，这里就略过进入到简单例子的演示。</p><p><img src="https://image-static.segmentfault.com/175/524/1755243927-c338ea540113b2bc_fix732" alt="img"></p><h3 id="第一个-Hello-World"><a href="#第一个-Hello-World" class="headerlink" title="第一个 Hello World"></a>第一个 Hello World</h3><h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>在 “Project” 窗口，点击 “entry &gt; src &gt; main &gt; ets &gt; pages”，打开 “Index.ets” 文件，进行页面的编写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// Index.ets</span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string = &#x27;Hello World&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        Text(this.message)</span><br><span class="line">          .fontSize(50)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h4><p>在编辑窗口右上角的侧边工具栏，点击 Previewer，打开预览器。</p><p><img src="https://image-static.segmentfault.com/955/425/955425681-142e40c79f67e501_fix732" alt="img"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>如果你有应用端相关的开发经验，上手鸿蒙应用还是比较容易的。而如果你像我一样是做后端的，或很少接触前端，那也可以跟着我一起代码实战，简单实现一个鸿蒙 Next 的电子木鱼和电子烟花秀，文章待更新～</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鸿蒙Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用CocosCreator对接抖音小游戏的侧边栏复访</title>
      <link href="/2024/08/04/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/"/>
      <url>/2024/08/04/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近小游戏的软著下来了，用 CocosCreator 做的游戏也完成了 1.0 版本。而当我打包成抖音小游戏进行提交时，还没到初审就给拒了，<strong>因为还有一个机审，机器检测到代码中没有接入 “侧边栏复访功能”</strong>。这个我还真不知道，那只能去官方看文档了，位置是<strong>小游戏开发文档 -&gt; 指南 -&gt; 开放能力 -&gt; 侧边栏能力</strong>。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/Snipaste_2024-08-05_20-01-47.jpg" alt="Snipaste_2024-08-05_20-01-47"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>侧边栏复访能力是在<strong>「2023 年 11 月 24 日」</strong>起就开启了「<strong>必接审核」，</strong>为什么要这样做呢？原来是随着抖音首页侧边栏的日活不断增高，平台也积极引导用户养成从首页侧边栏进入游戏的习惯而做的要求。这样<strong>可以大幅提升次留、7 留</strong>，反正就是你好我好大家好的局面，接就对了。</p><p>文档我也大概看了，大概的流程就是打开游戏后，<strong>判断是不是侧边栏进来，是的话就相当老用户给他一些奖励，不是的话给一些引导弹窗，让用户触发打开侧边栏</strong>。而文档里的方案示例大部分也都有奖励领取环节，但是我这个目前是单机，奖励肯定是没有的，那怎么办，于是我就做了一些简化。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/flow_path.jpg" alt="flow_path"></p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>创建去侧边栏按钮和引导层</li><li>对接抖音提供的方法检测和跳转</li><li>打包后去抖音开发工具调测</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h3 id="创建去侧边栏按钮"><a href="#创建去侧边栏按钮" class="headerlink" title="创建去侧边栏按钮"></a>创建去侧边栏按钮</h3><p>打开游戏场景画布，找到主界面面板，分别添加 “去侧边栏按钮节点” ，添加图文素材。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/Snipaste_2024-08-05_20-05-36.jpg" alt="Snipaste_2024-08-05_20-05-36"></p><h3 id="创建引导层节点"><a href="#创建引导层节点" class="headerlink" title="创建引导层节点"></a>创建引导层节点</h3><p>继续在主界面下添加引导层空白节点，就是展示一个遮罩，一个引导图片和跳转侧边栏和关闭按钮。遮罩层的添加方式是给节点新增 sprint 组件，组件的 sprite Frame 选择 ”internal”-&gt;”image”-&gt;”default_btn_disabled”，其他的按钮就是自己的 UI 图标了。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/image-20240805200657891.png" alt="image-20240805200657891"></p><h3 id="在主界面脚本中挂载节点"><a href="#在主界面脚本中挂载节点" class="headerlink" title="在主界面脚本中挂载节点"></a>在主界面脚本中挂载节点</h3><p>就是将去侧边栏和引导图层，跳转复访等绑定触发事件。</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/image-20240805200735109.png" alt="image-20240805200735109"></p><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gameManager <span class="keyword">from</span> <span class="string">&quot;./gameManager&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">startPanel</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抖音侧边栏复访</span></span><br><span class="line">    <span class="keyword">private</span> isFromSidebar = <span class="literal">false</span> <span class="comment">//状态，表示是否从侧边栏进入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">btnSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 入口有礼按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">ndSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 侧边栏引导对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">btnGotoSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">//去侧边栏按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">btnCloseSidebar</span>: cc.<span class="property">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 关闭侧边栏引导对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">game</span>:gameManager = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>(<span class="params">game:gameManager</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span> = game</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>.<span class="title function_">startAudio</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹出侧边栏引导框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">showDialogBox</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 显示引导层，隐藏开始按钮</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ndSidebar</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startBtn</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭侧边栏对话框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">closeSidebar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ndSidebar</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startBtn</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动跳转侧边栏</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">gotoSidebar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ndSidebar</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startBtn</span>.<span class="property">active</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 抖音小游戏侧边栏跳转逻辑</span></span><br><span class="line">        tt.<span class="title function_">navigateToScene</span>(&#123;</span><br><span class="line">            <span class="attr">scene</span>: <span class="string">&quot;sidebar&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;navigate to scene success&quot;</span>);</span><br><span class="line">                <span class="comment">// 跳转成功回调逻辑</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;navigate to scene fail: &quot;</span>, res);</span><br><span class="line">                <span class="comment">// 跳转失败回调逻辑</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// --侧边栏按钮判断--//</span></span><br><span class="line">        tt.<span class="title function_">onShow</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//判断用户是否是从侧边栏进来的</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isFromSidebar</span> = (res.<span class="property">launch_from</span> == <span class="string">&#x27;homepage&#x27;</span> &amp;&amp; res.<span class="property">location</span> == <span class="string">&#x27;sidebar_card&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isFromSidebar</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是从侧边栏进来的，隐藏“去侧边栏”</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">btnSidebar</span>.<span class="property">active</span> = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则 显示“去侧边栏”按钮</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">btnSidebar</span>.<span class="property">active</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户是否支持侧边栏进入功能，有些旧版的抖音没有侧边栏，这种情况就把入口有礼那个按钮给隐藏掉</span></span><br><span class="line"><span class="comment">// 因为我引导层默认就是隐藏，所以这部分可以不用判断</span></span><br><span class="line">        <span class="comment">/*tt.checkScene(&#123;</span></span><br><span class="line"><span class="comment">            scene: &quot;sidebar&quot;,</span></span><br><span class="line"><span class="comment">            success: (res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">                this.btnSidebar.node.active = true</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            fail: (res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">                this.btnSidebar.node.active = false</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        <span class="comment">// --侧边栏按钮判断--//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示侧边栏引导框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btnSidebar</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="variable language_">this</span>.<span class="property">showDialogBox</span>, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭侧边栏引导对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btnCloseSidebar</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="variable language_">this</span>.<span class="property">closeSidebar</span>, <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击进入抖音侧边栏</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btnGotoSidebar</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="variable language_">this</span>.<span class="property">gotoSidebar</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>这样操作下来，你会发现接入这个侧边栏功能并不复杂，其实就相当于做了一个弹窗效果。麻烦的是在 CocosCreator 中添加抖音里内部方法不能马上调试，而是要打完包再放到抖音开发者工具中测试，遇到报错又改打包测试再改。还有一个是官方的文档的举例是用了一个最复杂的方式，其实对于我们单机的小游戏就只是引导一下，没有复访奖励什么的！</p><p><img src="/img/%E5%A6%82%E4%BD%95%E7%94%A8CocosCreator%E5%AF%B9%E6%8E%A5%E6%8A%96%E9%9F%B3%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%8D%E8%AE%BF/image-20240805201033707.png" alt="image-20240805201033707"></p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cocos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人最新微信小程序——有用工具盒，上架了！</title>
      <link href="/2024/07/11/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/"/>
      <url>/2024/07/11/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>“有用工具盒”是一款强大且实用的工具类小程序，提供包括图片处理、信息查询、测算，娱乐等常用工具。如：文本加密解密、二维码生成与识别、九宫格切图、图片拼接、国旗头像生成、房贷和BMI计算器等，如同瑞士军刀一样方便好用。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/mmexport1720348679200.jpg" alt="mmexport1720348679200"></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h4 id="国旗头像"><a href="#国旗头像" class="headerlink" title="国旗头像"></a>国旗头像</h4><p>只需要上传一张图片，就会免费生成一张带国旗的头像</p><h4 id="九宫格切图"><a href="#九宫格切图" class="headerlink" title="九宫格切图"></a>九宫格切图</h4><p>只需上传一张图片，工具会自动将他分成九宫格的切图，保存后就可以发朋友圈了。</p><h4 id="房贷计算器"><a href="#房贷计算器" class="headerlink" title="房贷计算器"></a>房贷计算器</h4><p>目前贷款利率还没调整，其他的基本功能都没有问题。</p><h4 id="色盲测试"><a href="#色盲测试" class="headerlink" title="色盲测试"></a>色盲测试</h4><p>通过不停的切换颜色矩阵，你可以点击其中不同的色块，类似于颜色找茬，来测试你的色盲程度。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/image-20240711154242511.png" alt="image-20240711154242511"></p><h4 id="手持弹幕"><a href="#手持弹幕" class="headerlink" title="手持弹幕"></a>手持弹幕</h4><p>手持弹幕，是一个可以自定义文字样式的滚动大字报，可以用于像粉丝给爱豆接机用的欢迎词。</p><h4 id="节日倒计时"><a href="#节日倒计时" class="headerlink" title="节日倒计时"></a>节日倒计时</h4><p>节日倒计时，是一个在本地存储日期进行倒计时的工具，样式温馨多样。由于没有远程存储，如果对微信进行了清理缓存，节日倒计时也会消失需要重新创建。</p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><p>随机数，是一个可以用于朋友间抽签的小工具，给定两个区间，工具自动产生一个数值。</p><h4 id="大转盘"><a href="#大转盘" class="headerlink" title="大转盘"></a>大转盘</h4><p>大转盘是一个随机定义的事件扇叶，抽中哪个就中哪个。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/image-20240711154305686.png" alt="image-20240711154305686"></p><h4 id="二维码生成"><a href="#二维码生成" class="headerlink" title="二维码生成"></a>二维码生成</h4><p>二维码生成工具，你只需要提供链接或文本，工具会将其生成一个可识别的二维码。</p><h4 id="二维码识别"><a href="#二维码识别" class="headerlink" title="二维码识别"></a>二维码识别</h4><p>二维码识别，一个通用型二维码识别器，不管是这里生成的还是其他地方的都可以识别。</p><h4 id="全息时钟"><a href="#全息时钟" class="headerlink" title="全息时钟"></a>全息时钟</h4><p>全息时钟，一个可以用来拍摄自习课视频的时钟展示，省掉了专门安装全息时钟的APP。</p><h4 id="常用号码"><a href="#常用号码" class="headerlink" title="常用号码"></a>常用号码</h4><p>常用号码罗列了日常生活中紧急需要的号码，点击后就可以拨打，比如报警，住院等等号码。</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/image-20240711154336615.png" alt="image-20240711154336615"></p><h4 id="恶搞理发器"><a href="#恶搞理发器" class="headerlink" title="恶搞理发器"></a>恶搞理发器</h4><p>纯娱乐性的小工具，就好比周星驰的，你看这个是部手机，其实是个理发器。</p><h4 id="数钱"><a href="#数钱" class="headerlink" title="数钱"></a>数钱</h4><p>数钱也是一个娱乐性工具，看你自己的手速，滑动地越快数的钱越多。</p><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>目前这个小程序集成了31个小工具，其他诸如尺子、量角器、计算器、亲戚计算器、粤语翻译等等，更多的你可以自己体验了。后续还会迭代一些AI之类的小工具，如果有体验有问题的，也可以在下方公众号给我留言哈~</p><p><img src="/img/%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%96%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E6%9C%89%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9B%92%EF%BC%8C%E4%B8%8A%E6%9E%B6%E4%BA%86%EF%BC%81/gzh_qrcode.jpg" alt="gzh_qrcode"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化：虚拟字段</title>
      <link href="/2024/06/30/MySQL%E4%BC%98%E5%8C%96%EF%BC%9A%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5/"/>
      <url>/2024/06/30/MySQL%E4%BC%98%E5%8C%96%EF%BC%9A%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我们一个二手应用的即时通讯模块马上就用不了了，因为当时对接的是腾讯的IM服务，现在组织里说不想再续费了，功能还得保留。</p><p>那就能手写聊天模块了，所有都写得差不多的时候，在聊天记录表格里却整了一出尬尴的事儿。建表时根据消息推送方式，只存储了接收者ID，发送者ID却放在消息包的json中。</p><p>但是后面很多时候的查询需要两个ID字段联合，也就是要从json的多层路径中找到发送者ID，并作为条件。于是就有了下面通过虚拟字段解决的方法了。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>多层json路径标量读取</li><li>虚拟字段的创建</li><li>聊天消息的查询优化</li></ol><h2 id="原表结构"><a href="#原表结构" class="headerlink" title="原表结构"></a>原表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `bqs_chat_message` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `data` json <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `is_get` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `delete_time` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `user_id` (`user_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">39</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><h2 id="data字段-Json"><a href="#data字段-Json" class="headerlink" title="data字段(Json)"></a>data字段(Json)</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;commit_id&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;SUCCESS&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;receive&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1111&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sender_id&quot;</span><span class="punctuation">:</span><span class="number">1110</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;self&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2020年06月01日 14:34&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span>     </span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;好&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cache_key&quot;</span><span class="punctuation">:</span><span class="string">&quot;U1111&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span><span class="number">1590993240</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;receiver_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1111&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="多层json路径标量读取"><a href="#多层json路径标量读取" class="headerlink" title="多层json路径标量读取"></a>多层json路径标量读取</h2><p><code>JSON_EXTRACT()</code>函数可以使用JSON路径表达式来提取JSON数据中的值，比如下面的查询将返回<code>data</code>字段中<code>data.sender_id</code>路径下的值，也就是发送者ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT JSON_EXTRACT(data, &#x27;$.data.sender_id&#x27;) AS sneder_id</span><br><span class="line">FROM bqs_chat_message</span><br></pre></td></tr></table></figure><h2 id="虚拟字段创建"><a href="#虚拟字段创建" class="headerlink" title="虚拟字段创建"></a>虚拟字段创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE bqs_chat_message ADD COLUMN sender_id INT(11) AS (cast(json_extract(`data`,&#x27;$.data.sender_id&#x27;) as signed),0) VIRTUAL COMMENT &#x27;发送者ID&#x27;;</span><br></pre></td></tr></table></figure><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><p>虽然上面的方法已经实现了虚拟字段创建，但如果data字段的json路径下不存在sender_id时。数据库里显示和查询的结果出来都是null，为了让虚拟字段的类型统一为int，我们需要对不规则的json数据做处理。</p><p>也就是如果json中没有sender_id，我们就以0为默认值，这里我们可以通过IFNULL和IF等SQL函数处理，但我这里推荐coalesce函数。</p><p>COALESCE() 函数允许我们从一系列提供的参数中返回第一个非空（非NULL）的值，这个函数可以接受两个或更多的参数，并逐一检查它们，直到找到一个非空值为止，然后立即返回该值。如果所有的参数都是NULL，那么COALESCE() 函数也会返回NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> bqs_chat_message <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> sender_id <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">AS</span> (<span class="built_in">coalesce</span>(<span class="built_in">cast</span>(json_extract(`data`,<span class="string">&#x27;$.data.sender_id&#x27;</span>) <span class="keyword">as</span> signed),<span class="number">0</span>)) VIRTUAL COMMENT <span class="string">&#x27;发送者ID&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以上的三个操作已经完全解决了建表上的缺陷，但是要想让查询变得更快，我们还可以将虚拟字段添加为索引，在查询上就不会圈表检索了。</p><p><img src="https://image-static.segmentfault.com/888/012/888012046-66b330428a248_fix732"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具类uniapp源码免费开源啦！</title>
      <link href="/2024/06/11/%E5%B7%A5%E5%85%B7%E7%B1%BBuniapp%E6%BA%90%E7%A0%81%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90/"/>
      <url>/2024/06/11/%E5%B7%A5%E5%85%B7%E7%B1%BBuniapp%E6%BA%90%E7%A0%81%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一个基于uniapp开发的强大且实用的工具类APP，提供了包括图片处理、测算，信息查询和娱乐等常用的工具。如：文本加密解密、二维码生成与识别、九宫格切图、图片拼接、国旗头像、房贷和BMI计算器等，如同瑞士军刀一样方便好用~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🕙 项目基本保持每日更新，右上随手点个 🌟 Star 关注，这样才有持续下去的动力，谢谢～</span><br></pre></td></tr></table></figure><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><p><strong>码云：</strong> <a href="https://gitee.com/gaoxingqufuhchao/bqs-toolsbox-uniapp">https://gitee.com/gaoxingqufuhchao/bqs-toolsbox-uniapp</a></p><p><strong>落地：</strong> <a href="https://www.zerofc.cn/market/">https://www.zerofc.cn/market/</a></p><p><strong>下载：</strong><a href="https://www.zerofc.cn/market/land_pages/bqs_toolsbox/index.html">https://www.zerofc.cn/market/land_pages/bqs_toolsbox/index.html</a></p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="https://picx.zhimg.com/v2-273398a5b3a8c1df7f52db94bb2b454e_r.jpg" alt="img"></p><p><img src="https://picx.zhimg.com/v2-0b21a9804cc2f5844eeafe4116a51fc7_r.jpg" alt="img"></p><p><img src="https://picx.zhimg.com/v2-1a434a99ad838d6188f50b4ef8807aad_r.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/v2-db67476a7872d6cb5d6e47f6bdb969a9_r.jpg" alt="img"></p><p><img src="https://picx.zhimg.com/v2-bfb9d3b9bdd04a0759d4e959faf08779_r.jpg" alt="img"></p><p><img src="https://pica.zhimg.com/v2-832a9f56ade29405a57cad002508bf90_r.jpg" alt="img"></p><p><img src="https://pica.zhimg.com/v2-f7e16d34af9472befec3031bbd5557fc_r.jpg" alt="img"></p><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>项目灵感来源于 前端铺子 ，前台基于Vue-uniApp，使用colorUi与uview框架，部分Demo参考uniApp插件市场等,感谢各位作者～</p><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>本软件属于技术开源软件, 任何使用本源码从事商业活动，对别人和自己造成损失的，本人概不负责！</p><h2 id="功能规划"><a href="#功能规划" class="headerlink" title="功能规划"></a>功能规划</h2><h5 id="2024-08-增加2048小游戏、小霸王游戏机等经典小游戏"><a href="#2024-08-增加2048小游戏、小霸王游戏机等经典小游戏" class="headerlink" title="2024-08 : 增加2048小游戏、小霸王游戏机等经典小游戏"></a>2024-08 : 增加2048小游戏、小霸王游戏机等经典小游戏</h5><h5 id="2024-09-增加木鱼、摸鱼等娱乐性小工具"><a href="#2024-09-增加木鱼、摸鱼等娱乐性小工具" class="headerlink" title="2024-09 : 增加木鱼、摸鱼等娱乐性小工具"></a>2024-09 : 增加木鱼、摸鱼等娱乐性小工具</h5><h5 id="2024-10-增加编程博文和视频，代码资源等等"><a href="#2024-10-增加编程博文和视频，代码资源等等" class="headerlink" title="2024-10: 增加编程博文和视频，代码资源等等"></a>2024-10: 增加编程博文和视频，代码资源等等</h5><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol><li>下载安装：「HBuildX」、「微信开发者工具」</li><li>扫码登录微信开发者工具</li><li>将项目拖进【HBuildX】- 运行 - 微信小程序 - 完成</li></ol><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><blockquote><p>由于很多年没碰uniapp了，这次我想试一下uniapp统计，因为数据绝对了我更新的频率，而再次玩得时候却差点翻车！</p></blockquote><p>其实主要是Hbuild版本和官方策略原因，以前的时候app打包默认会勾选uni统计。而现在不但出了两个版本(1.0和2.0)，而且默认是不勾选的，需要自己挑选。重点是选择哪一个就会在对应版本的统计系统生效，也就是如果选了2.0再打开1.0的后台是看不到数据的，最后我看了文档才了解清楚。</p><p><img src="https://image-static.segmentfault.com/358/675/3586758235-66acc97a138d7_fix732" alt="img"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>做这个工具箱app主要有两个原因，一个是我做的一个微信小游戏还在备案中，目前是空档没啥事情；第二个是借机重新捡一下uniapp的内容，很多都已经忘了，所以工具箱app的更新迭代会慢一点。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【YOLOv5】实现扑克牌的点数识别</title>
      <link href="/2024/05/30/%E3%80%90YOLOv5%E3%80%91%E5%AE%9E%E7%8E%B0%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E7%82%B9%E6%95%B0%E8%AF%86%E5%88%AB/"/>
      <url>/2024/05/30/%E3%80%90YOLOv5%E3%80%91%E5%AE%9E%E7%8E%B0%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E7%82%B9%E6%95%B0%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实年初的时候，我也跟着别人的源码，用 Tensoflow 实现过扑克牌的目标检测。虽然也通过博文的方式记录了，但是那个项目使用的 TF 版本比较旧，自身对 TF 并不熟。后期如果说要升级或修改估计够呛，知道最近看到 YOLO 对目标检测的实现方法，发现这个更方便快捷。    </p><p>于是决定用 YOLOv5.6 来重新实现一下扑克牌的点数识别，本文章主要是个人记录，也面向刚刚接触 YOLO 的同学阅读。所以以下会从数据标注，归一化处理到模型训练的实战内容，也包括各种踩坑经历和处理方法，最后对 detect.py 的重写，完成目标对象的坐标和识别标记输出。<br><img src="https://image-static.segmentfault.com/267/391/2673915127-c849e664b864d0ec_fix732" alt="图片"></p><h2 id="YOLO-简介"><a href="#YOLO-简介" class="headerlink" title="YOLO 简介"></a>YOLO 简介</h2><p>YOLO（You Only Look Once）是一种基于深度神经网络的对象识别和定位算法，其最大的特点是运行速度很快，可以用于实时系统。现在 YOLO 已经发展到 v8 版本，每个版本都在原有基础上改进演化的。选择 V5 是因为后面几个新版发行并不久，v5 相关资料和文章较多，踩坑起来也好搜索。其中每个版本里又有按场景划分几个特定场景版本，比如：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YOLOv5s：最小版本，速度最快，但检测性能最低。</span><br><span class="line">YOLOv5m：中等版本，速度比 s 慢一些，但检测性能更好。</span><br><span class="line">YOLOv5l：大型版本，速度比 m 慢，但检测性能更好。</span><br><span class="line">YOLOv5x：最大版本，速度最慢，但是检测性能最好。</span><br><span class="line">YOLOv5n6：中等版本，速度比 m 快一些，但检测性能更好。</span><br></pre></td></tr></table></figure><p>总之，根据具体需求和应用场景，可以选择合适的 YOLOv5 版本以满足性能、速度和准确性的要求，我这里以 YOLOv5s 为例。然后在项目开始前呢，我们可以先去 <a href="https://link.segmentfault.com/?enc=x88A+RY/bjxtshNk/k1hAA==.aoHBzhzGSjxn20IEoaQph1bdhG5DFP31kAEshxaYkXciT1PrKvHg6JP4wn2xlhNr">https://github.com/ultralytics/yolov5</a> 下载 demo 代码和权重文件，比如 yolov5s.pt，下载完后就要准备数据集，也就是标记的图片。<br><img src="https://image-static.segmentfault.com/320/973/3209730729-15645b8931c9eb91_fix732" alt="图片"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>图片的话，看你要识别的目标是啥，可以拍摄整理或去网上下载。为了让训练的模型稍微有点准确，最好准备一两百张，我这里就直接从原来 TF 项目那里拿过来。一共有 363 张扑克牌图片并且都已经用 VOC 格式标注好了，不过为了大家了解，这里还是会介绍如何标注，以及标注工具 labelImg 的基本使用。 </p><h3 id="LabelImg-使用"><a href="#LabelImg-使用" class="headerlink" title="LabelImg 使用"></a>LabelImg 使用</h3><h4 id="操作界面"><a href="#操作界面" class="headerlink" title="操作界面"></a>操作界面</h4><p><img src="https://image-static.segmentfault.com/311/248/3112481172-3af548ba8af231ee_fix732" alt="图片"></p><h4 id="快捷使用"><a href="#快捷使用" class="headerlink" title="快捷使用"></a>快捷使用</h4><p>1、W 是进行标注<br>2、A 是切换到上一张图片<br>3、D 是切换到下一张图片<br><img src="https://image-static.segmentfault.com/111/849/1118491175-865fe738bda29ec9_fix732" alt="图片"></p><h4 id="LabelImg-保存格式"><a href="#LabelImg-保存格式" class="headerlink" title="LabelImg 保存格式"></a>LabelImg 保存格式</h4><p>1.PascalVOC 默认，xml格式<br>2.YOLO text可以直接拿来训练不用转换<br><img src="https://image-static.segmentfault.com/426/055/4260550021-d4c47e08767ad980_fix732" alt="图片"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>在根目录下新建 datasets 用于放置训练的数据集，由于用同一 yolo 可以创建多个检测目标，所以在 datasets 先创建一个项目名目录。然后再在项目名下可创建 VOC 和 YOLO 两种格式的目录，虽然 labelImg 标注后可以直接保存 YOLO 格式也就是归一化后的 text，但是毕竟三百多张图的标注，我这里依然使用以前 TF 的 VOC 的标注数据。如果需要这些数据集的，可以留言，到时我再放在评论区。<br><img src="https://image-static.segmentfault.com/159/512/1595126405-92f53035642663bd_fix732" alt="图片"></p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>依赖直接安装项目根目录下的 requirements.txt 就可以，但是要严格按照里面的版本。因为我用的是以前 conda 创建的环境，可以包都装过，所以一开始就看到已经有的就没装，导致后面运行的时候很多问题都是包的版本问题。所以最好的方法就是用 conda 创建一个新环境，然后直接 pip install -r requirements.txt 是最好的。<br><img src="https://image-static.segmentfault.com/305/502/3055028917-6b3c929a5cdcb531_fix732" alt="图片"></p><h3 id="归一化和数据集划分"><a href="#归一化和数据集划分" class="headerlink" title="归一化和数据集划分"></a>归一化和数据集划分</h3><p>如果 LabelImg 标注后保存的是 YOLO 格式，归一化过程就可以略过了。前面我也说了是用的以前扑克牌的 VOC 格式，所以需要对 xml 里节点数据抽取坐标和标记然后转换成 yolo 的 txt 格式。以下代码是我从其他博主那薅过来的，主要就是归一化和划分训练数据集和校验数据集。特别主要是 classes 部分要修改成自己的目标分类，其他的可以不用改动，当然只是划分的话可以适当删减。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line">from os import listdir, <span class="built_in">getcwd</span></span><br><span class="line">from os.path import <span class="keyword">join</span></span><br><span class="line">import random</span><br><span class="line">from shutil import copyfile</span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;queen&quot;</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;ace&quot;</span>]</span><br><span class="line">TRAIN_RATIO = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def clear_hidden_files(path):</span><br><span class="line">    dir_list = os.listdir(path)</span><br><span class="line">    abspath = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i in dir_list:</span><br><span class="line">        abspath = os.path.<span class="keyword">join</span>(os.path.abspath(path), i)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(abspath):</span><br><span class="line">        <span class="keyword">if</span> i.startswith(<span class="string">&quot;._&quot;</span>):</span><br><span class="line">            os.<span class="built_in">remove</span>(abspath)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        clear_hidden_files(abspath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert(size, box):</span><br><span class="line">    dw = <span class="number">1</span>. / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1</span>. / size[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">x</span> = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">y</span> = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">w</span> = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">x</span> = <span class="keyword">x</span> * dw</span><br><span class="line">    <span class="keyword">w</span> = <span class="keyword">w</span> * dw</span><br><span class="line">    <span class="keyword">y</span> = <span class="keyword">y</span> * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">x</span>, <span class="keyword">y</span>, <span class="keyword">w</span>, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert_annotation(image_id):</span><br><span class="line">    in_file = <span class="keyword">open</span>(<span class="string">&#x27;Poker/VOC/Annotations/%s.xml&#x27;</span> % image_id)</span><br><span class="line">    out_file = <span class="keyword">open</span>(<span class="string">&#x27;Poker/VOC/Labels/%s.txt&#x27;</span> % image_id, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.<span class="keyword">find</span>(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    <span class="keyword">w</span> = <span class="keyword">int</span>(size.<span class="keyword">find</span>(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="keyword">int</span>(size.<span class="keyword">find</span>(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj in root.iter(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.<span class="keyword">find</span>(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.<span class="keyword">find</span>(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls not in classes <span class="built_in">or</span> <span class="keyword">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        cls_id = classes.<span class="built_in">index</span>(cls)</span><br><span class="line">        xmlbox = obj.<span class="keyword">find</span>(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        <span class="keyword">b</span> = (float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;xmin&#x27;</span>).text), float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;xmax&#x27;</span>).text), float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             float(xmlbox.<span class="keyword">find</span>(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((<span class="keyword">w</span>, h), <span class="keyword">b</span>)</span><br><span class="line"></span><br><span class="line">        out_file.<span class="keyword">write</span>(str(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.<span class="keyword">join</span>([str(<span class="keyword">a</span>) <span class="keyword">for</span> <span class="keyword">a</span> in bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    in_file.<span class="keyword">close</span>()</span><br><span class="line">    out_file.<span class="keyword">close</span>()</span><br><span class="line">wd = os.<span class="built_in">getcwd</span>()</span><br><span class="line">data_base_dir = os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;Poker/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(data_base_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(data_base_dir)</span><br><span class="line"></span><br><span class="line">work_sapce_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;VOC/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(work_sapce_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(work_sapce_dir)</span><br><span class="line"></span><br><span class="line">annotation_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Annotations/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(annotation_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(annotation_dir)</span><br><span class="line"></span><br><span class="line">image_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Images/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(image_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(image_dir)</span><br><span class="line"></span><br><span class="line">yolo_labels_dir = os.path.<span class="keyword">join</span>(work_sapce_dir, <span class="string">&quot;Labels/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolo_labels_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolo_labels_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;images/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_dir = os.path.<span class="keyword">join</span>(data_base_dir, <span class="string">&quot;labels/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_train_dir = os.path.<span class="keyword">join</span>(yolov5_images_dir, <span class="string">&quot;train/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_train_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_train_dir)</span><br><span class="line"></span><br><span class="line">yolov5_images_test_dir = os.path.<span class="keyword">join</span>(yolov5_images_dir, <span class="string">&quot;val/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_images_test_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_images_test_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_train_dir = os.path.<span class="keyword">join</span>(yolov5_labels_dir, <span class="string">&quot;train/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_train_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_train_dir)</span><br><span class="line"></span><br><span class="line">yolov5_labels_test_dir = os.path.<span class="keyword">join</span>(yolov5_labels_dir, <span class="string">&quot;val/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not os.path.isdir(yolov5_labels_test_dir):</span><br><span class="line">    os.<span class="built_in">mkdir</span>(yolov5_labels_test_dir)</span><br><span class="line"></span><br><span class="line">train_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_train.txt&quot;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">test_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_val.txt&quot;</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">train_file.<span class="keyword">close</span>()</span><br><span class="line">test_file.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">train_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_train.txt&quot;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">test_file = <span class="keyword">open</span>(os.path.<span class="keyword">join</span>(wd, <span class="string">&quot;yolov5_val.txt&quot;</span>), <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">list_imgs = os.listdir(image_dir)  # <span class="keyword">list</span> image <span class="keyword">files</span></span><br><span class="line">prob = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;Probability: %d&quot;</span> % prob)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(list_imgs)):</span><br><span class="line">    path = os.path.<span class="keyword">join</span>(image_dir, list_imgs[i])</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">        image_path = image_dir + list_imgs[i]</span><br><span class="line">        voc_path = list_imgs[i]</span><br><span class="line">        (nameWithoutExtention, extention) = os.path.splitext(os.path.basename(image_path))</span><br><span class="line">        (voc_nameWithoutExtention, voc_extention) = os.path.splitext(os.path.basename(voc_path))</span><br><span class="line">        annotation_name = nameWithoutExtention + <span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">        annotation_path = os.path.<span class="keyword">join</span>(annotation_dir, annotation_name)</span><br><span class="line"></span><br><span class="line">        label_name = nameWithoutExtention + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        label_path = os.path.<span class="keyword">join</span>(yolo_labels_dir, label_name)</span><br><span class="line"></span><br><span class="line">    prob = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Probability: %d&quot;</span> % prob)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prob &lt; TRAIN_RATIO):  # train dataset</span><br><span class="line">        <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(annotation_path):</span><br><span class="line">            train_file.<span class="keyword">write</span>(image_path + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            convert_annotation(nameWithoutExtention)  # convert label</span><br><span class="line">            copyfile(image_path, yolov5_images_train_dir + voc_path)</span><br><span class="line">            copyfile(label_path, yolov5_labels_train_dir + label_name)</span><br><span class="line">    <span class="keyword">else</span>:  # test dataset</span><br><span class="line">        <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(annotation_path):</span><br><span class="line">            test_file.<span class="keyword">write</span>(image_path + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            convert_annotation(nameWithoutExtention)  # convert label</span><br><span class="line">            copyfile(image_path, yolov5_images_test_dir + voc_path)</span><br><span class="line">            copyfile(label_path, yolov5_labels_test_dir + label_name)</span><br><span class="line"></span><br><span class="line">train_file.<span class="keyword">close</span>()</span><br><span class="line">test_file.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><p>上面代码放在哪个位置看你自己，由于有些目录是相对位置，所以如果不想改也跟我一样放在 datasets 中。执行完上面代码后会在 datasets 下生成 images 和 labels 两个目录，而且特别注意的是这两个目录名最好就是也是这样，比如在上面代码改了生成名，在后面训练的时候，会提示找不到 labels 目录。当然也可以修改 YOLO 提供源码的 dataset.py，看个人选择，而且 images 里的 train 和 val 需要配置到 data 的 yaml 中，这个马上就会说。<br><img src="https://image-static.segmentfault.com/290/641/290641633-3b1075790a728fd3_fix732" alt="图片"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="数据集配置"><a href="#数据集配置" class="headerlink" title="数据集配置"></a>数据集配置</h4><p>该默认文件位于项目的 data&#x2F;coco128.yaml，现在我们进行划分了数据集和自己的目标种类，当然要对其进行重新配置。最好的方法就是复制一份 coco128 然后修改名称，如下面 coco128_pocker.yaml 是我的配置示例。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">train: D:\<span class="number">3</span><span class="keyword">code</span>\<span class="number">6</span>pytorch\opencv_demo\<span class="number">05</span>_yolo_v5<span class="number">.6</span>\datasets\Poker\images\train  # train images (relative to <span class="string">&#x27;path&#x27;</span>) <span class="number">128</span> images</span><br><span class="line">val: D:\<span class="number">3</span><span class="keyword">code</span>\<span class="number">6</span>pytorch\opencv_demo\<span class="number">05</span>_yolo_v5<span class="number">.6</span>\datasets\Poker\images\val  # val images (relative to <span class="string">&#x27;path&#x27;</span>) <span class="number">128</span> images</span><br><span class="line"></span><br><span class="line"># Classes</span><br><span class="line">nc: <span class="number">6</span>  # number <span class="keyword">of</span> classes</span><br><span class="line">names: [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;queen&quot;</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;ace&quot;</span>]  # <span class="keyword">class</span> names</span><br><span class="line"></span><br><span class="line"># Download script/URL (optional)</span><br><span class="line">download: https:<span class="comment">//ultralytics.com/assets/coco128.zip</span></span><br></pre></td></tr></table></figure><h4 id="模型配置"><a href="#模型配置" class="headerlink" title="模型配置"></a>模型配置</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">该默认文件位于项目的 model 下，然后选择自己的场景，如我用的是 v5s 同样就复制一份重命名。这个文件主要是定义模型的基本机构和参数，比如分类数目 nc，模型深度倍数 depth_multiple，每层通道数倍数 width_multiple，以及目标框的大小和比例的 anchors。在刚使用 <span class="symbol">YOLO</span> 的话，我们就改个 nc 就可以，后面再研究这些参数的用法，下面是 yolov5s_pocker.yaml 的示例。</span><br><span class="line"># <span class="symbol">Parameters</span></span><br><span class="line">nc: <span class="number">6</span>  # number of classes</span><br><span class="line">depth_multiple: <span class="number">0.33</span>  # model depth multiple</span><br><span class="line">width_multiple: <span class="number">0.50</span>  # layer channel multiple</span><br><span class="line">anchors:</span><br><span class="line">  - [<span class="number">10</span>,<span class="number">13</span>, <span class="number">16</span>,<span class="number">30</span>, <span class="number">33</span>,<span class="number">23</span>]  # <span class="symbol">P3</span>/<span class="number">8</span></span><br><span class="line">  - [<span class="number">30</span>,<span class="number">61</span>, <span class="number">62</span>,<span class="number">45</span>, <span class="number">59</span>,<span class="number">119</span>]  # <span class="symbol">P4</span>/<span class="number">16</span></span><br><span class="line">  - [<span class="number">116</span>,<span class="number">90</span>, <span class="number">156</span>,<span class="number">198</span>, <span class="number">373</span>,<span class="number">326</span>]  # <span class="symbol">P5</span>/<span class="number">32</span></span><br><span class="line"></span><br><span class="line"># <span class="symbol">YOLOv5</span> v6<span class="number">.0</span> backbone</span><br><span class="line">backbone:</span><br><span class="line">  # [from, number, module, args]</span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">64</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>]],  # <span class="number">0</span>-<span class="symbol">P1</span>/<span class="number">2</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">1</span>-<span class="symbol">P2</span>/<span class="number">4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">128</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">3</span>-<span class="symbol">P3</span>/<span class="number">8</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">6</span>, <span class="symbol">C3</span>, [<span class="number">256</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">5</span>-<span class="symbol">P4</span>/<span class="number">16</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">9</span>, <span class="symbol">C3</span>, [<span class="number">512</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>]],  # <span class="number">7</span>-<span class="symbol">P5</span>/<span class="number">32</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">1024</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">SPPF</span>, [<span class="number">1024</span>, <span class="number">5</span>]],  # <span class="number">9</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"># <span class="symbol">YOLOv5</span> v6<span class="number">.0</span> head</span><br><span class="line">head:</span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, nn.<span class="symbol">Upsample</span>, [<span class="symbol">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">6</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat backbone <span class="symbol">P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">512</span>, <span class="symbol">False</span>]],  # <span class="number">13</span></span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, nn.<span class="symbol">Upsample</span>, [<span class="symbol">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat backbone <span class="symbol">P3</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">256</span>, <span class="symbol">False</span>]],  # <span class="number">17</span> (<span class="symbol">P3</span>/<span class="number">8</span>-small)</span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">14</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat head <span class="symbol">P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">512</span>, <span class="symbol">False</span>]],  # <span class="number">20</span> (<span class="symbol">P4</span>/<span class="number">16</span>-medium)</span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="symbol">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">10</span>], <span class="number">1</span>, <span class="symbol">Concat</span>, [<span class="number">1</span>]],  # cat head <span class="symbol">P5</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="symbol">C3</span>, [<span class="number">1024</span>, <span class="symbol">False</span>]],  # <span class="number">23</span> (<span class="symbol">P5</span>/<span class="number">32</span>-large)</span><br><span class="line"></span><br><span class="line">   [[<span class="number">17</span>, <span class="number">20</span>, <span class="number">23</span>], <span class="number">1</span>, <span class="symbol">Detect</span>, [nc, anchors]],  # <span class="symbol">Detect</span>(<span class="symbol">P3</span>, <span class="symbol">P4</span>, <span class="symbol">P5</span>)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h4 id="权重文件"><a href="#权重文件" class="headerlink" title="权重文件"></a>权重文件</h4><p>这个就是我们从 yolo 开源那里下载的 yolov5s.pt，这里面有 80 个类目的检测，在基础识别时候可以直接用它。而训练自己的目标也需要基于他的权重再进行训练，所以可以在项目中创建一个 weights，然后再将 yolov5s.pt 放到其中。<br><img src="https://image-static.segmentfault.com/307/858/3078581037-6548ba01554ac490_fix732" alt="图片"></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><h4 id="基础预测"><a href="#基础预测" class="headerlink" title="基础预测"></a>基础预测</h4><p>在训练目标模型前，可以先试试以前的基础检测，这里我们可以随便拿一张图放到 data&#x2F;images 下，然后执行下面命令，根目录下会生成 runs，而 runs 下的 detect 会根据每次执行的次数生成不同次的标注结果。python detect.py –weights weights&#x2F;yolov5s.pt –source data&#x2F;images&#x2F;zidane.jpg<br><img src="https://image-static.segmentfault.com/341/590/3415904343-40e9fd1c19ead227_fix732" alt="图片"></p><h4 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">source: 需要进行检测的图片或视频的文件位置</span><br><span class="line">weigths: 指的是训练好的网络模型，用来初始化网络权重</span><br><span class="line">cfg：为configuration的缩写，指的是网络结构，一般对应models文件夹下的xxx.yaml文件</span><br><span class="line"><span class="keyword">data</span>：训练数据路径，一般为<span class="keyword">data</span>文件夹下的xxx.yaml文件</span><br><span class="line">epochs：设置训练的轮数（自己电脑上一般建议先小一点，测试一下，看跑一轮要多久）</span><br><span class="line">batch-<span class="built_in">size</span>：每次输出给神经网络的图片数，（需要根据自己电脑性能进行调整）</span><br><span class="line">img-<span class="built_in">size</span>：用于分别设置训练集和测试集的大小。两个数字前者为训练集大小，后者为测试集大小</span><br><span class="line">image-weights：测试过程中，图像的那些测试地方不太好，对这些不太好的地方加权重</span><br><span class="line">device：训练网络的设备cpu还是gpu</span><br><span class="line">multi-<span class="built_in">scale</span>：训练过程中对图片进行尺度变换</span><br><span class="line">workers: 多线程训练</span><br><span class="line">label-smoothing： 对标签进行平滑处理，防止过拟合</span><br></pre></td></tr></table></figure><h4 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h4><p>以下是我踩过坑后执行的命令，因为当时我用 CPU 训练一轮要 7 分钟就改成了 GPU，加了 –device 0 后速度快了 4 倍。batch-size 为 2，这么小是因为我的显卡 750Ti 显存只有 2G，就暂时用了这个数值。而加了 –workers 0，也是因为有坑，这个后面再说。训练完成后，会在根目录的 runs&#x2F;train 下生成每次运行的权重文件和损失准确示例图等，其中 weights 下的 best.pt 和 last.pt，分别表示本轮训练最好的权重和最新的权重。<br>python train.py –weights weights&#x2F;yolov5s.pt –cfg models&#x2F;yolov5s_pocker.yaml –data data&#x2F;coco128_pocker.yaml –epochs 1 –batch-size 2 –multi-scale –device 0 –workers 0<br><img src="https://image-static.segmentfault.com/354/272/3542721148-cbbce6058bb70092_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/255/417/2554173645-f5d7f1dcd2c61b74_fix732" alt="图片"></p><h3 id="开始检测"><a href="#开始检测" class="headerlink" title="开始检测"></a>开始检测</h3><p>训练完成后，我们可以把本轮的 best.pt 放到根目录的 weights 下，以下是不同检测方式的命令，可以分别都试一下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 图片</span><br><span class="line">python detect<span class="selector-class">.py</span>  <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/cam_image16<span class="selector-class">.jpg</span></span><br><span class="line"><span class="number">2</span>. 视频</span><br><span class="line">python detect<span class="selector-class">.py</span>  <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/test<span class="selector-class">.mov</span></span><br><span class="line"><span class="number">3</span>. 使用cuda测试</span><br><span class="line">python detect<span class="selector-class">.py</span> <span class="attr">--device</span> <span class="number">0</span> <span class="attr">--weights</span> weights/best<span class="selector-class">.pt</span> <span class="attr">--data</span> data/coco128_pocker<span class="selector-class">.yaml</span> <span class="attr">--source</span> data/images/IMG_2681.JPG</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/154/622/1546221456-7bf1202145704a9f_fix732" alt="图片"></p><h3 id="detect-py-重写"><a href="#detect-py-重写" class="headerlink" title="detect.py 重写"></a>detect.py 重写</h3><p>因为在实际项目中，我们对图片和视频的目标检测，更多的可能是通过前端传递过来的图片或视频，模型给出的是预测的类目名称和目标的位置，而不是直接生成标注的图片和视频。所以我对 demo 提供的 detect 进行了简单的修改，修改结果就是前面放出的图片，不过还是采用命令方式，当然也可以直接改成接口，最后就是如果需要代码的可以评论区留言哈。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">import warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">import argparse</span><br><span class="line"><span class="keyword">from</span> utils.datasets import *</span><br><span class="line"><span class="keyword">from</span> utils.torch_utils import *</span><br><span class="line"><span class="keyword">from</span> utils.augmentations import *</span><br><span class="line"><span class="keyword">from</span> utils.general import *</span><br><span class="line"><span class="keyword">from</span> models.common import DetectMultiBackend</span><br><span class="line"><span class="keyword">from</span> utils.plots import Annotator, colors, save_one_box</span><br><span class="line">import time</span><br><span class="line">import cv2</span><br><span class="line">import torch</span><br><span class="line">import random</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def detect(<span class="attribute">save_img</span>=<span class="literal">False</span>):</span><br><span class="line">    # 解析配置参数</span><br><span class="line">    source, weights, data, imgsz = opt.source, opt.weights, opt.data, opt.img_size</span><br><span class="line"></span><br><span class="line">    # 初始化 模型推理硬件</span><br><span class="line">    device = select_device(opt.device)</span><br><span class="line">    model = DetectMultiBackend(weights, <span class="attribute">device</span>=device, <span class="attribute">dnn</span>=<span class="literal">False</span>, <span class="attribute">data</span>=data)</span><br><span class="line">    stride, names, pt, jit, onnx, engine = model.stride, model.names, model.pt, model.jit, model.onnx, model.engine</span><br><span class="line">    imgsz = check_img_size(imgsz, <span class="attribute">s</span>=stride)</span><br><span class="line"></span><br><span class="line">    dataset = LoadImages(source, <span class="attribute">img_size</span>=imgsz, <span class="attribute">stride</span>=stride, <span class="attribute">auto</span>=pt)</span><br><span class="line"></span><br><span class="line">    dt, seen = [0.0, 0.0, 0.0], 0</span><br><span class="line">    <span class="keyword">for</span> path, im, im0s, vid_cap, s <span class="keyword">in</span> dataset:</span><br><span class="line">        t1 = time_sync()</span><br><span class="line">        # im = torch.from_numpy(im).<span class="keyword">to</span>(device)</span><br><span class="line">        im = torch.from_numpy(im.astype(np.float32)).<span class="keyword">to</span>(device)</span><br><span class="line">        im /= 255  # 0 - 255 <span class="keyword">to</span> 0.0 - 1.0</span><br><span class="line">        <span class="keyword">if</span> len(im.shape) == 3:</span><br><span class="line">            im = im[None]  # expand <span class="keyword">for</span> batch dim</span><br><span class="line">        t2 = time_sync()</span><br><span class="line">        dt[0] += t2 - t1</span><br><span class="line"></span><br><span class="line">        dt[0] += t2 - t1</span><br><span class="line"></span><br><span class="line">        # Inference</span><br><span class="line">        # visualize = increment_path(save_dir / Path(path).stem, <span class="attribute">mkdir</span>=<span class="literal">True</span>) <span class="keyword">if</span> visualize <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        pred = model(im)</span><br><span class="line">        t3 = time_sync()</span><br><span class="line">        dt[1] += t3 - t2</span><br><span class="line"></span><br><span class="line">        # NMS</span><br><span class="line">        pred = non_max_suppression(pred, 0.25, 0.45, None, <span class="literal">False</span>, <span class="attribute">max_det</span>=1000)</span><br><span class="line">        dt[2] += time_sync() - t3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, det <span class="keyword">in</span> enumerate(pred):</span><br><span class="line">            p, s, im0 = source, <span class="string">&#x27;&#x27;</span>, im0s</span><br><span class="line"></span><br><span class="line">            # <span class="built_in">print</span>(<span class="string">&#x27;im0_shape：&#x27;</span>, im0.shape)</span><br><span class="line"></span><br><span class="line">            s += <span class="string">&#x27;%gx%g &#x27;</span> % im.shape[2:]  # <span class="built_in">print</span> string</span><br><span class="line">            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  #  normalization gain whwh</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> det is <span class="keyword">not</span> None <span class="keyword">and</span> len(det):</span><br><span class="line">                # 推理的图像分辨率转为原图分辨率：Rescale boxes <span class="keyword">from</span> img_size <span class="keyword">to</span> im0 size</span><br><span class="line">                det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()</span><br><span class="line"></span><br><span class="line">                # <span class="built_in">Print</span> results</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> det[:, -1].unique():</span><br><span class="line">                    n = (det[:, -1] == c).sum()  # detections per class</span><br><span class="line">                    s += <span class="string">&#x27;%g %ss, &#x27;</span> % (n, names[int(c)])  # <span class="built_in">add</span> <span class="keyword">to</span> string</span><br><span class="line"></span><br><span class="line">                # Write results</span><br><span class="line">                output_dict_ = []</span><br><span class="line">                <span class="keyword">for</span> *xyxy, conf, cls <span class="keyword">in</span> det:</span><br><span class="line">                    x1, y1, x2, y2 = xyxy</span><br><span class="line">                    output_dict_.append((float(x1), float(y1), float(x2), float(y2)))</span><br><span class="line">                    label = <span class="string">&#x27;%s %.2f&#x27;</span> % (names[int(cls)], conf)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;---------------------------------------------------------------------&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;尺寸：&quot;</span>, im0.shape)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;坐标：&quot;</span>, (float(x1), float(y1), float(x2), float(y2)))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;标识：&quot;</span>, label)</span><br><span class="line">                # <span class="built_in">print</span>(<span class="string">&quot;output_dict_ : &quot;</span>, output_dict_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;weights/yolov5s.pt&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;model.pt path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;data/coco128_pocker.yaml&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;dataset.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--source&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&quot;./video/1.mp4&quot;</span>, <span class="attribute">help</span>=<span class="string">&#x27;source&#x27;</span>)  # file/folder, 0 <span class="keyword">for</span> webcam</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--img-size&#x27;</span>, <span class="attribute">type</span>=int, <span class="attribute">default</span>=640, <span class="attribute">help</span>=<span class="string">&#x27;inference size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf-thres&#x27;</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.31, <span class="attribute">help</span>=<span class="string">&#x27;object confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou-thres&#x27;</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.45, <span class="attribute">help</span>=<span class="string">&#x27;IOU threshold for NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--fourcc&#x27;</span>, <span class="attribute">type</span>=str, <span class="attribute">default</span>=<span class="string">&#x27;mp4v&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;output video codec (verify ffmpeg support)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, <span class="attribute">default</span>=<span class="string">&#x27;&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, <span class="attribute">nargs</span>=<span class="string">&#x27;+&#x27;</span>, <span class="attribute">type</span>=int, <span class="attribute">help</span>=<span class="string">&#x27;filter by class&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--agnostic-nms&#x27;</span>, <span class="attribute">action</span>=<span class="string">&#x27;store_true&#x27;</span>, <span class="attribute">help</span>=<span class="string">&#x27;class-agnostic NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--augment&#x27;</span>, <span class="attribute">default</span>=<span class="literal">False</span>, <span class="attribute">help</span>=<span class="string">&#x27;augmented inference&#x27;</span>)</span><br><span class="line">    opt = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(opt)  # 打印输入配置参数</span><br><span class="line"></span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        detect(<span class="attribute">save_img</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将 Python 项目打包成 exe，另带卸载功能！</title>
      <link href="/2024/05/30/%E5%A6%82%E4%BD%95%E5%B0%86%20Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90%20exe%EF%BC%8C%E5%8F%A6%E5%B8%A6%E5%8D%B8%E8%BD%BD%E5%8A%9F%E8%83%BD%EF%BC%81/"/>
      <url>/2024/05/30/%E5%A6%82%E4%BD%95%E5%B0%86%20Python%20%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90%20exe%EF%BC%8C%E5%8F%A6%E5%B8%A6%E5%8D%B8%E8%BD%BD%E5%8A%9F%E8%83%BD%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我是做 web 的，但是对 Python 的众多开源项目一直都很关注。像之前的 stable diffusion 的 AI 绘画，和 so-vits-svc 音色替换等源码的部署文档都很完善了。尽管如此，对于刚入门的和本地环境搭建各种踩坑的同学，又急于一试就显得不太友好了。针对这一现象，网上早有了各种大佬做了一键部署的解决方案，不用安装 Python 环境，不用下载各种依赖包，点一下 exe 就可以用了。    </p><p>那他们是怎么做的呢，到这里应该已经很多人会说用 pyinstaller。是的这个确实可以解决整体环境打包，但是有时候一些图标和依赖文件要放在一起才能正常使用，类似于绿色桌面工具。那有没有方法对这个进一步封装，就是点击 exe 后需要安装，然后安装后才是项目的文件，还可以卸载，答案就是用 Inno Setup Compiler。那么，接下来我就用一个 GUI 的小 demo 完成 exe 打包和进一步安装打包。<br><img src="https://image-static.segmentfault.com/279/444/2794446223-f02b7a7b73003e25_fix732" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Python 3.8<br>Tkinter (自带)<br>pyinstaller 6.3.0<br>Inno Setup Compiler </p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>用 conda 单独创建一虚拟环境，比如写一个 tkinter 应用，对了为了好看，我们可以设置以下 icon，尺寸 32x32，大图标 64x64 准备一下即可。然后用 pyinstaller 将应用达成文件包 (含 exe)，最后用 Inno Setup Compiler 达成安装包，里面就是各种文件关联，图标和信息的设置了。<br><img src="https://image-static.segmentfault.com/144/031/144031524-21473df23511ccdb_fix732" alt="图片"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="环境创建"><a href="#环境创建" class="headerlink" title="环境创建"></a>环境创建</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建环境</span></span><br><span class="line"><span class="attribute">conda</span> create -n tools_env python=<span class="number">3</span>.<span class="number">8</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 进入环境</span></span><br><span class="line"><span class="attribute">conda</span> activate tools_env</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3. 安装 pyinstaller</span></span><br><span class="line"><span class="attribute">pip</span> install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h4 id="编码示例"><a href="#编码示例" class="headerlink" title="编码示例"></a>编码示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import tkinter as tk</span><br><span class="line"><span class="keyword">from</span> tkinter import ttk</span><br><span class="line"><span class="keyword">from</span> tkinter import messagebox</span><br><span class="line"><span class="keyword">from</span> ToolTip import ToolTip</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Application(tk.Tk):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.title(<span class="string">&quot;公众号：ZERO开发&quot;</span>)</span><br><span class="line">        self.iconbitmap(<span class="string">&#x27;logo.ico&#x27;</span>)</span><br><span class="line">        self.geometry(<span class="string">&quot;600x370&quot;</span>)  # 设置固定的窗口大小</span><br><span class="line">        self.resizable(<span class="literal">False</span>, <span class="literal">False</span>)  # 禁止调整窗口大小</span><br><span class="line">        self.style = ttk.Style(self)</span><br><span class="line">        self.main_color = self.cget(<span class="string">&quot;bg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TEntry&quot;</span>,</span><br><span class="line">                             <span class="attribute">padding</span>=6,</span><br><span class="line">                             <span class="attribute">relief</span>=<span class="string">&quot;flat&quot;</span>,</span><br><span class="line">                             <span class="attribute">background</span>=<span class="string">&quot;#0078d7&quot;</span>,</span><br><span class="line">                             <span class="attribute">foreground</span>=<span class="string">&quot;black&quot;</span>,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TLabel&quot;</span>,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12, <span class="string">&quot;bold&quot;</span>))</span><br><span class="line"></span><br><span class="line">        self.style.configure(<span class="string">&quot;TButton&quot;</span>,</span><br><span class="line">                             <span class="attribute">padding</span>=6,</span><br><span class="line">                             font=(<span class="string">&quot;Arial&quot;</span>, 12))</span><br><span class="line"></span><br><span class="line">        self.create_widgets()</span><br><span class="line"></span><br><span class="line">    def create_widgets(self):</span><br><span class="line">        self.path_label = ttk.Label(self, <span class="attribute">text</span>=<span class="string">&#x27;绝对路径:&#x27;</span>)</span><br><span class="line">        self.path_label.grid(<span class="attribute">row</span>=0, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=30, <span class="attribute">padx</span>=20)</span><br><span class="line"></span><br><span class="line">        self.path = tk.StringVar()</span><br><span class="line">        self.path_entry = ttk.Entry(self, <span class="attribute">width</span>=60, <span class="attribute">textvariable</span>=self.path)</span><br><span class="line">        self.path_entry.grid(<span class="attribute">row</span>=0, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.E, <span class="attribute">pady</span>=5)</span><br><span class="line">        ToolTip(self.path_entry, <span class="string">&quot;电脑里的目录路径，如 D:\\3code\\6pytorch\pytorch_ai_demo&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.rename_label = ttk.Label(self, <span class="attribute">text</span>=<span class="string">&#x27;修改名称:&#x27;</span>)</span><br><span class="line">        self.rename_label.grid(<span class="attribute">row</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=5, <span class="attribute">padx</span>=20)</span><br><span class="line"></span><br><span class="line">        self.rename = tk.StringVar()</span><br><span class="line">        self.rename_entry = ttk.Entry(self, <span class="attribute">width</span>=60, <span class="attribute">textvariable</span>=self.rename)</span><br><span class="line">        self.rename_entry.grid(<span class="attribute">row</span>=1, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.E, <span class="attribute">pady</span>=5)</span><br><span class="line"></span><br><span class="line">        self.msg_text = tk.Text(self, <span class="attribute">height</span>=2, <span class="attribute">width</span>=60, <span class="attribute">wrap</span>=<span class="string">&#x27;none&#x27;</span>)  # 添加一个列表框来显示文件名</span><br><span class="line">        self.msg_text.grid(<span class="attribute">row</span>=2, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=15)</span><br><span class="line">        self.msg_text.configure(<span class="attribute">bd</span>=0, <span class="attribute">relief</span>=<span class="string">&quot;solid&quot;</span>, <span class="attribute">bg</span>=self.main_color)</span><br><span class="line">        # self.msg_text.insert(tk.END, <span class="string">&quot;这是要显示的文本。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ttk.Button(self, <span class="attribute">text</span>=<span class="string">&#x27;确认修改&#x27;</span>, <span class="attribute">command</span>=self.start_program).grid(row=3, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">pady</span>=20, <span class="attribute">padx</span>=120)</span><br><span class="line">        ttk.Button(self, <span class="attribute">text</span>=<span class="string">&#x27;关于作者&#x27;</span>, <span class="attribute">command</span>=self.about).grid(row=4, <span class="attribute">column</span>=1, <span class="attribute">sticky</span>=tk.W, <span class="attribute">padx</span>=120)</span><br><span class="line"></span><br><span class="line">    def start_program(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;绝对路径：&#123;&#125;, 重命名：&#123;&#125;&quot;</span>. format(self.path.<span class="built_in">get</span>(), self.rename.<span class="built_in">get</span>()))</span><br><span class="line"></span><br><span class="line">        path = self.path.<span class="built_in">get</span>()</span><br><span class="line">        rename = self.rename.<span class="built_in">get</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> path == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> rename == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;输入框不能为空！&quot;</span>)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path) == <span class="literal">False</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;绝对路径不正确！&quot;</span>)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        i = 0</span><br><span class="line">        # <span class="string">&#x27;该文件夹下所有的文件（包括文件夹）&#x27;</span></span><br><span class="line">        FileList = os.listdir(path)</span><br><span class="line"></span><br><span class="line">        # <span class="string">&#x27;遍历所有文件&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> FileList:</span><br><span class="line">            oldDirPath = os.path.join(path, files)</span><br><span class="line"></span><br><span class="line">            self.msg_text.delete(1.0, tk.END)</span><br><span class="line">            self.msg_text.insert(tk.END, oldDirPath)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;如果是文件夹则递归调用&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(oldDirPath):</span><br><span class="line">                self.start_program(oldDirPath)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;文件名&#x27;</span></span><br><span class="line">            fileName = os.path.splitext(files)[0]</span><br><span class="line">            # <span class="string">&#x27;文件扩展名&#x27;</span></span><br><span class="line">            fileType = os.path.splitext(files)[1]</span><br><span class="line">            fileType = fileType.lower()</span><br><span class="line"></span><br><span class="line">            newDirPath = os.path.join(path, rename + <span class="string">&quot;_&quot;</span> + str(i) + fileType)</span><br><span class="line"></span><br><span class="line">            # <span class="string">&#x27;重命名&#x27;</span></span><br><span class="line">            os.rename(oldDirPath, newDirPath)</span><br><span class="line">            i += 1</span><br><span class="line"></span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;信息&quot;</span>, <span class="string">&quot;操作完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    def about(self):</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;关于&quot;</span>, <span class="string">&quot;微信公众号：ZERO开发\r\n\r\n工具：批量修改文件1.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    def quit_program(self):</span><br><span class="line">        self.destroy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = Application()</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure><h4 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h4><p>pyinstaller -F -w Application.py -–icon&#x3D;logo.ico<br><img src="https://image-static.segmentfault.com/215/637/2156373440-5904f0f705ce1152_fix732" alt="图片"><br>这里我们希望打包是自己的图标就带上 icon，而且打开时不要出现黑色闪框就带上 w，当然后面打开 exe 要把 icon 放到与他同一级的目录中，尺寸上面已经说了，下面是参数说明。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">参数说明：    </span><br><span class="line"><span class="deletion">-–icon=图标路径</span></span><br><span class="line"><span class="deletion">-F 打包成一个exe文件</span></span><br><span class="line"><span class="deletion">-w 使用窗口，无控制台</span></span><br><span class="line"><span class="deletion">-c 使用控制台，无窗口</span></span><br><span class="line"><span class="deletion">-D 创建一个目录，里面包含exe以及其他一些依赖性文件</span></span><br></pre></td></tr></table></figure><p>还有一个问题是，如果是修改了代码，需要反复多次打包，可以把项目前一次打包生成的生成的 spec 后缀文件删除即可。打包成功后，控制面包会显示 Building EXE from EXE-00.toc completed successfully，然后根目录的 dist 就是打包后的文件包，里面需要的文件图片等都在里面，后面用 Inno Setup Compiler 也就是对这个文件夹打包。<br><img src="https://image-static.segmentfault.com/346/065/3460652742-40f3b853ed65482b_fix732" alt="图片"><br><img src="https://segmentfault.com/img/remote/1460000044486411" alt="图片"></p><h4 id="Inno-Setup-Compiler-操作"><a href="#Inno-Setup-Compiler-操作" class="headerlink" title="Inno Setup Compiler 操作"></a>Inno Setup Compiler 操作</h4><p>新建脚本，填写信息</p><p><img src="https://image-static.segmentfault.com/253/032/2530320731-e84a5e5078cc75bf_fix732" alt="图片"></p><p>选择主程序和需要的文件</p><p><img src="https://image-static.segmentfault.com/191/164/1911642914-f83b2079c5a5559d_fix732" alt="图片"></p><p>设置名称和 icon</p><p><img src="https://image-static.segmentfault.com/146/108/1461087550-556de6402714ff46_fix732" alt="图片"></p><p>选择导出位置 (前面还有协议等设置)</p><p><img src="https://image-static.segmentfault.com/168/158/168158026-7abe4b306413d623_fix732" alt="图片"></p><p>运行脚本开始生成</p><p><img src="https://image-static.segmentfault.com/253/508/253508023-7ed276ac293ec822_fix732" alt="图片"></p><p>安装打开，安装目录里有自带卸载程序</p><p><img src="https://image-static.segmentfault.com/368/896/3688964355-546d3f70e917260d_fix732" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桌面应用开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用 Python 实现一个 “系统声音” 的实时律动挂件</title>
      <link href="/2024/05/30/%E5%A6%82%E4%BD%95%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20%E2%80%9C%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E2%80%9D%20%E7%9A%84%E5%AE%9E%E6%97%B6%E5%BE%8B%E5%8A%A8%E6%8C%82%E4%BB%B6/"/>
      <url>/2024/05/30/%E5%A6%82%E4%BD%95%E7%94%A8%20Python%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20%E2%80%9C%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3%E2%80%9D%20%E7%9A%84%E5%AE%9E%E6%97%B6%E5%BE%8B%E5%8A%A8%E6%8C%82%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应该是三年前，我用 Esp8266 和 ws2812 实现了一个音乐律动灯带。就是电脑播放音乐时，灯带会随着系统内部音乐播放的频率而闪动不同色彩的灯珠。而当时用来监听系统声音的工具是一个博主提供的，除了实时采集声音外还通过 UDP 传递数据到 Esp8266 上。</p><p>而这次，我就自己用 Python 实现一下，不过不传数据，就采集后直接实时地在电脑上绘制波形动画，主要是用来作为 FL Studio 播放时的一个桌面小挂件。<br><img src="https://image-static.segmentfault.com/427/679/4276797434-0949231c1860f960" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>python3.8</p></li><li><p>pyaudio0.2.14</p></li><li><p>matplotlib<br><img src="https://image-static.segmentfault.com/264/586/264586738-951598ea57acb56b_fix732" alt="图片"></p><h2 id="pyaudio-简介"><a href="#pyaudio-简介" class="headerlink" title="pyaudio 简介"></a>pyaudio 简介</h2><p>pyaudio 是一个跨平台地音频 I&#x2F;O 库，使用他可以在 Python 程序中进行播放，录音和生成 wav 文件等。需要注意的是，如果要使用 pyaudio 时，python 的版本最好在 3.7 以上，不然 pip 安装会报错。因为以下例子是获取系统内部声音，而 pyaudio 读取的音频流默认是麦克风，所以接下来介绍一下关于获取的设备列表信息。</p><h4 id="代码获取设备列表"><a href="#代码获取设备列表" class="headerlink" title="代码获取设备列表"></a>代码获取设备列表</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pyaudio实例</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line"><span class="comment"># 获取设备总数</span></span><br><span class="line">device_count = audio.get_device_count()</span><br><span class="line"><span class="comment"># 根据设备索引获取设备详细信息</span></span><br><span class="line">for i in range(p.get_device_count()):</span><br><span class="line">  devInfo = p.get_device_info_by_index(i)</span><br><span class="line">  print(devInfo)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/312/429/3124297982-d02f63aeed4d1257_fix732" alt="图片"></p><h4 id="设备信息参数介绍"><a href="#设备信息参数介绍" class="headerlink" title="设备信息参数介绍"></a>设备信息参数介绍</h4></li><li><p>index: 设备的索引号，通常用于标识系统中的设备顺序。</p></li><li><p>structVersion: 结构版本号，用于表示这个数据结构的版本。</p></li><li><p>name: 设备的名称，这里是 “Microsoft 声音映射器 - Input”。</p></li><li><p>hostApi: 主 API 的标识符，通常用于表示该设备属于哪个 API 或系统。</p></li><li><p>maxInputChannels: 设备支持的最大输入通道数，这里是 2，表示设备支持 2 个输入通道。</p></li><li><p>maxOutputChannels: 设备支持的最大输出通道数，这里为 0，表示该设备没有输出通道。</p></li><li><p>defaultLowInputLatency: 默认的低输入延迟，以秒为单位，这里是 0.09 秒。</p></li><li><p>defaultLowOutputLatency: 默认的低输出延迟，这里是 0.09 秒。</p></li><li><p>defaultHighInputLatency: 默认的高输入延迟，这里是 0.18 秒。</p></li><li><p>defaultHighOutputLatency: 默认的高输出延迟，这里是 0.18 秒。</p></li><li><p>defaultSampleRate: 默认的采样率，这里是 44100.0 赫兹，这是 CD 质量的音频标准采样率。<br><img src="https://image-static.segmentfault.com/630/858/63085841-88f7b48856a39313_fix732" alt="图片"></p><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="开启立体声混音权限"><a href="#开启立体声混音权限" class="headerlink" title="开启立体声混音权限"></a>开启立体声混音权限</h4><p>打开电脑设置 - 系统 - 声音 - 管理声音设备 - 立体声混响，点击启用。<br><img src="https://image-static.segmentfault.com/685/561/685561159-83a23b72ed13e8ba_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/146/378/1463783907-c6df507dcbfa73cf_fix732" alt="图片"></p><h4 id="设置设备索引号"><a href="#设置设备索引号" class="headerlink" title="设置设备索引号"></a>设置设备索引号</h4><p>打开立体声混音后，通过 pyaudio 获取设备列表，找到带有 “立体声混音” 的名称，和 hostApi 为 0 的，hostAPI &#x3D; 0 表明是 MME 设备。然后拿到该设备索引号，打开音频流时指定该内录设备序号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalRecordingDevice</span>(<span class="params">p</span>):</span><br><span class="line">  <span class="comment"># 要找查的设备名称中的关键字</span></span><br><span class="line">  target = <span class="string">&#x27;立体声混音&#x27;</span></span><br><span class="line">  <span class="comment"># 逐一查找声音设备</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p.get_device_count()):</span><br><span class="line">      devInfo = p.get_device_info_by_index(i)</span><br><span class="line">      <span class="built_in">print</span>(devInfo)</span><br><span class="line">      <span class="keyword">if</span> devInfo[<span class="string">&#x27;name&#x27;</span>].find(target) &gt;= <span class="number">0</span> <span class="keyword">and</span> devInfo[<span class="string">&#x27;hostApi&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">          <span class="comment"># print(&#x27;已找到内录设备,序号是 &#x27;,i)</span></span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;无法找到内录设备!&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"></span><br><span class="line">FORMAT = pyaudio.paInt16</span><br><span class="line">CHANNELS = <span class="number">1</span>  </span><br><span class="line">RATE = <span class="number">44100</span>  </span><br><span class="line">CHUNK = <span class="number">4096</span>  </span><br><span class="line"><span class="comment"># CHUNK = 1024  </span></span><br><span class="line">WAVE_OUTPUT_FILENAME = <span class="string">&#x27;audio_output.wav&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取内录设备序号,在windows操作系统上测试通过，hostAPI = 0 表明是MME设备</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findInternalRecordingDevice</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="comment"># 要找查的设备名称中的关键字</span></span><br><span class="line">    target = <span class="string">&#x27;立体声混音&#x27;</span></span><br><span class="line">    <span class="comment"># 逐一查找声音设备</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p.get_device_count()):</span><br><span class="line">        devInfo = p.get_device_info_by_index(i)</span><br><span class="line">        <span class="built_in">print</span>(devInfo)</span><br><span class="line">        <span class="keyword">if</span> devInfo[<span class="string">&#x27;name&#x27;</span>].find(target) &gt;= <span class="number">0</span> <span class="keyword">and</span> devInfo[<span class="string">&#x27;hostApi&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># print(&#x27;已找到内录设备,序号是 &#x27;,i)</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无法找到内录设备!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音频处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 pytorch-openpose 实现 “多目标” 人体姿态估计</title>
      <link href="/2024/05/30/%E5%9F%BA%E4%BA%8E%20pytorch-openpose%20%E5%AE%9E%E7%8E%B0%20%E2%80%9C%E5%A4%9A%E7%9B%AE%E6%A0%87%E2%80%9D%20%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
      <url>/2024/05/30/%E5%9F%BA%E4%BA%8E%20pytorch-openpose%20%E5%AE%9E%E7%8E%B0%20%E2%80%9C%E5%A4%9A%E7%9B%AE%E6%A0%87%E2%80%9D%20%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>还记得上次通过 MediaPipe 估计人体姿态关键点驱动 3D 角色模型，虽然节省了动作 K 帧时间，但是网上还有一种似乎更方便的方法。MagicAnimate 就是其一，说是只要提供一张人物图片和一段动作视频 (舞蹈武术等)，就可以完成图片人物转视频。</p><p>于是我就去官网体验了一下，发现动作的视频长度不能超过 5 秒，当然，如果说要整长视频可以切多段处理再合成解决。主要的还是视频需要那种背景相对较纯的，不然提交表单一直报错，还有他也不能处理画面内多人物的姿态估计。<br><img src="https://p9-sign.toutiaoimg.com/tos-cn-i-axegupay5k/e9176ca25f5a49419f5e85a9ec9d5f92~noop.image?_iz=58558&from=article.pc_detail&lk3s=953192f4&x-expires=1717677039&x-signature=yACedCIQRHu20/9cXA3//3gY5Uk=" alt="图片"></p><h2 id="多目标人体姿态估计"><a href="#多目标人体姿态估计" class="headerlink" title="多目标人体姿态估计"></a>多目标人体姿态估计</h2><p>为什么我要弄多目标，其实是我有次拿了一舞团的视频用 MediaPipe 检测，发现一个画面中只能采集到一个人的动作数据。虽然齐舞可能就一套动作，其他的角色模型可以复制粘贴，但是有些编舞为了好看，伴舞也会根据节奏作不同的变化。所以说对于我用来采集舞蹈数据，这个很重要了，当然他也可以用在多人互动的 AR 游戏，或用在同时培训多人的动作规范检测等等场景。</p><p>要从单一人体检测到多人体姿态估计，开始我是打算用 YOLO 对画面中的多 Person 区块读出来，然后再将这些方块遍历交给 MediaPipe 对指定区域作人物动作节点识别。但是最后发现有现成的算法，就是 pytorch-openpose，所以果断先用这个来体验了一下。<br><img src="https://image-static.segmentfault.com/881/124/881124019-7e318e3ee86e9911_fix732" alt="图片"></p><h2 id="pytorch-openpose-简介"><a href="#pytorch-openpose-简介" class="headerlink" title="pytorch-openpose 简介"></a>pytorch-openpose 简介</h2><p>PyTorch-OpenPose 是一个基于 PyTorch 的开源库，它实现了 OpenPose 的功能，可以进行人的面部表情、躯干和四肢甚至手指的跟踪。它不仅适用于单人也适用于多人，同时具有较好的鲁棒性。要运行 PyTorch-OpenPose，需要安装支持 CUDA 的 PyTorch，以下例子有使用作者提供的预训练模型，通过拆分视频帧，绘制多人物动作线条保存图片，最后将图片合成为视频。<br><img src="https://image-static.segmentfault.com/299/647/2996476439-b4936cd61a9d4cf8_fix732" alt="图片"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>scikit-image</p></li><li><p>opencv-python</p></li><li><p>scipy</p></li><li><p>matplotlib</p></li><li><p>numpy<br><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-twdt4qpehh/79c5a0fd3b0e43638067cae91a6e5466~noop.image?_iz=58558&from=article.pc_detail&lk3s=953192f4&x-expires=1717677039&x-signature=SiLgy/YJilaurcPU4wYCkurW2ZY=" alt="图片"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h4 id="帧拆分绘制"><a href="#帧拆分绘制" class="headerlink" title="帧拆分绘制"></a>帧拆分绘制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> model</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">from</span> src.body <span class="keyword">import</span> Body</span><br><span class="line"><span class="keyword">from</span> src.hand <span class="keyword">import</span> Hand</span><br><span class="line"></span><br><span class="line">body_estimation = Body(<span class="string">&#x27;model/body_pose_model.pth&#x27;</span>)</span><br><span class="line">hand_estimation = Hand(<span class="string">&#x27;model/hand_pose_model.pth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Torch device: <span class="subst">&#123;torch.cuda.get_device_name()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&quot;D:/3code/6pytorch/opencv_demo/12_open_pose/11.mp4&quot;</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">3</span>, <span class="number">640</span>)</span><br><span class="line">cap.<span class="built_in">set</span>(<span class="number">4</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line">indices = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  ret, oriImg = cap.read()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  candidate, subset = body_estimation(oriImg)</span><br><span class="line"></span><br><span class="line">  canvas = copy.deepcopy(oriImg)</span><br><span class="line">  canvas = util.draw_bodypose(canvas, candidate, subset)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># detect hand</span></span><br><span class="line">  hands_list = util.handDetect(candidate, subset, oriImg)</span><br><span class="line"></span><br><span class="line">  all_hand_peaks = []</span><br><span class="line">  <span class="keyword">for</span> x, y, w, is_left <span class="keyword">in</span> hands_list:</span><br><span class="line">      peaks = hand_estimation(oriImg[y:y+w, x:x+w, :])</span><br><span class="line">      peaks[:, <span class="number">0</span>] = np.where(peaks[:, <span class="number">0</span>]==<span class="number">0</span>, peaks[:, <span class="number">0</span>], peaks[:, <span class="number">0</span>]+x)</span><br><span class="line">      peaks[:, <span class="number">1</span>] = np.where(peaks[:, <span class="number">1</span>]==<span class="number">0</span>, peaks[:, <span class="number">1</span>], peaks[:, <span class="number">1</span>]+y)</span><br><span class="line">      all_hand_peaks.append(peaks)</span><br><span class="line"></span><br><span class="line">  canvas = util.draw_handpose(canvas, all_hand_peaks)</span><br><span class="line"></span><br><span class="line">  cv2.imwrite(<span class="string">&#x27;image_out/img_&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(indices), canvas)</span><br><span class="line">  indices += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;images:&quot;</span>, indices)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># cv2.imshow(&#x27;demo&#x27;, canvas)#一个窗口用以显示原视频</span></span><br><span class="line">  <span class="comment"># if cv2.waitKey(1) &amp; 0xFF == ord(&#x27;q&#x27;):</span></span><br><span class="line">  <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h4 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">from</span> pathlib import Path</span><br><span class="line">import cv2</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 将视频video_path分割成图片和音频文件，保存到save_path文件夹中</span><br><span class="line">def video2mp3_img(video_path, save_path, audio_path):</span><br><span class="line">    def <span class="built_in">video_split</span>(video_path, save_path):</span><br><span class="line">        if not os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">            os.<span class="built_in">makedirs</span>(save_path)</span><br><span class="line">        cap = cv2.<span class="built_in">VideoCapture</span>(video_path)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        while True:</span><br><span class="line">            ret, frame = cap.<span class="built_in">read</span>()</span><br><span class="line">            if ret:</span><br><span class="line">                cv2.<span class="built_in">imwrite</span>(save_path + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.jpg&#x27;</span>, frame)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        cap.<span class="built_in">release</span>()</span><br><span class="line"></span><br><span class="line">    if not os.path.<span class="built_in">exists</span>(save_path):</span><br><span class="line">        os.<span class="built_in">makedirs</span>(save_path)</span><br><span class="line"></span><br><span class="line">    # 视频分割</span><br><span class="line">    <span class="built_in">video_split</span>(video_path, save_path)</span><br><span class="line"></span><br><span class="line">    # 视频转音频</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125; -vn -acodec copy &#123;&#125;/audio.mp3&quot;</span>.<span class="built_in">format</span>(video_path, audio_path))</span><br><span class="line">    os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125; -q:a 0 -map a &#123;&#125;/audio.mp3&quot;</span>.<span class="built_in">format</span>(video_path, audio_path))</span><br><span class="line">    # 音频转wav</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125;/audio.mp3 &#123;&#125;/audio.wav&quot;</span>.<span class="built_in">format</span>(save_path, save_path))</span><br><span class="line"></span><br><span class="line"># 将video_imgout文件夹中的图片合成视频并且添加音频文件video_img/audio.mp3</span><br><span class="line">def <span class="built_in">img2mp4</span>(image_out, save_name):</span><br><span class="line"></span><br><span class="line">    BASE_PATH = os.path.<span class="built_in">dirname</span>(__file__)</span><br><span class="line">    # 读取img size</span><br><span class="line">    img = cv2.<span class="built_in">imread</span>(<span class="string">&quot;&#123;&#125;/img_1.jpg&quot;</span>.<span class="built_in">format</span>(image_out))</span><br><span class="line"></span><br><span class="line">    imgInfo = img.shape</span><br><span class="line">    size = (imgInfo[<span class="number">1</span>], imgInfo[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    files = []</span><br><span class="line">    for dirpath, dirnames, filenames in os.<span class="built_in">walk</span>(image_out):</span><br><span class="line">        for filename in filenames:</span><br><span class="line">            fileName = <span class="built_in">Path</span>(os.path.<span class="built_in">join</span>(dirpath, filename))</span><br><span class="line">            files.<span class="built_in">append</span>(os.path.<span class="built_in">join</span>(dirpath, filename))</span><br><span class="line"></span><br><span class="line">    files = [file.<span class="built_in">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) for file in files]</span><br><span class="line">    files.<span class="built_in">sort</span>(key=lambda x: <span class="built_in">int</span>(x.<span class="built_in">split</span>(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>].<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>].<span class="built_in">split</span>(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.<span class="built_in">VideoWriter_fourcc</span>(*<span class="string">&#x27;mp4v&#x27;</span>)</span><br><span class="line">    videoWrite = cv2.<span class="built_in">VideoWriter</span>(f<span class="string">&#x27;videos/&#123;save_name&#125;.mp4&#x27;</span>, fourcc, <span class="number">25</span>, size)  # 写入对象 <span class="number">1</span> file name  <span class="number">3</span>: 视频帧率</span><br><span class="line"></span><br><span class="line">    for i in files:</span><br><span class="line">        img = cv2.<span class="built_in">imread</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        videoWrite.<span class="built_in">write</span>(img)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&#x27;videos/&#123;save_name&#125;.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    # 将video_img中的音频文件添加到视频中</span><br><span class="line">    # os.<span class="built_in">system</span>(<span class="string">&quot;ffmpeg -i &#123;&#125;/videos/&#123;&#125;.mp4 -c:v copy -c:a aac -strict experimental &#123;&#125;/videos/&#123;&#125;.mp4&quot;</span>.<span class="built_in">format</span>(BASE_PATH, save_name, BASE_PATH, save_name))</span><br><span class="line"></span><br><span class="line">if __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    BASE = os.path.<span class="built_in">dirname</span>(__file__)</span><br><span class="line">    video_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;videos/yangguo.mp4&quot;</span>)  # 视频路径</span><br><span class="line">    save_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;video_img&quot;</span>)            # 拆解视频保存路径</span><br><span class="line">    audio_path = os.path.<span class="built_in">join</span>(BASE, <span class="string">&quot;audio&quot;</span>)               # 分离音频保存路径</span><br><span class="line"></span><br><span class="line">    # 视频  ==&gt; imgs</span><br><span class="line">    # <span class="built_in">video2mp3_img</span>(video_path, save_path, audio_path)</span><br><span class="line"></span><br><span class="line">    # # imgs ==&gt; 视频</span><br><span class="line">    <span class="built_in">img2mp4</span>(<span class="string">&quot;image_out&quot;</span>, save_name=<span class="string">&#x27;ldh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/138/021/138021118-6444ad09edf84_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端搞 Cocos 小游戏开发的三点避坑指北</title>
      <link href="/2024/05/30/%E5%90%8E%E7%AB%AF%E6%90%9E%20Cocos%20%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E7%82%B9%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/"/>
      <url>/2024/05/30/%E5%90%8E%E7%AB%AF%E6%90%9E%20Cocos%20%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%89%E7%82%B9%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先说一下我为什么要弄小游戏吧，首先无关工作，也无关兴趣，就只是想在副业里探索一下。没错就是做一个单机的小游戏上架到平台试一下水（薅广告费），不过说实话入局有点晚。    </p><p>早在 2019 年的时候，我也折腾过白鹭引擎还弄过小 demo，当时上架平台也简单。但是不知道为什么那时不顺手发布一下，录了个视频就没再管了（还是太年轻）。现在好了白鹭引擎倒了，而我也才意识到写文章做视频并不是我的强项。    </p><p>尽管现在大佬们都在 All in AI，但我还是把一个方向定在了小游戏上。选引擎二选一，挑了 Cocos Creator，之所以有下面的几个坑点，其根本原因是我没有系统性看他们的文档，所以记录一下以便后期捡起。</p><p><img src="https://image-static.segmentfault.com/289/491/2894911702-13ca6cc07d54a483_fix732" alt="图片"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><h3 id="脚本引入方式"><a href="#脚本引入方式" class="headerlink" title="脚本引入方式"></a>脚本引入方式</h3><p>这个问题是我在 Cocos Creator 资源管理器里，创建脚本时选的 js，而代码里却用了 import 的语法导致还排查了一段时间（离大谱），但下面的花括号还是要值得注意。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;util&#125; <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> startPanel <span class="keyword">from</span> <span class="string">&quot;./startPanel&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>使用 {} 的 import 允许你导入模块中的特定导出项，在这里是具体实例。</p></li><li><p>不使用 {} 的 import 允许你导入模块的默认导出，在这里只是类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gameManager from <span class="string">&quot;./gameManager&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; util &#125; from <span class="string">&quot;./util&quot;</span>;</span><br><span class="line"></span><br><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">uiManager</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> game: gameManager = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@property</span>(cc.<span class="type">Node</span>)</span><br><span class="line">  ninja: cc.<span class="type">Node</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里gameManager只是类型约束</span></span><br><span class="line">  init(game: gameManager) &#123;</span><br><span class="line">      <span class="keyword">this</span>.game = game</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onLoad() &#123;</span><br><span class="line">      <span class="comment">// 这里直接使用util的静态方法</span></span><br><span class="line">      util.resize();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的相关设置"><a href="#组件的相关设置" class="headerlink" title="组件的相关设置"></a>组件的相关设置</h3><p>大部分组件的设置可以从文档里看到，如碰撞组件 BoxCollider，渲染组件里 Sprite（精灵组件设置图片等参数），但是如何要用到其自带滑块，并也用他的精灵图，位置在 internal 里（当时我找了老半天）。internal&gt;image&gt;default_progressbar_bg （进度条举例）<br><img src="https://image-static.segmentfault.com/367/995/3679952663-ac4509d619115e6f_fix732" alt="图片"></p><h3 id="音乐和音效"><a href="#音乐和音效" class="headerlink" title="音乐和音效"></a>音乐和音效</h3><h4 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h4><p>在 Main Camera 下添加一个空白节点，在该节点中添加 AudioSource 组件，Clip 就是从 assets 里拖入的 mp3 文件。最后将节点拖入脚本中（作为组件操作播放 &#x2F; 停止）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property(cc.AudioSource)</span></span><br><span class="line">bgAudio: cc.AudioSource = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.bgAudio.play();</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/376/296/3762963357-86e195dc5ef1c7cd_fix732" alt="图片"><br><img src="https://image-static.segmentfault.com/162/907/1629077713-e2945c60fa0ca937_fix732" alt="图片"></p><h4 id="添加操作音效"><a href="#添加操作音效" class="headerlink" title="添加操作音效"></a>添加操作音效</h4><p>在脚本中定义 AudioClip 属性，然后在 assets 中拖入 mp3 文件，最后在脚本中操作音效的播放与停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property(&#123;</span></span><br><span class="line"><span class="meta">  type: cc.AudioClip</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">audioWin: cc.AudioClip = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@property(&#123;</span></span><br><span class="line"><span class="meta">  type: cc.AudioClip</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">audioLose: cc.AudioClip = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">playSound(sName)&#123;</span><br><span class="line">      <span class="keyword">switch</span>(sName)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;click&quot;</span>:</span><br><span class="line">              <span class="comment">// cc.audioEngine.play(this.audioClick, false, 1);</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;win&quot;</span>:</span><br><span class="line">              cc.audioEngine.play(<span class="built_in">this</span>.audioWin, <span class="literal">false</span>, <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;lose&quot;</span>:</span><br><span class="line">              cc.audioEngine.play(<span class="built_in">this</span>.audioLose, <span class="literal">false</span>, <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h4><p>给游戏加了开始的背景音乐和操作音效后，用编辑器运行一切正常。但是当打包成某节小游戏或某信小游戏后，发现声音直接出不来，在我不断调试也依次报了下面一堆错误。</p></li></ul><p>cocos2d-js-min.js:1 Uncaught TypeError: this.bgAudio.play is not a function</p><p>Uncaught TypeError: this.bgAudio.play is not a functionUncaught TypeError: Cannot read properties of undefined (reading ‘playMusic’)</p><p>Uncaught TypeError: Cannot read properties of null (reading ‘play’)</p><p>cc.audioEngine 为 undefined </p><p><img src="https://image-static.segmentfault.com/466/447/466447791-12f219d0aed7c2e6_fix732" alt="图片"><br>一开始我以为是引擎版本原因，切换几次后发现根本不是，因为把代码放到相同版本下的其他项目下是正常的。最主要的是打包后报的错误真不好排查，导致在这个问题上花了很多时间。最后在比较打包后的 js 文件，才怀疑是不是有些引擎里的模块没搭建来，顺着这个思路果真是音乐音效的模块被我关了，前面我还一直以为是 this 指向那里的代码有问题。<br><img src="https://image-static.segmentfault.com/165/488/1654883427-cd9d6b6f143dd48f_fix732" alt="图片"><br>解决方法就是在构造发布下面的 “项目设置”，勾选 Audio 和 AudioSource 然后再打包就可以了。其实创建项目时，默认是全选的，但可能是我前期乱折腾去掉了几项。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>后续可能还有一些关于小游戏或 Unity 游戏制作踩坑内容，包括小游戏的证书申请和上架流程等等，如果你也玩 Cocos Creator 和 Unity3D，欢迎一起交流谈论。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cocos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO+SlowFast+DeepSORT 简单实现视频行为识别</title>
      <link href="/2024/05/30/YOLO+SlowFast+DeepSORT%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB/"/>
      <url>/2024/05/30/YOLO+SlowFast+DeepSORT%20%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间刷短视频看到过别人用摄像头自动化监控员工上班状态，比如标注员工是不是离开了工位，在位置上是不是摸鱼。虽然是段子，但是这个是可以用识别技术实现一下，于是我在网上找，知道发现了 SlowFast，那么下面就用 SlowFast 简单测试一下视频的行为识别。<br><img src="https://image-static.segmentfault.com/257/030/2570309068-55c4e732c2eef7c0" alt="图片"></p><h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><h4 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h4><p>YOLO 是一个基于深度学习神经网络的对象识别和定位算法，前面我也用 v5s 训练了标注的扑克牌，实现了图片或视频中的点数识别，这里就跳过了。</p><h4 id="DeepSORT"><a href="#DeepSORT" class="headerlink" title="DeepSORT"></a>DeepSORT</h4><p>DeepSORT 是一个实现目标跟踪的算法，其使用卡尔曼滤波器预测所检测对象的运动轨迹。也就是当视频中有多个目标，算法能知道上一帧与下一帧各目标对象的匹配，从而完成平滑锁定，而不是在视频播放或记录时，检测框一闪一闪的。</p><h4 id="SlowFast"><a href="#SlowFast" class="headerlink" title="SlowFast"></a>SlowFast</h4><p>SlowFast 是一个行为分类模型 (pytorchvideo 内置)，可以通过输入视频序列和检测框信息，输出每个检测框的行为类别。所以需要借助类似 YOLO 的多目标检测模型，当然 SlowFast 也可以自行标注数据集训练，来完成自定义的行为识别。<br><img src="https://image-static.segmentfault.com/246/054/2460547519-37b0b46d1390da83_fix732" alt="图片"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><p>读取视频或者摄像头中的图片</p></li><li><p>通过 yolo 检测出画面的目标</p></li><li><p>通过 deep_sort 对目标进行跟踪</p></li><li><p>通过 slowfast 识别出目标的动作</p></li><li><p>根据识别的动作进行业务处理等<br><img src="https://segmentfault.com/img/remote/1460000044520460" alt="图片"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>整个流程下来，除了安装 slowfast 依赖 (pytorchvideo) 外，deep_sort 可以下载 <a href="https://link.segmentfault.com/?enc=9Iklchu9T8HTmKq3zcD2Tw==.O56EkHKoYCiiKVdF8ECJYjUxxL0qj57oCnSzfkBT4jvuRcH65qFGGa7acc/179wWqnMmeCd0D6Fk0HhyUAXgRg==">https://github.com/wufan-tb/yolo_slowfast&#x2F;tree&#x2F;master&#x2F;deep_sort</a> 然后 import 到项目中。如果要实时处理摄像头的视频，可以通过采用多线程，单独开一个线程读摄像头并一秒保存一张图，再开一个线程用于处理保存的图片，最后将处理后的结果保存为视频，或者只是做一些业务操作，以下只是一个例子。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os,cv2,time,torch,random,pytorchvideo,warnings,argparse,math</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>,category=UserWarning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pytorchvideo.transforms.functional <span class="keyword">import</span> (</span><br><span class="line">    uniform_temporal_subsample,</span><br><span class="line">    short_side_scale_with_boxes,</span><br><span class="line">    clip_boxes_to_image,)</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms._functional_video <span class="keyword">import</span> normalize</span><br><span class="line"><span class="keyword">from</span> pytorchvideo.data.ava <span class="keyword">import</span> AvaLabeledVideoFramePaths</span><br><span class="line"><span class="keyword">from</span> pytorchvideo.models.hub <span class="keyword">import</span> slowfast_r50_detection</span><br><span class="line"><span class="keyword">from</span> deep_sort.deep_sort <span class="keyword">import</span> DeepSort</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVideoCapture</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, source</span>):</span><br><span class="line">        self.cap = cv2.VideoCapture(source)</span><br><span class="line">        self.idx = -<span class="number">1</span></span><br><span class="line">        self.end = <span class="literal">False</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        self.idx += <span class="number">1</span></span><br><span class="line">        ret, img = self.cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            self.stack.append(img)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.end = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> ret, img</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_tensor</span>(<span class="params">self, img</span>):</span><br><span class="line">        img = torch.from_numpy(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line">        <span class="keyword">return</span> img.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_video_clip</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>, <span class="string">&quot;clip length must large than 0 !&quot;</span></span><br><span class="line">        self.stack = [self.to_tensor(img) <span class="keyword">for</span> img <span class="keyword">in</span> self.stack]</span><br><span class="line">        clip = torch.cat(self.stack).permute(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">del</span> self.stack</span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="keyword">return</span> clip</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">self</span>):</span><br><span class="line">        self.cap.release()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tensor_to_numpy</span>(<span class="params">tensor</span>):</span><br><span class="line">    img = tensor.cpu().numpy().transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ava_inference_transform</span>(<span class="params"></span></span><br><span class="line"><span class="params">    clip, </span></span><br><span class="line"><span class="params">    boxes,</span></span><br><span class="line"><span class="params">    num_frames = <span class="number">32</span>, <span class="comment">#if using slowfast_r50_detection, change this to 32, 4 for slow </span></span></span><br><span class="line"><span class="params">    crop_size = <span class="number">640</span>, </span></span><br><span class="line"><span class="params">    data_mean = [<span class="number">0.45</span>, <span class="number">0.45</span>, <span class="number">0.45</span>], </span></span><br><span class="line"><span class="params">    data_std = [<span class="number">0.225</span>, <span class="number">0.225</span>, <span class="number">0.225</span>],</span></span><br><span class="line"><span class="params">    slow_fast_alpha = <span class="number">4</span>, <span class="comment">#if using slowfast_r50_detection, change this to 4, None for slow</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    boxes = np.array(boxes)</span><br><span class="line">    roi_boxes = boxes.copy()</span><br><span class="line">    clip = uniform_temporal_subsample(clip, num_frames)</span><br><span class="line">    clip = clip.<span class="built_in">float</span>()</span><br><span class="line">    clip = clip / <span class="number">255.0</span></span><br><span class="line">    height, width = clip.shape[<span class="number">2</span>], clip.shape[<span class="number">3</span>]</span><br><span class="line">    boxes = clip_boxes_to_image(boxes, height, width)</span><br><span class="line">    clip, boxes = short_side_scale_with_boxes(clip,size=crop_size,boxes=boxes,)</span><br><span class="line">    clip = normalize(clip,</span><br><span class="line">        np.array(data_mean, dtype=np.float32),</span><br><span class="line">        np.array(data_std, dtype=np.float32),) </span><br><span class="line">    boxes = clip_boxes_to_image(boxes, clip.shape[<span class="number">2</span>],  clip.shape[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">if</span> slow_fast_alpha <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        fast_pathway = clip</span><br><span class="line">        slow_pathway = torch.index_select(clip,<span class="number">1</span>,</span><br><span class="line">            torch.linspace(<span class="number">0</span>, clip.shape[<span class="number">1</span>] - <span class="number">1</span>, clip.shape[<span class="number">1</span>] // slow_fast_alpha).long())</span><br><span class="line">        clip = [slow_pathway, fast_pathway]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> clip, torch.from_numpy(boxes), roi_boxes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_one_box</span>(<span class="params">x, img, color=[<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>], text_info=<span class="string">&quot;None&quot;</span>,</span></span><br><span class="line"><span class="params">                 velocity=<span class="literal">None</span>, thickness=<span class="number">1</span>, fontsize=<span class="number">0.5</span>, fontthickness=<span class="number">1</span></span>):</span><br><span class="line">    c1, c2 = (<span class="built_in">int</span>(x[<span class="number">0</span>]), <span class="built_in">int</span>(x[<span class="number">1</span>])), (<span class="built_in">int</span>(x[<span class="number">2</span>]), <span class="built_in">int</span>(x[<span class="number">3</span>]))</span><br><span class="line">    cv2.rectangle(img, c1, c2, color, thickness, lineType=cv2.LINE_AA)</span><br><span class="line">    t_size = cv2.getTextSize(text_info, cv2.FONT_HERSHEY_TRIPLEX, fontsize , fontthickness+<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    cv2.rectangle(img, c1, (c1[<span class="number">0</span>] + <span class="built_in">int</span>(t_size[<span class="number">0</span>]), c1[<span class="number">1</span>] + <span class="built_in">int</span>(t_size[<span class="number">1</span>]*<span class="number">1.45</span>)), color, -<span class="number">1</span>)</span><br><span class="line">    cv2.putText(img, text_info, (c1[<span class="number">0</span>], c1[<span class="number">1</span>]+t_size[<span class="number">1</span>]+<span class="number">2</span>), </span><br><span class="line">                cv2.FONT_HERSHEY_TRIPLEX, fontsize, [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>], fontthickness)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deepsort_update</span>(<span class="params">Tracker, pred, xywh, np_img</span>):</span><br><span class="line">    outputs = Tracker.update(xywh, pred[:,<span class="number">4</span>:<span class="number">5</span>],pred[:,<span class="number">5</span>].tolist(),cv2.cvtColor(np_img,cv2.COLOR_BGR2RGB))</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_yolopreds_tovideo</span>(<span class="params">yolo_preds, id_to_ava_labels, color_map, output_video, vis=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i, (im, pred) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(yolo_preds.ims, yolo_preds.pred)):</span><br><span class="line">        <span class="keyword">if</span> pred.shape[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">for</span> j, (*box, cls, trackid, vx, vy) <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(cls) != <span class="number">0</span>:</span><br><span class="line">                    ava_label = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> trackid <span class="keyword">in</span> id_to_ava_labels.keys():</span><br><span class="line">                    ava_label = id_to_ava_labels[trackid].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ava_label = <span class="string">&#x27;Unknow&#x27;</span></span><br><span class="line">                text = <span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(trackid),yolo_preds.names[<span class="built_in">int</span>(cls)],ava_label)</span><br><span class="line">                color = color_map[<span class="built_in">int</span>(cls)]</span><br><span class="line">                im = plot_one_box(box,im,color,text)</span><br><span class="line">        im = im.astype(np.uint8)</span><br><span class="line">        output_video.write(im)</span><br><span class="line">        <span class="keyword">if</span> vis:</span><br><span class="line">            cv2.imshow(<span class="string">&quot;demo&quot;</span>, im)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">config</span>):</span><br><span class="line">    device = config.device</span><br><span class="line">    imsize = config.imsize</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># model = torch.hub.load(&#x27;D:/3code/6pytorch/opencv_demo/05_yolo_v5.6&#x27;, &#x27;yolov5s&#x27;, source=&#x27;local&#x27;, pretrained=True).to(device)</span></span><br><span class="line">    model = torch.hub.load(<span class="string">&#x27;ultralytics/yolov5&#x27;</span>, <span class="string">&#x27;yolov5l6&#x27;</span>).to(device)</span><br><span class="line">    model.conf = config.conf</span><br><span class="line">    model.iou = config.iou</span><br><span class="line">    model.max_det = <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> config.classes:</span><br><span class="line">        model.classes = config.classes</span><br><span class="line">    </span><br><span class="line">    video_model = slowfast_r50_detection(<span class="literal">True</span>).<span class="built_in">eval</span>().to(device)</span><br><span class="line">    </span><br><span class="line">    deepsort_tracker = DeepSort(<span class="string">&quot;deep_sort/deep_sort/deep/checkpoint/ckpt.t7&quot;</span>)</span><br><span class="line">    ava_labelnames,_ = AvaLabeledVideoFramePaths.read_label_map(<span class="string">&quot;selfutils/temp.pbtxt&quot;</span>)</span><br><span class="line">    coco_color_map = [[random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>)]</span><br><span class="line"></span><br><span class="line">    vide_save_path = config.output</span><br><span class="line">    video=cv2.VideoCapture(config.<span class="built_in">input</span>)</span><br><span class="line">    width,height = <span class="built_in">int</span>(video.get(<span class="number">3</span>)),<span class="built_in">int</span>(video.get(<span class="number">4</span>))</span><br><span class="line">    video.release()</span><br><span class="line">    outputvideo = cv2.VideoWriter(vide_save_path,cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>), <span class="number">25</span>, (width,height))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;processing...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    cap = MyVideoCapture(config.<span class="built_in">input</span>)</span><br><span class="line">    id_to_ava_labels = &#123;&#125;</span><br><span class="line">    a=time.time()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> cap.end:</span><br><span class="line">        ret, img = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        yolo_preds=model([img], size=imsize)</span><br><span class="line">        yolo_preds.files=[<span class="string">&quot;img.jpg&quot;</span>]</span><br><span class="line">        </span><br><span class="line">        deepsort_outputs=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yolo_preds.pred)):</span><br><span class="line">            temp=deepsort_update(deepsort_tracker,yolo_preds.pred[j].cpu(),yolo_preds.xywh[j][:,<span class="number">0</span>:<span class="number">4</span>].cpu(),yolo_preds.ims[j])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp)==<span class="number">0</span>:</span><br><span class="line">                temp=np.ones((<span class="number">0</span>,<span class="number">8</span>))</span><br><span class="line">            deepsort_outputs.append(temp.astype(np.float32))</span><br><span class="line">            </span><br><span class="line">        yolo_preds.pred=deepsort_outputs</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cap.stack) == <span class="number">25</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;processing <span class="subst">&#123;cap.idx // <span class="number">25</span>&#125;</span>th second clips&quot;</span>)</span><br><span class="line">            clip = cap.get_video_clip()</span><br><span class="line">            <span class="keyword">if</span> yolo_preds.pred[<span class="number">0</span>].shape[<span class="number">0</span>]:</span><br><span class="line">                inputs, inp_boxes, _=ava_inference_transform(clip, yolo_preds.pred[<span class="number">0</span>][:,<span class="number">0</span>:<span class="number">4</span>], crop_size=imsize)</span><br><span class="line">                inp_boxes = torch.cat([torch.zeros(inp_boxes.shape[<span class="number">0</span>],<span class="number">1</span>), inp_boxes], dim=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(inputs, <span class="built_in">list</span>):</span><br><span class="line">                    inputs = [inp.unsqueeze(<span class="number">0</span>).to(device) <span class="keyword">for</span> inp <span class="keyword">in</span> inputs]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    inputs = inputs.unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    slowfaster_preds = video_model(inputs, inp_boxes.to(device))</span><br><span class="line">                    slowfaster_preds = slowfaster_preds.cpu()</span><br><span class="line">                <span class="keyword">for</span> tid,avalabel <span class="keyword">in</span> <span class="built_in">zip</span>(yolo_preds.pred[<span class="number">0</span>][:,<span class="number">5</span>].tolist(), np.argmax(slowfaster_preds, axis=<span class="number">1</span>).tolist()):</span><br><span class="line">                    id_to_ava_labels[tid] = ava_labelnames[avalabel+<span class="number">1</span>]</span><br><span class="line">                </span><br><span class="line">        save_yolopreds_tovideo(yolo_preds, id_to_ava_labels, coco_color_map, outputvideo, config.show)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;total cost: &#123;:.3f&#125; s, video length: &#123;&#125; s&quot;</span>.<span class="built_in">format</span>(time.time()-a, cap.idx / <span class="number">25</span>))</span><br><span class="line">    </span><br><span class="line">    cap.release()</span><br><span class="line">    outputvideo.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;saved video to:&#x27;</span>, vide_save_path)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--input&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;/home/wufan/images/video/vad.mp4&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test imgs folder or video or camera&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;output.mp4&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;folder to save result imgs, can not use input folder&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--imsize&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">640</span>, <span class="built_in">help</span>=<span class="string">&#x27;inference size (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.4</span>, <span class="built_in">help</span>=<span class="string">&#x27;object confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.4</span>, <span class="built_in">help</span>=<span class="string">&#x27;IOU threshold for NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;cuda&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;filter by class: --class 0, or --class 0 2 3&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--show&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;show img&#x27;</span>)</span><br><span class="line">    config = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> config.<span class="built_in">input</span>.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;using local camera.&quot;</span>)</span><br><span class="line">        config.<span class="built_in">input</span> = <span class="built_in">int</span>(config.<span class="built_in">input</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(config)</span><br><span class="line">    main(config)</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>demo 中用的是网络 yolo，默认下载位置 C:\Users\Administrator&#x2F;.cache\torch\hub\ultralytics_yolov5_master，而 slowfast 权重文件位置是 C:\Users\Administrator.cache\torch\hub\checkpoints\SLOWFAST_8x8_R50_DETECTION.pyth。 </p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>运行执行命令，出现 AttributeError: ‘Upsample’ object has no attribute ‘recompute_scale_factor’错误</p><p>根据提示，找到 torch 下的 upsampling.py，将 return F.interpolate (input, self.size, self.scale_factor, self.mode, self.align_corners 修改为return F.interpolate(input, self.size, self.scale_factor, self.mode, self.align_corners)。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种方式，浅谈 Cocos Creator 的动画添加</title>
      <link href="/2024/05/30/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%B5%85%E8%B0%88%20Cocos%20Creator%20%E7%9A%84%E5%8A%A8%E7%94%BB%E6%B7%BB%E5%8A%A0/"/>
      <url>/2024/05/30/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%B5%85%E8%B0%88%20Cocos%20Creator%20%E7%9A%84%E5%8A%A8%E7%94%BB%E6%B7%BB%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然 Cocos 的官方文档对动画系统做了较详细的介绍，但是对于刚接触的同学（比如我）来说还是不太友好。尽管如此，我就按文档加社区帖子一起实践了一下。为了方便忘记后能快速捡起，所以就用我的方式结合使用场景，简单介绍一下 Cocos Creator 动画添加的三种方式。</p><p><img src="https://image-static.segmentfault.com/142/822/1428222877-b05dc3acfe95cd47" alt="图片"></p><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><p>这个是 Cocos Creator 动画系统自带的一种对节点进行标准位移、旋转、缩放动画操作。可以用来制作一些按钮加亮，引导之类的业务型动画。</p><p><img src="https://image-static.segmentfault.com/213/163/2131635919-325fe6db8ba9ee39" alt="图片"></p><h4 id="创建节点并挂载-“Animation”-组件"><a href="#创建节点并挂载-“Animation”-组件" class="headerlink" title="创建节点并挂载 “Animation” 组件"></a>创建节点并挂载 “Animation” 组件</h4><p>添加组件 &gt; 其他组件 &gt; Animation，然后打开动画编辑器，再点击 “新建 Clip 文件”，保存后放在 “assets” 下 “animations”，后缀为.anim 的文件。<br><img src="https://image-static.segmentfault.com/360/042/3600423541-68f2772d530ab950_fix732" alt="图片"></p><h4 id="动画编辑"><a href="#动画编辑" class="headerlink" title="动画编辑"></a>动画编辑</h4><p>进入编辑后，找到属性列表，点击 “Add Property”，选择列表的 “position，width，coclor” 等属性，点击右侧菜单按钮，可以插入关键帧，删除关键帧，清空关键帧等，添加一帧就可以在属性检查器对应节点的属性进行调节。<br><img src="https://image-static.segmentfault.com/826/974/826974519-10419ecf40822c0b_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/199/406/1994064641-b6d320e09536169e_fix732" alt="图片"></p><h4 id="挂载动画剪辑"><a href="#挂载动画剪辑" class="headerlink" title="挂载动画剪辑"></a>挂载动画剪辑</h4><p>将已经编辑好的动画剪辑文件 (.anim 后缀)，拖入到节点动画组件的 animation-clip 或 Default Clip 中。4. 脚本控制创建 ts 文件，将以下代码的脚本挂载到与动画相同的节点上（当然也可以制作预设体）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(cc.<span class="type">Animation</span>);</span><br><span class="line">        <span class="comment">// start_btn_dance 动画剪辑名称</span></span><br><span class="line">        anim.play(&#x27;start_btn_dance&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h2><p>帧动画也是 Cocos Creator 自带的编辑功能，就是在指定时间内循环各种动作或样式的图片，当然前期要准备好序列帧图片放到 assets 下。</p><h4 id="创建-Animation-组件和动画剪辑"><a href="#创建-Animation-组件和动画剪辑" class="headerlink" title="创建 Animation 组件和动画剪辑"></a>创建 Animation 组件和动画剪辑</h4><p>这部分和上面的属性动画操作一样<br><img src="https://image-static.segmentfault.com/329/445/3294454098-84728ec1e33dc20e" alt="图片"></p><h4 id="动画编辑-1"><a href="#动画编辑-1" class="headerlink" title="动画编辑"></a>动画编辑</h4><p>这里在属性列表 Add Property 要选择 “cc.Sprite.spriteFrame”，然后将资源里的序列图片一张一张放入关键帧里。<br><img src="https://image-static.segmentfault.com/592/234/59223440-1a88d5a3c2c0c2c8_fix732" alt="图片"></p><h4 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>如果只是用于播放动画的和上面的也一样，但是动画事件需要分开说一下。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="comment">// 获取当前节点动画组件</span></span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(cc.<span class="type">Animation</span>);</span><br><span class="line">        <span class="comment">// 播放指定动画剪辑</span></span><br><span class="line">        anim.play(&#x27;monster&#x27;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.node.on(&#x27;onAnimCompleted&#x27;, this.onAnimCompleted, this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画事件，接收两个参数</span></span><br><span class="line">    onAnimCompleted(num, str) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;start anim completed end~&quot;</span>);</span><br><span class="line">        console.log(num);</span><br><span class="line">        console.log(str);</span><br><span class="line">        <span class="comment">//console.log(&#x27;onAnimCompleted: param1[%s], param2[%s]&#x27;, num, string);</span></span><br><span class="line">        <span class="comment">//console.log(&#x27;onAnimCompleted: this is a test event12345&#x27; + num);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h4><p>确切的说应该是动画帧事件，就是在指定帧上添加一个事件（可以预留参数），当播放到该帧时触发。当前触发是在脚本里控制，这种一般用来做比如一个角色击杀时，要触发一个大招特效动画等。<br><img src="https://image-static.segmentfault.com/211/485/2114857068-21a54bf6832085d6_fix732" alt="图片"></p><h2 id="第三方工具动画"><a href="#第三方工具动画" class="headerlink" title="第三方工具动画"></a>第三方工具动画</h2><p>通过第三方的工具制作动画后导入到 Cocos Creator， 官方提供对 Spine 和 DragonBones 的支持。下面以 Spine 为例，从工具内导出，到 Cocos 脚本控制进行演示。</p><h4 id="Spine-导出"><a href="#Spine-导出" class="headerlink" title="Spine 导出"></a>Spine 导出</h4><p>可以直接用工具提供的示例，然后选择导出，注意是 json 格式文件。<br><img src="https://image-static.segmentfault.com/216/635/2166353095-0633de7f2b3da2de_fix732" alt="图片"></p><p><img src="https://image-static.segmentfault.com/304/479/3044791017-b16b919adfeb94bd_fix732" alt="图片"></p><h4 id="Cocos-Creator-导入"><a href="#Cocos-Creator-导入" class="headerlink" title="Cocos Creator 导入"></a>Cocos Creator 导入</h4><p>将上面从 Spine 导出的三个文件整成一文件夹放入 cocos 项目下 assets 的资源下，然后找到后缀 json 文件拖入层级管理器中。<br><img src="https://image-static.segmentfault.com/593/848/593848238-159b87dc7f162bbb_fix732" alt="图片"></p><h4 id="脚本控制-1"><a href="#脚本控制-1" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>因为在 Spine 已经做好了动画，皮肤和帧事件，所以脚本也就是对动画的播放，操作换肤和事件回调等。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NewClass</span> <span class="keyword">extends</span> <span class="title">cc</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">var</span> anim = <span class="keyword">this</span>.getComponent(sp.<span class="type">Skeleton</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空动画管道</span></span><br><span class="line">        <span class="comment">//anim.clearTracks();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加动作</span></span><br><span class="line">        anim.addAnimation(<span class="number">0</span>, &#x27;run&#x27;, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">/*anim.addAnimation(0, &#x27;walk&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;jump&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;idle&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;head-turn&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;fall&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;crouch&#x27;, false, 0);</span></span><br><span class="line"><span class="comment">        anim.addAnimation(0, &#x27;attack&#x27;, false, 0);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止动画</span></span><br><span class="line">        <span class="comment">/*let SpEnt: sp.spine.TrackEntry = anim.setAnimation(0, &#x27;run&#x27;, false);</span></span><br><span class="line"><span class="comment">        SpEnt.animationStart = SpEnt.animationEnd;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换肤</span></span><br><span class="line">        <span class="comment">//anim.setSkin(&quot;default&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听动画开始</span></span><br><span class="line">        anim.setStartListener(function () &#123;</span><br><span class="line">            console.log(<span class="string">&quot;animate start~&quot;</span>);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听动画结束</span></span><br><span class="line">        anim.setCompleteListener(function () &#123;</span><br><span class="line">            console.log(&#x27;animater end~&#x27;);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/284/953/2849534078-cb1e30ab9f689052" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cocos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探 Cocos Creator： 碰撞与物理系统</title>
      <link href="/2024/05/30/%E5%88%9D%E6%8E%A2%20Cocos%20Creator%EF%BC%9A%20%E7%A2%B0%E6%92%9E%E4%B8%8E%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/05/30/%E5%88%9D%E6%8E%A2%20Cocos%20Creator%EF%BC%9A%20%E7%A2%B0%E6%92%9E%E4%B8%8E%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道你刚开始玩碰撞时，会不会遇到始终无法触发碰撞事件？玩物理系统时，自由落体的刚体会穿过 “地面” 刚体等情况？没错我全都遇到过，那么下面我就用红蓝色方块，简单实战一下 Cocos Creator 的碰撞与物理系统。<br><img src="https://image-static.segmentfault.com/128/723/128723897-3fb474755484344a" alt="图片"></p><h2 id="场景创建"><a href="#场景创建" class="headerlink" title="场景创建"></a>场景创建</h2><p>场景很简单，一个白色背景，两个红蓝色玩家，和一个绿色大草地。创建的方式也很简单，全部采用 Sprite 单色。节点创建层级管理器 -&gt;Canvas 右键 -&gt; 创建节点 -&gt; 创建渲染节点 -&gt;Sprite（单色）。<br><img src="https://image-static.segmentfault.com/439/006/439006136-7f39b5701af77d97" alt="图片"></p><h4 id="颜色填充"><a href="#颜色填充" class="headerlink" title="颜色填充"></a>颜色填充</h4><p>在属性检查器，找到 Node 下的 Color，选择色盘里的一颜色即可。分组由于物理和碰撞中都要用到，这里就提前给两个玩家和绿草地创建分组并分配好。在属性检查器的 Node 中，找到 Group 点击编辑再添加，如下图。<br><img src="https://image-static.segmentfault.com/279/757/2797579645-dc8cdfb5e971b809_fix732" alt="图片"></p><h4 id="碰撞匹对"><a href="#碰撞匹对" class="headerlink" title="碰撞匹对"></a>碰撞匹对</h4><p>将三个分组进行碰撞的匹对，一定要勾选这个，不然后面测试碰撞无法触发回调，而是直接穿过另一个物体。<br><img src="https://image-static.segmentfault.com/180/036/1800364862-0d128f15a5990bc9_fix732" alt="图片"></p><h2 id="碰撞系统测试"><a href="#碰撞系统测试" class="headerlink" title="碰撞系统测试"></a>碰撞系统测试</h2><h4 id="碰撞组件添加"><a href="#碰撞组件添加" class="headerlink" title="碰撞组件添加"></a>碰撞组件添加</h4><p>碰撞组件有三种，Box（盒状）、Circle（圆形）、Polygon（多边形），可以根据不同的物体形状选择对应组件类型，比如像赛车的就可以选盒状，合成西瓜的那种就可以选圆形。在层级管理器中选中节点，进入属性检查器，添加组件，选择碰撞组件，Box Collider。<br><img src="https://image-static.segmentfault.com/415/221/4152218047-2d044764b41e891c" alt="图片"></p><h4 id="参数介绍（Box）"><a href="#参数介绍（Box）" class="headerlink" title="参数介绍（Box）"></a>参数介绍（Box）</h4><ul><li><p>Tag： 用于给在同一节点下，标识不同碰撞组件的</p></li><li><p>Offset： 碰撞的中心点位置，用于给碰撞范围定位</p></li><li><p>Size： 默认是物品节点的大小，其实是物体碰撞的范围大小<br><img src="https://image-static.segmentfault.com/592/422/592422880-7b78c0c2399be56e_fix732" alt="图片"><br>脚本测试创建脚本，开启碰撞监听和碰撞范围绘制 Debug，update 中添加红色方块向右移动，设置碰撞产生的回调。最后拖入节点的属性面板中，前提相关物品都添加了碰撞组件，并且也勾选了碰撞匹对。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 碰撞系统（绘制和监听开启）</span></span><br><span class="line">      <span class="keyword">var</span> manager = cc.<span class="property">director</span>.<span class="title function_">getCollisionManager</span>();</span><br><span class="line">      manager.<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">      manager.<span class="property">enabledDebugDraw</span> = <span class="literal">true</span>;</span><br><span class="line">      manager.<span class="property">enabledDrawBoundingBox</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">dt</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span> += dt * <span class="number">50</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞产生的时候调用</span></span><br><span class="line"><span class="comment">   * param  &#123;Collider&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * param  &#123;Collider&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">onCollisionEnter</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_enter_1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onCollisionStay</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_stay_2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当碰撞结束后调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; other 产生碰撞的另一个碰撞组件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">Collider</span>&#125; self  产生碰撞的自身的碰撞组件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onCollisionExit</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;red_collision_exit_3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="物理系统测试"><a href="#物理系统测试" class="headerlink" title="物理系统测试"></a>物理系统测试</h2><h4 id="物理碰撞组件添加"><a href="#物理碰撞组件添加" class="headerlink" title="物理碰撞组件添加"></a>物理碰撞组件添加</h4><p>选择物理组件下的 Box（添加组件 -&gt; 物理组件 -&gt;Collider-&gt;Box），碰撞 + 刚体。参数就不介绍了，在编辑器里悬浮文字就可以看到用法描述，不过 刚体（RigidBody）的 “Type” 需要注意一下。<br><img src="https://image-static.segmentfault.com/306/275/3062755745-0c947fd4c11cf6e7_fix732" alt="图片"></p><h4 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h4><p>脚本中开启物理系统才可以看到自由落体效果，而碰撞监听需要在属性检查器的刚体中 “Enabled Contact Listen” 开启。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 开启物理系统</span></span><br><span class="line">      cc.<span class="property">director</span>.<span class="title function_">getPhysicsManager</span>().<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 物理物品绘制</span></span><br><span class="line">      <span class="comment">/*cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_pairBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_centerOfMassBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_jointBit |</span></span><br><span class="line"><span class="comment">          cc.PhysicsManager.DrawBits.e_shapeBit;*/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">dt</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**刚体的属性Enabled Contact Listen必须开启**/</span></span><br><span class="line">  <span class="comment">// 只在两个碰撞体开始接触时被调用一次</span></span><br><span class="line">  <span class="title function_">onBeginContact</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~collider start1111111111111111111111~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只在两个碰撞体结束接触时被调用一次</span></span><br><span class="line">  <span class="title function_">onEndContact</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~collider end2222222222222222222222222~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次将要处理碰撞体接触逻辑时被调用</span></span><br><span class="line">  <span class="title function_">onPreSolve</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~pre collider3333333333333333333333333~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次处理完碰撞体接触逻辑时被调用</span></span><br><span class="line">  <span class="title function_">onPostSolve</span>(<span class="params">contact, selfCollider, otherCollider</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;~solve44444444444444444444444444444444~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://image-static.segmentfault.com/128/723/128723897-3fb474755484344a" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cocos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo实战：（三）独立博客运营总结</title>
      <link href="/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过前面两个步骤，完成了静态博客从搭建到基本功能添加和界面优化。那么，这次就要介绍一下搭在GitHub上的静态博客如何运营推广。也就是如何让网站被各大搜索引擎收录？如何提高网站权重，提高收录量？</p><h2 id="网站收录"><a href="#网站收录" class="headerlink" title="网站收录"></a>网站收录</h2><h4 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h4><p>站长相关的平台有：某度站长工具、360站长平台、搜狗资源平台、必应网站管理员工具、谷歌站长工具等。列出的五个平台，可以按自身情况提交，提交方法也大同小异，以下以某度为例。</p><h4 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h4><p>添加某度、360、某狗等引擎收录，进入某度的站长工具，点击添加网站。流程就三步，输入网站，设置站点属性，最后验证网站。而验证网站又有三种方式，分别是文件验证、HTML标签验证、CNAME验证，我这里选择文件验证。</p><p>选择文件验证后，下载baidu_verify_xxxx.html文件，然后将该文件放入theme&#x2F;主题包名&#x2F;source&#x2F;根目录下。重新编译生成静态文件，而验证文件会被原封不动地复制到编译后博客根目录地public下，最后部署就完成验证了。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606113057594.png" alt="image-20240606113057594"></p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606135833994.png" alt="image-20240606135833994"></p><h4 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h4><p>进入站长工具的 “普通收录”，这里我们可以向搜索引擎主动提交网站的链接地址。其中提交的方式有三种，分别是API提交、sitemap、手动提交，而最方便快捷的就是给引擎提供sitemap，也就是网站地图，里面按固定格式放满网站上需要被收录的链接。但是某度对于这种方式有限制，需要站点达到一定量才可以使用sitemap，当然也不妨碍我们先做出地图。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240607091525644.png" alt="image-20240607091525644"></p><h5 id="安装地图生成插件"><a href="#安装地图生成插件" class="headerlink" title="安装地图生成插件"></a>安装地图生成插件</h5><p>以下两个插件都可以生成sitemap，但是generator-sitemap相比另一个多了一种txt格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h5 id="配置url"><a href="#配置url" class="headerlink" title="配置url"></a>配置url</h5><p>设置这个可以在sitemap中指定网站的地址，如果绑定了个性化域名就填写改域名。不然放入github自带域名，可能被国内引擎屏蔽，也可能由自带域名重定向个性化域名，同样都影响网站的收录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://www.zerofc.cn</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240607105629724.png" alt="image-20240607105629724"></p><h5 id="配置地图插件"><a href="#配置地图插件" class="headerlink" title="配置地图插件"></a>配置地图插件</h5><p>打开hexo的_config.yml添加下面对应插件的参数，用于配置sitemap文件的保存位置。其中上面的插件可通过txt和xml决定需要的格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># generator-sitemap插件</span><br><span class="line">sitemap:</span><br><span class="line">    #path: sitemap.txt</span><br><span class="line">    path: sitemap.xml</span><br><span class="line"></span><br><span class="line"># hexo sitemap百度网站地图</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h5 id="清理与生成"><a href="#清理与生成" class="headerlink" title="清理与生成"></a>清理与生成</h5><p>插件完毕后再重新编译打包的同时，在public下就会生成sitemap的xml文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606133915299.png" alt="image-20240606133915299"></p><h5 id="创建robots文件"><a href="#创建robots文件" class="headerlink" title="创建robots文件"></a>创建robots文件</h5><p>robots.txt 文件是一个简单的文本文件，用于指示搜索引擎爬虫如何访问和索引您的网站。创建后放入hexo主题包下的source，这样每次打包后都会在静态项目的根目录下，以下是一个简单的robots.txt文件配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *  </span><br><span class="line">Disallow: /video/  </span><br><span class="line">Disallow: /archives/</span><br></pre></td></tr></table></figure><p>上述示例告诉所有搜索引擎爬虫（<code>User-agent: *</code>）不要索引 <code>/video/</code> 和 <code>/archives/</code> 目录下的内容。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240607145358947.png" alt="image-20240607145358947"></p><h2 id="错误合集"><a href="#错误合集" class="headerlink" title="错误合集"></a>错误合集</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">On branch master</span><br></pre></td></tr></table></figure><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>windows下的换行符是CRLF而Unix的换行符格式是LF。git默认支持LF。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><h2 id="抱团友情链接"><a href="#抱团友情链接" class="headerlink" title="抱团友情链接"></a>抱团友情链接</h2><p>最好是有收录或网站权重高的，欢迎大家找我互链！</p><h2 id="添加广告联盟"><a href="#添加广告联盟" class="headerlink" title="添加广告联盟"></a>添加广告联盟</h2><p>这个后续等流量上来了再更新。</p><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><h4 id="markdown中插入视频"><a href="#markdown中插入视频" class="headerlink" title="markdown中插入视频"></a>markdown中插入视频</h4><p>启动源代码模式，输入下面代码后再切回。</p><p><img src="/img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%90%A5%E6%80%BB%E7%BB%93/image-20240606204325844.png" alt="image-20240606204325844"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://www.zerofc.cn/zd_image_bed/img/11.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span>  </span><br><span class="line">  Your browser does not support the video tag.  </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><video width="320" height="240" controls>    <source src="https://www.zerofc.cn/zd_image_bed/img/11.mp4" type="video/mp4">    Your browser does not support the video tag.  </video>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo实战：（二）个人独立博客豪华装修合集</title>
      <link href="/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE%E5%90%88%E9%9B%86/"/>
      <url>/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次介绍了使用Hexo+GitHub Pages，零成本搭建一个专属自己的独立博客网站。我觉得那篇文章是没有入门门槛的，不管你是什么行业，只要想打造个人IP，又不太想受博客平台约束，那么读完后动手操作一下也能轻松完成。而这次呢，上篇也说了Hexo会出三篇内容，这里就要在前者基础上做进一步升级，将完成下面七个主要的博客常用功能。</p><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><ul><li>Hexo如何安装Butterfly主题并配置？</li><li>Hexo如何创建页面和添加文章？</li><li>Hexo如何添加第三方评论系统？</li><li>Butterfly主题如何添加站内搜索？</li><li>Butterfly主题如何添加百度统计？</li><li>Butterfly主题如何添加文章置顶功能？</li><li>Butterfly主题如何配置RSS和404页面？</li><li>如何配合Typora完成md的同步与本地备份？</li></ul><h2 id="主题添加与配置"><a href="#主题添加与配置" class="headerlink" title="主题添加与配置"></a>主题添加与配置</h2><p>Hexo官网专门有一个栏目的主题列表，这里我选的 “butterfly”，首先拉取主题代码到themes目录下，然后在Hexo的配置中启动主题。</p><h4 id="拉取主题包"><a href="#拉取主题包" class="headerlink" title="拉取主题包"></a>拉取主题包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="启动主题"><a href="#启动主题" class="headerlink" title="启动主题"></a>启动主题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601204144917.png" alt="image-20240601204144917"></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>基础配置主要是设置网站的标题、描述、SEO、菜单等项，下面我就列出hexo的config（根目录下_config.yml），和主题Butterfly的config（themes的Butterfly下_config.yml），并注释相关项的简介仅供参考。</p><h4 id="hexo-config-yml"><a href="#hexo-config-yml" class="headerlink" title="hexo_config.yml"></a>hexo_config.yml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">title: ZERO开发                           #网站标题</span><br><span class="line">subtitle: 一个独立开发者的博客               #网站副标题</span><br><span class="line">description: 公众号：ZERO开发               #网站描述</span><br><span class="line">keywords: 技术博客、独立开发者、PHP开发、Pthon开发、人工智能、物联网、游戏开发</span><br><span class="line">author: 北桥苏              #您的名字</span><br><span class="line">language: zh-CN            #网站使用的语言</span><br><span class="line">timezone:               #网站时区。Hexo 默认使用您电脑的时区</span><br><span class="line"></span><br><span class="line"># URL 网址</span><br><span class="line">## 如果您的网站存放在子目录中，</span><br><span class="line">## 例如 http://yoursite.com/blog，则请将您的 url </span><br><span class="line">## 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">url: http://z11r00.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory 目录配置</span><br><span class="line">source_dir: source       #源文件夹，这个文件夹用来存放内容。</span><br><span class="line">public_dir: public       #公共文件夹，这个文件夹用于存放生成的站点文件。</span><br><span class="line">tag_dir: tags            #标签文件夹</span><br><span class="line">archive_dir: archives    #归档文件夹</span><br><span class="line">category_dir: categories #分类文件夹</span><br><span class="line">code_dir: downloads/code #nclude code 文件夹</span><br><span class="line">i18n_dir: :lang          #国际化（i18n）文件夹</span><br><span class="line">skip_render:             #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span><br><span class="line"></span><br><span class="line"># Writing 文章</span><br><span class="line">new_post_name: :title.md # 新建文章默认文件名</span><br><span class="line">default_layout: post     # 默认布局</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # 在新标签中打开一个外部链接，默认为true</span><br><span class="line">filename_case: 0    #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span><br><span class="line">render_drafts: false  #是否渲染_drafts目录下的文章，默认为false</span><br><span class="line">post_asset_folder: false #启动 Asset 文件夹</span><br><span class="line">relative_link: false    #把链接改为与根目录的相对位址，默认false</span><br><span class="line">future: true        #显示未来的文章，默认false</span><br><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:    #代码块的设置</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag 分类和标签的设置</span><br><span class="line">default_category: uncategorized        #默认分类</span><br><span class="line">category_map:                          #分类别名</span><br><span class="line">tag_map:                               #标签别名</span><br><span class="line"></span><br><span class="line"># 全局日期格式化</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">updated_option: &#x27;mtime&#x27;</span><br><span class="line">pagination_dir: page    #分页目录</span><br><span class="line"></span><br><span class="line">## 插件index，用于显示分页和排序配置</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 5# 0.关闭分页功能  &gt;0.每页条数</span><br><span class="line">  order_by:</span><br><span class="line">    top: -1# 置顶排序： -1.倒序 1.正序</span><br><span class="line">    date: -1# 日期排序： -1.倒序 1.正序</span><br><span class="line"></span><br><span class="line"># 主题启动配置</span><br><span class="line">theme: butterfly</span><br><span class="line"></span><br><span class="line"># Deployment github部署配置</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/z11r00/z11r00.github.io</span><br><span class="line">  branch: main</span><br><span class="line">  </span><br><span class="line">##hexo-generator-search搜索插件配置</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">  </span><br><span class="line">## rss配置</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"></span><br><span class="line">## rss位置</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h4 id="hexo-butterfly-config-yml"><a href="#hexo-butterfly-config-yml" class="headerlink" title="hexo_butterfly_config.yml"></a>hexo_butterfly_config.yml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br></pre></td><td class="code"><pre><span class="line">nav:</span><br><span class="line">  logo: /img/logo.png  # 导航栏左侧LOGO</span><br><span class="line">  display_title: true</span><br><span class="line">  fixed: true # 是否置顶导航栏</span><br><span class="line"></span><br><span class="line">## 菜单图标配置</span><br><span class="line">Home: / || fas fa-home</span><br><span class="line">Archives: /archives/ || fas fa-archive</span><br><span class="line">Tags: /tags/ || fas fa-tags</span><br><span class="line">Categories: /categories/ || fas fa-folder-open</span><br><span class="line">List||fas fa-list:</span><br><span class="line">  Music: /music/ || fas fa-music</span><br><span class="line">  Movie: /movies/ || fas fa-video</span><br><span class="line">Link: /link/ || fas fa-link</span><br><span class="line">About: /about/ || fas fa-heart</span><br><span class="line"></span><br><span class="line"># Menu 菜单跳转配置</span><br><span class="line">menu:</span><br><span class="line">  首页: / || fas fa-home</span><br><span class="line">  时间轴: /archives/ || fas fa-archive</span><br><span class="line">  标签: /tags/ || fas fa-tags</span><br><span class="line">  分类: /categories/ || fas fa-folder-open</span><br><span class="line">  #清单||fa fa-heartbeat:</span><br><span class="line">    #音乐: /music/ || fas fa-music</span><br><span class="line">    #照片: /Gallery/ || fas fa-images</span><br><span class="line">    #电影: /movies/ || fas fa-video</span><br><span class="line">  友链: /link/ || fas fa-link</span><br><span class="line">  关于: /about/ || fas fa-heart</span><br><span class="line"></span><br><span class="line"># Code Blocks (代碼相關)</span><br><span class="line"># --------------------------------------</span><br><span class="line">highlight_theme: light #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # copy button</span><br><span class="line">highlight_lang: true # show the code language</span><br><span class="line">highlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span><br><span class="line">highlight_height_limit: false # unit: px</span><br><span class="line">code_word_wrap: false   # 代码是否自动换行</span><br><span class="line"></span><br><span class="line"># Social Settings (社交圖標設置)</span><br><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/z11r00 || Github || &#x27;#24292e&#x27;</span><br><span class="line">  fas fa-envelope: 2652364582@qq.com || Email || &#x27;#4a7dbe&#x27;</span><br><span class="line">  fas fa-rss: /atom.xml || RSS</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># Image (圖片設置)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Favicon（網站圖標）</span><br><span class="line">favicon: /img/favicon.png</span><br><span class="line"></span><br><span class="line"># Avatar (頭像)</span><br><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.png</span><br><span class="line">  effect: false</span><br><span class="line"></span><br><span class="line"># 是否禁用所有跳转页的顶部图片</span><br><span class="line">disable_top_img: true</span><br><span class="line"></span><br><span class="line"># 首页图</span><br><span class="line">index_img: /img/index_img.jpg</span><br><span class="line"></span><br><span class="line"># 所有页面的默认顶部图</span><br><span class="line">default_top_img: /img/default_top_img.jpeg</span><br><span class="line"></span><br><span class="line"># 归档（时间线）页面顶部图</span><br><span class="line">archive_img: /img/archive_img.jpg</span><br><span class="line"></span><br><span class="line"># 标签页面顶部图</span><br><span class="line">tag_img:</span><br><span class="line"></span><br><span class="line"># The banner image of tag page</span><br><span class="line"># format:</span><br><span class="line">#  - tag name: xxxxx</span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"># 分类页面顶部图</span><br><span class="line">category_img:</span><br><span class="line"></span><br><span class="line"># The banner image of category page</span><br><span class="line"># format:</span><br><span class="line">#  - category name: xxxxx</span><br><span class="line">category_per_img:</span><br><span class="line"></span><br><span class="line">## 封面配置</span><br><span class="line">cover:</span><br><span class="line">  # display the cover or not (是否顯示文章封面)</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # the position of cover in home page (封面顯示的位置)</span><br><span class="line">  # left/right/both</span><br><span class="line">  position: both</span><br><span class="line">  (當沒有設置cover時，默認的封面顯示)</span><br><span class="line">  default_cover:</span><br><span class="line">    - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br><span class="line"></span><br><span class="line"># Replace Broken Images (替換無法顯示的圖片)</span><br><span class="line">error_img:</span><br><span class="line">  flink: /img/friend_404.gif</span><br><span class="line">  post_page: /img/404.jpg</span><br><span class="line"></span><br><span class="line"># 404 页面配置</span><br><span class="line">error_404:</span><br><span class="line">  enable: true</span><br><span class="line">  subtitle: &#x27;Page Not Found&#x27;</span><br><span class="line">  background: /img/404.jpg</span><br><span class="line"></span><br><span class="line">## 文章配置</span><br><span class="line">post_meta:</span><br><span class="line">  page: # Home Page</span><br><span class="line">    date_type: created # created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 主頁是否顯示分類</span><br><span class="line">    tags: false # true or false 主頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 文章頁是否顯示分類</span><br><span class="line">    tags: true # true or false 文章頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line"></span><br><span class="line"># 锚点配置</span><br><span class="line">anchor:</span><br><span class="line">  # when you scroll, the URL will update according to header id.</span><br><span class="line">  auto_update: false</span><br><span class="line">  # Click the headline to scroll and update the anchor</span><br><span class="line">  click_to_scroll: false</span><br><span class="line"></span><br><span class="line"># figcaption (圖片描述文字)</span><br><span class="line">photofigcaption: false</span><br><span class="line"></span><br><span class="line"># 复制功能的配置</span><br><span class="line"># copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true      # 是否开启网站复制权限</span><br><span class="line">  copyright:</span><br><span class="line">    enable: false   # 是否开启复制版权信息添加</span><br><span class="line">    limit_count: 50 # 字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</span><br><span class="line"></span><br><span class="line"># Post</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># toc (文章的目錄配置)</span><br><span class="line">toc:</span><br><span class="line">  post: true</span><br><span class="line">  page: false</span><br><span class="line">  number: true</span><br><span class="line">  expand: false</span><br><span class="line">  style_simple: false </span><br><span class="line">  scroll_percent: true</span><br><span class="line"></span><br><span class="line"># 文章版权设置</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: false</span><br><span class="line">  author_href:</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br><span class="line"></span><br><span class="line"># Sponsor/reward 文章打赏</span><br><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  text: 打赏一下~</span><br><span class="line">  QR_code:</span><br><span class="line">    - img: /img/qrcode/wechat_trade.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: 微信</span><br><span class="line">    - img: /img/qrcode/alipay_trade.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: 支付宝</span><br><span class="line"></span><br><span class="line"># 文章编辑器配置</span><br><span class="line"># Easily browse and edit blog source code online.</span><br><span class="line">post_edit:</span><br><span class="line">  enable: false</span><br><span class="line">  # url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/</span><br><span class="line">  # For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span><br><span class="line">  url:</span><br><span class="line"></span><br><span class="line"># 文章推荐配置</span><br><span class="line">related_post:</span><br><span class="line">  enable: true</span><br><span class="line">  limit: 6 # Number of posts displayed</span><br><span class="line">  date_type: created # or created or updated 文章日期顯示創建日或者更新日</span><br><span class="line"></span><br><span class="line"># post_pagination (分頁)</span><br><span class="line"># value: 1 || 2 || false</span><br><span class="line"># 1: The &#x27;next post&#x27; will link to old post</span><br><span class="line"># 2: The &#x27;next post&#x27; will link to new post</span><br><span class="line"># false: disable pagination</span><br><span class="line">post_pagination: 1</span><br><span class="line"></span><br><span class="line"># Displays outdated notice for a post (文章過期提醒)</span><br><span class="line">noticeOutdate:</span><br><span class="line">  enable: false</span><br><span class="line">  style: flat # style: simple/flat</span><br><span class="line">  limit_day: 500 # When will it be shown</span><br><span class="line">  position: top # position: top/bottom</span><br><span class="line">  message_prev: It has been</span><br><span class="line">  message_next: days since the last update, the content of the article may be outdated.</span><br><span class="line"></span><br><span class="line"># Footer Settings（页尾设置）</span><br><span class="line"># --------------------------------------</span><br><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2017</span><br><span class="line">  custom_text: Copyright© ZERO开发-独立开发者的日常总结&lt;br/&gt;&lt;a href=&quot;https://beian.miit.gov.cn/&quot; target=&quot;_blank&quot;&gt;赣ICP备16002525号-1&lt;/a&gt;</span><br><span class="line">  # copyright: true # Copyright of theme and framework</span><br><span class="line">  copyright: false</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># aside (側邊欄)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: left # left or right</span><br><span class="line">  display:</span><br><span class="line">    archive: true</span><br><span class="line">    tag: true</span><br><span class="line">    category: true</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fas fa-video</span><br><span class="line">      text: 关注我</span><br><span class="line">      link: https://space.bilibili.com/286666708/</span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 微信公众号：ZERO开发，致力于为猿友们提供有价值的内容</span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: false</span><br><span class="line">    orderby: random # Order of tags, random/name/length</span><br><span class="line">    order: 1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: true</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_post_series:</span><br><span class="line">    enable: true</span><br><span class="line">    series_title: false # The title shows the series name</span><br><span class="line">    orderBy: &#x27;date&#x27; # Order by title or date</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line"></span><br><span class="line"># busuanzi count for PV / UV in site</span><br><span class="line"># 訪問人數</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br><span class="line"># Time difference between publish date and now (網頁運行時間)</span><br><span class="line"># Formal: Month/Day/Year Time or Year/Month/Day Time</span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: false</span><br><span class="line">  publish_date:</span><br><span class="line"></span><br><span class="line"># Aside widget - 最新评论</span><br><span class="line">newest_comments:</span><br><span class="line">  enable: true</span><br><span class="line">  sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  limit: 6</span><br><span class="line">  storage: 10 # unit: mins, save data to localStorage</span><br><span class="line">  avatar: true</span><br><span class="line"></span><br><span class="line"># Bottom right button (右下角按鈕)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span><br><span class="line">translate:</span><br><span class="line">  enable: false</span><br><span class="line">  # The text of a button</span><br><span class="line">  default: 繁</span><br><span class="line">  # the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span><br><span class="line">  defaultEncoding: 2</span><br><span class="line">  # Time delay</span><br><span class="line">  translateDelay: 0</span><br><span class="line">  # The text of the button when the language is Simplified Chinese</span><br><span class="line">  msgToTraditionalChinese: &#x27;繁&#x27;</span><br><span class="line">  # The text of the button when the language is Traditional Chinese</span><br><span class="line">  msgToSimplifiedChinese: &#x27;簡&#x27;</span><br><span class="line"></span><br><span class="line"># Read Mode (閲讀模式)</span><br><span class="line">readmode: true</span><br><span class="line"></span><br><span class="line"># Local search (hexo-generator-search创建搜索)</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  CDN:</span><br><span class="line"></span><br><span class="line"># Docsearch</span><br><span class="line">docsearch:</span><br><span class="line">  enable: false</span><br><span class="line">  appId:</span><br><span class="line">  apiKey:</span><br><span class="line">  indexName:</span><br><span class="line">  option:</span><br><span class="line"></span><br><span class="line"># Share System (分享)</span><br><span class="line"># --------------------------------------</span><br><span class="line"># Share.js</span><br><span class="line"># https://github.com/overtrue/share.js</span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  sites: weibo,wechat,qq,facebook,twitter</span><br><span class="line"></span><br><span class="line"># AddToAny</span><br><span class="line"># https://www.addtoany.com/</span><br><span class="line">addtoany:</span><br><span class="line">  enable: false</span><br><span class="line">  item: facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span><br><span class="line"></span><br><span class="line"># Comments System （评论系统）</span><br><span class="line"># --------------------------------------</span><br><span class="line"># 评论配置</span><br><span class="line">comments:</span><br><span class="line">  # Up to two comments system, the first will be shown as default</span><br><span class="line">  # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span><br><span class="line">  use: gitalk # Valine,Disqus</span><br><span class="line">  text: true # Display the comment name next to the button</span><br><span class="line">  # lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line">  lazyload: true</span><br><span class="line">  count: false # Display comment count in post&#x27;s top_img</span><br><span class="line">  card_post_count: false # Display comment count in Home Page</span><br><span class="line"></span><br><span class="line"># disqus</span><br><span class="line"># https://disqus.com/</span><br><span class="line">disqus:</span><br><span class="line">  shortname:</span><br><span class="line">  apikey: # For newest comments widget</span><br><span class="line"></span><br><span class="line"># Alternative Disqus - Render comments with Disqus API</span><br><span class="line"># DisqusJS 評論系統，可以實現在網路審查地區載入 Disqus 評論列表，兼容原版</span><br><span class="line"># https://github.com/SukkaW/DisqusJS</span><br><span class="line">disqusjs:</span><br><span class="line">  shortname:</span><br><span class="line">  apikey:</span><br><span class="line">  option:</span><br><span class="line"></span><br><span class="line"># livere (來必力)</span><br><span class="line"># https://www.livere.com/</span><br><span class="line">livere:</span><br><span class="line">  uid:</span><br><span class="line"></span><br><span class="line"># gitalk</span><br><span class="line"># https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  client_id: Ov23…………1C6fM</span><br><span class="line">  client_secret: 4304…………44433f77352</span><br><span class="line">  repo: z11r00.github.io</span><br><span class="line">  owner: z11r00</span><br><span class="line">  admin: z11r00</span><br><span class="line">  option:</span><br><span class="line"></span><br><span class="line"># Analysis （第三方统计配置）</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Baidu Analytics</span><br><span class="line"># https://tongji.baidu.com/web/welcome/login</span><br><span class="line">baidu_analytics: 74270…………………………………………</span><br><span class="line"></span><br><span class="line"># Advertisement</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Google Adsense (谷歌廣告)</span><br><span class="line">google_adsense:</span><br><span class="line">  enable: false</span><br><span class="line">  auto_ads: true</span><br><span class="line">  js: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js</span><br><span class="line">  client:</span><br><span class="line">  enable_page_level_ads: true</span><br><span class="line"></span><br><span class="line"># Verification (站長驗證)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line">site_verification:</span><br><span class="line">  # - name: google-site-verification</span><br><span class="line">  #   content: xxxxxx</span><br><span class="line">  # - name: baidu-site-verification</span><br><span class="line">  #   content: xxxxxxx</span><br></pre></td></tr></table></figure><h2 id="创建菜单页面"><a href="#创建菜单页面" class="headerlink" title="创建菜单页面"></a>创建菜单页面</h2><p>页面包括标签页（tags）、分类页（categories）、友链页（link）、关于页（about），当然也可以自行添加，比如音乐电影之类。不过添加这种页面方式都大同小异，以下以标签页举例。</p><h4 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><h4 id="编辑MD"><a href="#编辑MD" class="headerlink" title="编辑MD"></a>编辑MD</h4><p>运行命令后，会在source下根据butterfly模板生成对应的md文件，tags就是tags，不过要将md文件的type修改为对应的类型，类型见上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 标签页</span><br><span class="line">date: 2024-05-02 21:01:24</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601173015639.png" alt="image-20240601173015639"></p><h4 id="Page（页面）front-matter"><a href="#Page（页面）front-matter" class="headerlink" title="Page（页面）front-matter"></a>Page（页面）front-matter</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 页面名称</span><br><span class="line">date:  创建日期</span><br><span class="line">type: （tags,link,categories这三个页面需要配置）</span><br><span class="line">comments: (是否需要显示评论，默认true)</span><br><span class="line">description: 用于SEO优化</span><br><span class="line">top_img: (设置顶部图)</span><br><span class="line">mathjax: (数学公式显示是否支持)</span><br><span class="line">katex:   (Tex公式显示是否支持)</span><br></pre></td></tr></table></figure><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>写文章，可以通过命令创建，也可以在source&#x2F;_posts目录下，自行新建markedown文件，因为命令也是在_posts文件夹下新建。</p><h4 id="运行命令-1"><a href="#运行命令-1" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章的大标题&quot;</span><br></pre></td></tr></table></figure><h4 id="Post（文章）front-matter"><a href="#Post（文章）front-matter" class="headerlink" title="Post（文章）front-matter"></a>Post（文章）front-matter</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">title: CentOS7下Tomcat启动慢的原因及解决方案</span><br><span class="line">date: 2017-12-02 21:01:24</span><br><span class="line">description：文章描述，用于做SEO优化的</span><br><span class="line">keywords: 文章SEO关键词</span><br><span class="line">top_img: 文章顶部图</span><br><span class="line">cover: 文章缩略图（封面图）</span><br><span class="line">toc: true (是否显示文章目录)</span><br><span class="line">toc_number: true (是否显示文章目录的标识数字)</span><br><span class="line">copyright: true (是否显示版权)</span><br><span class="line">mathjax: (数学公式显示是否支持)</span><br><span class="line">katex:   (Tex公式显示是否支持)</span><br><span class="line">hide: false (是否隐藏当前文章)</span><br><span class="line">comments: true #是否可评论</span><br><span class="line">toc: true #是否显示文章目录</span><br><span class="line">categories: &quot;云服务器&quot; #分类</span><br><span class="line">tags:   #标签</span><br><span class="line"> - centOS</span><br><span class="line"> - tomcat</span><br></pre></td></tr></table></figure><h2 id="站内搜索添加"><a href="#站内搜索添加" class="headerlink" title="站内搜索添加"></a>站内搜索添加</h2><p>站内搜索，我是采用的hexo-generator-search插件解决方案，安装完插件，然后配置一下，最后用hexo清理再生成一下全站静态，同时在根目录也会生成一个search.xml，用于做字符串模糊匹配的。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="添加或配置"><a href="#添加或配置" class="headerlink" title="添加或配置"></a>添加或配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-config（hexo配置）</span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"></span><br><span class="line">-butterfly-config（butterfly主题配置）</span><br><span class="line"></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  preload: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><h4 id="清理与生成"><a href="#清理与生成" class="headerlink" title="清理与生成"></a>清理与生成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601175004305.png" alt="image-20240601175004305"></p><h2 id="评论系统添加"><a href="#评论系统添加" class="headerlink" title="评论系统添加"></a>评论系统添加</h2><p>第三方评论系统我这里使用的是Gitalk ，Gitalk 是一个基于 GitHub Issue 和 Preact 开发的<code>评论插件</code>。使用GitHub登陆，能支持多国语言，至于他的原理，其他博主有介绍。这里就不展开了，如果有时间以后可能会整体介绍一下常用的第三方评论系统，因为我还是希望评论能支持多种方式登陆的，目前没有找到合适的就先选择Gitalk。</p><h4 id="注册应用账号"><a href="#注册应用账号" class="headerlink" title="注册应用账号"></a>注册应用账号</h4><p>地址：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/1.jpg" alt="1"></p><h4 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h4><p>注册成功后拿到 “Client ID” 和 “Client secrets”（点击生成再复制），其中注意的是Homepage URL 要设置为 用户名.github.io精确到https的地址。Authorization callback URL 填写注册的域名，如果绑定了个性化域名就填自己的域名，也是要精确到https的位置。</p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/2.jpg" alt="2"></p><h4 id="修改Butterfly配置"><a href="#修改Butterfly配置" class="headerlink" title="修改Butterfly配置"></a>修改Butterfly配置</h4><p>打开butterfly主题的配置文件，第一个找到 “gitalk” 项，将上面复制的client id 和 client secrets粘贴。</p><p>第二个找到 “comments”，将use配置为 “gitalk”，当然也可以用valine、Disqus之类的第三方评论系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  use: # 使用的第三方评论系统名称</span><br><span class="line">  text: true # 是否在按钮旁显示评论名称</span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line">  lazyload: false # 是否设置评论窗为懒加载</span><br><span class="line">  count: true # 是否设置评论数统计</span><br><span class="line">  card_post_count: true # 是否将评论数显示到首页</span><br><span class="line">  </span><br><span class="line">gitalk:</span><br><span class="line">  client_id: # github应用ID</span><br><span class="line">  client_secret: # github应用密钥</span><br><span class="line">  repo: 用户名.github.io</span><br><span class="line">  owner: 用户名</span><br><span class="line">  admin: 用户名</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/3.jpg" alt="3"></p><h4 id="博客仓库设置"><a href="#博客仓库设置" class="headerlink" title="博客仓库设置"></a>博客仓库设置</h4><p>进入仓库，点击 “Settings”，找到 “Features”， 将 “Issues” 勾选。</p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/4.jpg" alt="4"></p><h2 id="文章置顶功能添加"><a href="#文章置顶功能添加" class="headerlink" title="文章置顶功能添加"></a>文章置顶功能添加</h2><p>打开hexo配置文件 _config.yml，如果前面有per_page的关闭，使用的是hexo-generator-index插件排序，可以自定义序号和日期排序。</p><p>如何要置顶文章，只需在文章md的front-matter里添加一个top参数，数值自定。文章列表会出现一个钉子图标，要看到效果则要hexo先清理再生成。</p><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 5  # 每页条数</span><br><span class="line">  order_by:   </span><br><span class="line">    top: -1   # 置顶： -1.倒序 1.顺序</span><br><span class="line">    date: -1   # 日期： -1.倒序 1.顺序</span><br></pre></td></tr></table></figure><h4 id="md文章设置"><a href="#md文章设置" class="headerlink" title="md文章设置"></a>md文章设置</h4><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601193026538.png" alt="image-20240601193026538"></p><h4 id="清理与生成-1"><a href="#清理与生成-1" class="headerlink" title="清理与生成"></a>清理与生成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601192658429.png" alt="image-20240601192658429"></p><h2 id="RSS配置"><a href="#RSS配置" class="headerlink" title="RSS配置"></a>RSS配置</h2><p>对于RSS输出功能，需要安装 hexo-generator-feed 插件。最后使用hexo清理再生成，博客根目录就会生成atom.xml</p><h4 id="插件安装-1"><a href="#插件安装-1" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h4 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure><h4 id="设置RSS地址"><a href="#设置RSS地址" class="headerlink" title="设置RSS地址"></a>设置RSS地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h2 id="设置404页面"><a href="#设置404页面" class="headerlink" title="设置404页面"></a>设置404页面</h2><p>在hexo的_config.yml找到或添加error_404，设置开启，分别添加标题和背景图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_404:</span><br><span class="line">  enable: true</span><br><span class="line">  subtitle: &#x27;Page Not Found&#x27;</span><br><span class="line">  background: /img/404.jpg</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601193726689.png" alt="image-20240601193726689"></p><h2 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h2><p>先登陆或注册百度统计平台，找到 “使用设置” -&gt; “代码获取” -&gt; “新版统计代码获取”，然后会看到一段js代码，只需要复制如下的一个32位长度的字符串。最后将该字符串粘贴到butterfly的config.yml中的baidu_analytics中，部署后一天就可以在后台查看统计报表了。</p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/image-20240601194438994.png" alt="image-20240601194438994"></p><h2 id="MarketDown用法"><a href="#MarketDown用法" class="headerlink" title="MarketDown用法"></a>MarketDown用法</h2><p>关于新建的文章，我希望本地能备份一份，有md文件和图片，方便上传到其他平台博客。那要怎么做呢，这里我用一个免费的md工具——Typora为例。</p><h4 id="创建文件和文件夹"><a href="#创建文件和文件夹" class="headerlink" title="创建文件和文件夹"></a>创建文件和文件夹</h4><p>创建一个以文章标题的文件夹，里面再分别创建一img文件夹和同文章标题的md文件，img下再创建一个与文章标题同名的文件夹。</p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/Snipaste_2024-06-03_15-40-41.jpg" alt="image-20240601194438994"></p><h4 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h4><p>依次找到 “文件” -&gt; “偏好设置” -&gt; “图像” , 将插入图片时的下拉选中 “复制到指定路径”，填入下面的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./img/$&#123;filename&#125;/</span><br></pre></td></tr></table></figure><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/Snipaste_2024-06-03_16-07-18.jpg" alt="image-20240601194438994"></p><p>第二步找到 “格式” -&gt; “图像” -&gt; “设置图片根目录”，选择markdown文件同级的目录，最后复制图片时就会复制到img下的文章同名目录下。</p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/Snipaste_2024-06-03_16-13-06.jpg" alt="image-20240601194438994"></p><p>为什么要这样设置？因为Hexo的图片在打包前都是在主题包&#x2F;source&#x2F;img里，而为了方便本地能按文章存储，也方便将本地的文章图片直接丢到img下，然后md文件放到_post中。打包之后就能以仓库图片展示，而且按文章分类存储，以后删除起来也一目了然。</p><p><img src="/./img/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B1%AA%E5%8D%8E%E8%A3%85%E4%BF%AE/Snipaste_2024-06-03_16-15-44.jpg" alt="image-20240601194438994"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这次的优化看起来好像是面面俱到了，但其实关于Hexo主题还有更细节的处理。比如可以添加博客看板精灵，酷炫的动态大背景，还有鼠标跟随或点击特效等等。但是我这博客目前定位主要以内容为主，所以暂时就就演示了，当然，如果有用户喜欢也可以马上加上去的。</p><p>最后呢，就是三部曲的第二篇结束了，那下次就自然地要开始进入Hexo章最后一篇。现在是计划介绍一下怎么让博客被各大搜索引擎收录，以及一些推广心得等等。具体的详细内容未定，更新时间也还不知道，因为在等我那个小游戏的软著下来，下来后我一定要好好写一篇软著申请避坑的文章，可实在是太难等了！</p><p>（我是一个持续摸索个人副业的普通程序员，关注我，和你一起探索更多可能。——ZERO开发）</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo实战：（一）零成本搭建个人独立博客</title>
      <link href="/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/05/30/hexo%E5%AE%9E%E6%88%98%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%B6%E6%88%90%E6%9C%AC%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多平台都能写博客还有创作激励，为什么我又要搭一个？为什么这次要选择用Hexo框架？</p><p>对应的原因是流量自由和省钱，第一个，很多平台能写但不是都有收益，而且平台有自身的规则，比如会屏蔽一些推广类信息。如果我哪天做了一产品，是没办法直接用平台博客的方式硬推的，至少放码和链接不行。第二个用Hexo搭到GitHub上，我可以不用买服务器，毕竟现在也还没有想法要做一个什么样的东西。</p><p>总之，有个独立博客，相比平台博客在内容约束上更自由。有想法了就发出来，做了游戏什么的就放出来，md的文章以后要存储备份可以转word，更方便在副业的路上轻装探索。</p><p><img src="https://image-static.segmentfault.com/889/574/889574834-66558a201aa3a_fix732"></p><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo是一款基于Node.js的开源静态博客框架，用于快速、简单且高效地搭建个人或团队的静态博客网站。说白了他是一个静态网站生成器，我们新增文章只需要编辑md文件，通过运行命令再生成像html的静态文件。其实我挺早听过Hexo，但一直没用，直到我cms搭的博客别人挂马后。我关闭网站全面使用平台博客，但经种种原因，我又萌生了建独立博客的想法，并且这次打算走长期路线，第一步先记录上次Hexo搭建过程仅供参考。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>本地构建Hexo</li><li>配置 GitHub</li><li>代码上传与备份</li><li>个性化域名绑定</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Hexo的博客，不管是页面的添加还是构建都是通过npm命令，所以最基本要把Node安装了。项目部署和部署的地方又在GitHub，所以Git也要提前装好。这里强调一下，运行Hexo命令最好在Git的GUI窗口里，不要用Windows的cmd，坑多，关于Node和Git环境安装就跳过了。</p><h2 id="构建Hexo"><a href="#构建Hexo" class="headerlink" title="构建Hexo"></a>构建Hexo</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/397/606/3976061194-66547ba7ea10b_fix732"></p><h3 id="检验Hexo是否安装"><a href="#检验Hexo是否安装" class="headerlink" title="检验Hexo是否安装"></a>检验Hexo是否安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建一blog项目</span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"># 进入项目</span><br><span class="line">cd blog</span><br><span class="line"></span><br><span class="line"># 安装依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#右键 Git Bush，用户项目自动化部署</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo _config.yml中文乱码问题</span><br><span class="line">用Notepad++等编辑器打开，选择 “编码” -&gt; “转为UTF-8编码”</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/212/068/2120682345-665553639b9a6_fix732" alt="安装项目开发者操作包.jpg"></p><h3 id="项目预览"><a href="#项目预览" class="headerlink" title="项目预览"></a>项目预览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 清理旧的静态文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"># 运行预览项目</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/203/206/2032060845-66547f7eacb7a_fix732" alt="Snipaste_2024-05-23_19-55-21.jpg"><br><img src="https://image-static.segmentfault.com/362/375/3623756222-66547f8a45bad_fix732" alt="Snipaste_2024-05-23_19-57-44.jpg"></p><h2 id="配置-GitHub"><a href="#配置-GitHub" class="headerlink" title="配置 GitHub"></a>配置 GitHub</h2><p>这里虽然只是写的配置GitHub，其实包含了本地用Git生成SSH密钥对，和GitHub上公钥添加，提交Token的获取，以及Pages服务的开启。还有仓库名的建立也有讲究，下面就从这些点开始逐一展开。</p><h3 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h3><p>仓库名是个什么讲究法呢？就是格式要保持 “github账号名.github.io”, 比如我的账户名是“z11r00”，那么仓库就要建成 “z11r00.github.io”。如果不这样，最后等用Hexo部署完毕后，初始的域名可能就是 “github账号名.github.io&#x2F;仓库名”，会在后面多了一个路径，而且hexo的config没有设置好连css都加载不出来。<br><img src="https://image-static.segmentfault.com/193/028/1930284381-66554881e786a_fix732" alt="image.png"></p><h3 id="设置SSH"><a href="#设置SSH" class="headerlink" title="设置SSH"></a>设置SSH</h3><p>GitHub 的 SSH（Secure Shell）主要用于安全地连接到 GitHub 服务器，其实就是平时Git常用的克隆、拉取、提交、推送等操作。而好处除了安全外，就是提交代码不用每次都要输入账号密码。如果安装了hexo-deployer-git的话，只需一个命令就可以完成项目从静态构建到自动部署。</p><h4 id="生成SSH密钥对"><a href="#生成SSH密钥对" class="headerlink" title="生成SSH密钥对"></a>生成SSH密钥对</h4><p>打开Git面板，输入 “ssh-keygen -t rsa -C GitHub账户”, 这里的GitHUb账户是你登陆GitHub的邮箱等方式。生成后找到目录下的id_rsa.pub（公钥），用编辑器打开并复制。</p><p><img src="https://image-static.segmentfault.com/375/870/3758702029-66554b07260a3_fix732" alt="实际生成id_rsa文件.jpg"></p><h4 id="GitHub中添加SSH公钥"><a href="#GitHub中添加SSH公钥" class="headerlink" title="GitHub中添加SSH公钥"></a>GitHub中添加SSH公钥</h4><p>登陆GitHub网站，点击个人头像，找到 “Settings”-&gt;”SSH and GPG keys”后，点击 “New SSH keys”，最后将前面复制的很长的公钥字符串粘贴到Key文本框中。</p><p><img src="https://image-static.segmentfault.com/787/245/787245942-66554dae16cd9_fix732" alt="github添加ssh.jpg"><br><img src="https://image-static.segmentfault.com/358/939/3589395181-66554db78fe97_fix732" alt="github添加ssh key.jpg"><br><img src="https://image-static.segmentfault.com/992/287/992287568-66554dc28c008_fix732" alt="github粘贴ssh.jpg"></p><h4 id="验证设备是否可连接"><a href="#验证设备是否可连接" class="headerlink" title="验证设备是否可连接"></a>验证设备是否可连接</h4><p>通过 “ssh -T <a href="mailto:git@github.com">git@github.com</a>” 命令，验证当前的设备是否可以连接。<br><img src="https://image-static.segmentfault.com/241/980/241980211-66554e1e2ec12_fix732" alt="校验ssh是否绑定.jpg"></p><h4 id="获取提交的token"><a href="#获取提交的token" class="headerlink" title="获取提交的token"></a>获取提交的token</h4><p>虽然说SSH连接不用一直登陆，但是初次还要要的。而且不光要输入账号密码还需要一个提交用的Token,没有这个，运行hexo d一直提示Logon failed, 这个后面会集中列出报错事故的。</p><p>获取token，还是进入“Settins”，找到 “Developer settings”-&gt;“Personal access tokens”-&gt;“Tokens(classic)”, 然后设置备注和过期时间。最主要的权限要勾选 “workflow”、“gist”、“user”，点击 “Generate”按钮，生成的”ghp_”为前缀的就是token了，复制并保存下来。</p><p><img src="https://image-static.segmentfault.com/209/412/209412508-6655518f5f838_fix732" alt="提交仓库失败1.jpg"><br><img src="https://image-static.segmentfault.com/145/454/1454543801-665551992785f_fix732" alt="提交仓库失败3.jpg"><br><img src="https://image-static.segmentfault.com/250/879/2508792898-6655519f08d83_fix732" alt="提交仓库失败4.jpg"><br><img src="https://image-static.segmentfault.com/236/974/2369743040-665551a47567b_fix732" alt="提交仓库失败5.jpg"></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>项目部署的其实是将Hexo生成的静态文件提交到github上，后期添加文章也就是markdown文件，继续重新生成，重新部署。而项目的代码却在本地，虽然代码量不多，但是里面的package.json和_config.yml，以及用到的主题包，还是有必要保存一下。所以我这里的方法是，静态部署项目放在一个公有仓库，而项目源代码单独提交到一私有仓库下。</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>打开项目根目录下的_config.yml，主要添加仓库的地址，其他的配置下篇再介绍。因为hexo很多玩法更多的是配置和各种依赖，比如可以添加统计、留言、修改主题、站内搜索、甚至广告位等等。<br><img src="https://image-static.segmentfault.com/795/404/795404409-665572496e088_fix732" alt="image.png"></p><h3 id="静态文件生成"><a href="#静态文件生成" class="headerlink" title="静态文件生成"></a>静态文件生成</h3><p>通过 “hexo clean” 先清理，然后执行 “hexo g” 重新生成。</p><p><img src="https://image-static.segmentfault.com/419/680/4196801990-66555529bcbf6_fix732" alt="将博客编译为静态文件项目.jpg"></p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>通过命令 “hexo d”，开始部署项目，如果第一次运行，就需要前面提到的输入github账号密码。确认Login后会再次弹一个窗口就是输入Token了，最后完成部署。这里需要注意一下的是，最好用Git面板运行命令，如果是cmd很有可能第二次的窗无法弹出，亲测坑点。</p><p><img src="https://image-static.segmentfault.com/745/861/745861770-6655560a86a7d_fix732" alt="页面上传.jpg"><br><img src="https://image-static.segmentfault.com/178/743/1787433640-6655565a64292_fix732" alt="image.png"></p><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>部署完成就进入仓库下，除了查看提交的代码外，打开仓库下的 “Settings”，找到 “Pages”。</p><p><img src="https://image-static.segmentfault.com/186/643/1866436389-66556c0392c01_fix732" alt="提交仓库失败6.jpg"></p><h2 id="个性化域名绑定"><a href="#个性化域名绑定" class="headerlink" title="个性化域名绑定"></a>个性化域名绑定</h2><p>有一个git域名其实也不错，为什么还要买一个去绑定呢？一个是我本身这域名就空在这里，第二个是可以给博客增加一点IP点，第三个是更利于某度的爬取。我看其他博主说国内一些搜索引擎屏蔽了github的pages博客，当然我没有验证过，下次也要做SEO相关的时候可以测试一下。</p><h3 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h3><p>要想知道当前项目部署的独立IP地址，只需要ping一下github分配的域名，比如我直接 “ping z11r00.github.io”就可以看到了。</p><p><img src="https://image-static.segmentfault.com/125/915/1259157655-66556e994a682_fix732" alt="IP获取.jpg"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>进入购买的域名控制台，给自己的域名添加两个解析，一个指向旧域名，一个解析到前面获取到的IP地址。</p><p><img src="https://image-static.segmentfault.com/423/209/4232091621-66556efc9020b_fix732" alt="域名解析.jpg"></p><h3 id="项目绑定域名"><a href="#项目绑定域名" class="headerlink" title="项目绑定域名"></a>项目绑定域名</h3><p>进入仓库的“Settings”下，点击 “Pages”，找到 “Custom domain”，将自己的域名粘贴进文本框保存。然后在项目的“source” 新建CNAME（没有后缀）, 打开文件粘贴域名，比如我的zerofc.cn，最后再重新部署项目访问。</p><p><img src="https://image-static.segmentfault.com/110/663/1106633025-6655710566967_fix732" alt="image.png"></p><h2 id="报错汇总"><a href="#报错汇总" class="headerlink" title="报错汇总"></a>报错汇总</h2><p>1.extends includes&#x2F;layout.pug block content include .&#x2F;includes&#x2F;mixins&#x2F;post-ui.pug #recent-posts.recent-posts +postUI include includes&#x2F;pagination.pug<br>项目启动后报的这个，是因为缺失了一些依赖包，上面的是没有 pug 以及 stylus 的渲染器，解决方法就是安装对应的依赖。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">renderer</span>-pug hexo-<span class="keyword">renderer</span>-stylus --save</span><br></pre></td></tr></table></figure><p>2.运行后打开hexo博客上的中文乱码<br>解决方法是用Notepad++等编辑器打开，选择 “编码” -&gt; “转为UTF-8编码”。</p><p>3.unable to access ‘<a href="https://github.com/z11r00/z11r00.github.io.git/">https://github.com/z11r00/z11r00.github.io.git/</a>‘: Empty reply from server<br>出现这个报错的是项目初次部署时，原因就是没有设置Token，解决方法就是前面“配置 GitHub”的“提交Token获取”部分。</p><p>4.unable to access ‘<a href="https://github.com/z11r00/z11r00.github.io.git/">https://github.com/z11r00/z11r00.github.io.git/</a>‘: The requested URL returned error: 403<br>出现这个一般就是间接性打开GitHub网站，毕竟是国外网站，多刷新几下，多请求几下就可以了。</p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>既然博客已经搭起来了，后面还有分两步走，凑成三部曲。第一个是Hexo的各种配置和插件的玩法，第二个是Hexo博客SEO相关的内容，如果我那个小游戏软著下来了，可能博客的事情就会延后一点。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈后端人眼里的nvm、yarn、pnpm……</title>
      <link href="/2024/05/04/%E8%B0%88%E5%90%8E%E7%AB%AF%E4%BA%BA%E7%9C%BC%E9%87%8C%E7%9A%84nvm%E3%80%81yarn%E3%80%81pnpm%E2%80%A6%E2%80%A6/"/>
      <url>/2024/05/04/%E8%B0%88%E5%90%8E%E7%AB%AF%E4%BA%BA%E7%9C%BC%E9%87%8C%E7%9A%84nvm%E3%80%81yarn%E3%80%81pnpm%E2%80%A6%E2%80%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然我是做后端的，但也时常关注前端，只是最近觉得前端的各种工具名称太眼花缭乱了，nvm、yarn、pnpm、taro……</p><p>不要说具体使用，就连他们到底是工具还是新框架我都搞混。所以，我就用一篇文章简要记录他们到底是什么，怎么区别以及简易的搭建过程。</p><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>nvm（Node Version Manager），顾名思义，他是Node.js的版本管理工具。主要用来在单个操作系统下安装或管理多版本Node，常用于解决项目中不同版本依赖问题。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>github搜作者coreybutler，项目nvm-windows。</p><p><img src="https://image-static.segmentfault.com/883/863/883863526-66c9c70cb773a_fix732" alt="img"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装前如果电脑已经有了Node.js，最好卸载以防后面冲突。然后点击exe文件下一步下一步完成后，nvm会自动在电脑的用户变量中添加NVM_HOME和NVM_SYMLINK，最后cmd输入nvm -v，显示nvm版本号表示已经成功。</p><p><img src="https://image-static.segmentfault.com/276/799/2767992123-66c9c650b96dc_fix732" alt="img"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm install 6.2.0     安装指定版本</span><br><span class="line">nvm uninstall 6.2.0   卸载指定版本</span><br><span class="line">nvm list  查看安装列表</span><br><span class="line">nvm use 6.2.0  使用指定版本</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/209/420/2094206866-66c9c61628067_fix732" alt="img"></p><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><p>pnpm（Performant npm），是一个快速、磁盘空间友好的包管理工具，和npm类似，可以简单理解为npm的优化加强版，适合于较大的前端项目，具体的特征可以看其他博主的介绍。因为npm是Node自带，所以有Node即可有pnpm。</p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>npm install pnpm -g</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pnpm install 包  // </span><br><span class="line">pnpm i 包</span><br><span class="line">pnpm add 包    // -S  默认写入dependencies</span><br><span class="line">pnpm add -D    // -D devDependencies</span><br><span class="line">pnpm add -g    // 全局安装</span><br></pre></td></tr></table></figure><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p>yarn 是 Facebook 开发的一个 JavaScript 包管理工具，yarn 使用与 npm 不同的锁定文件格式，但是仍然可以兼容 npm 的包管理规范。</p><h4 id="下载安装-1"><a href="#下载安装-1" class="headerlink" title="下载安装"></a>下载安装</h4><p>npm install -g yarn</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn --version // 查看版本</span><br><span class="line">yarn init      // 同npm init，执行输入信息后，会生成package.json文件</span><br><span class="line">yarn install   // 安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</span><br><span class="line">yarn run       // 用来执行在 package.json 中 scripts 属性下定义的脚本</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>写这篇文章的最主要原因，其实还是因为平时独立开发中的项目有用到。比如，我放在独立博客里的在线工具（各种集成编程小工具），和项目中心（带摸鱼小游戏）都有使用pnpm和yarn，大家感兴趣的话可以看看。</p><p><img src="https://image-static.segmentfault.com/236/602/236602261-66ac8276ea541_fix732" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
